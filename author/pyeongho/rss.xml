<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>야근은 하기 싫은데 일은 잘하고 싶다</title>
	  <link>//brain_not_multi</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-01-08T00:00:00+00:00</pubDate>
	  <guid>//brain_not_multi</guid>
	  <description><![CDATA[
	     <h3>야근은 하기 싫은데 일은 잘하고 싶다</h3>

<ul>
<li>뇌에 대한 책</li>
<li>사람의 뇌는 멀티태스킹을 못한다.</li>
<li>한번에 할 수 있는 있는 최대 4개 평상시 3개 안좋을때 2개</li>
<li>그냥 한번에 한 가지 일만 하자</li>
<li>집중 할 때 한가지 일만 열심히 하자</li>
<li>집중력이 떨어지는 오후 시간에는 반복적인 작업이 좋다.</li>
<li>3가지 이상을 기억해야 할때는 메모 하자</li>
<li>메모를 이용해 해야 할 일을 정리 하자</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>트렌드 코리아 2019</title>
	  <link>//trendl</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-01-07T00:00:00+00:00</pubDate>
	  <guid>//trendl</guid>
	  <description><![CDATA[
	     <h3>트렌드 코리아 2019 요약 :  PIGGY DREAM</h3>

<ul>
<li>P : (컨셉을 연출하라)play the concept</li>
<li>I : (세포 마켓)invite to the cell market</li>
<li>G : (요즘 옛날, 뉴트로) going New-tro</li>
<li>G : (필 환경시대) green survival</li>
<li>Y : (감정대리인, 내마음을 부탁해) you are my proxy emotion</li>
<li>D : (데이터 인텔리전스) data intelligence</li>
<li>R : (공간의 재탄생,카메레존) rebirth of space</li>
<li>E : (밀레니얼 가족) emerging millennial family</li>
<li>A : (그곳만이 내세상, 나나랜드) as being myself</li>
<li>M : (매너소비자) manners make the consumer</li>
</ul>

<h3>느낌</h3>

<ul>
<li><p>위 내용으로 전체적인 트렌드는 알수 있었다. 잘 모르는 내용은 세포마켓(1인 마켓으로 인스타 마켓을 생각),
환경 시대는 플라스틱의 역습을 키워드로 생각하면 된다. 감정대리인은 전지적 참견 시점등 다른 사람을 관찰하며 감정을 같이 느낀다.
밀레니얼 가족 자기개발하는 엄마</p></li>
<li><p>2019년은 위와 비슷한 내용들의 뉴스가 많이 나올것이면 앱이나 이런 서비스를 위와 같은 형태가 강세 일것이다</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 UI 모음</title>
	  <link>//collect_ui_link</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-01-07T00:00:00+00:00</pubDate>
	  <guid>//collect_ui_link</guid>
	  <description><![CDATA[
	     <h3>디자이너가 원하는 라이브러리를 찾아보자</h3>

<ul>
<li>앱을 만들다 보면 커스텀 UI 가 필요한 경우가 너무 많다.</li>
<li>시간이 있는것도 아니고 시간이 있어도 기존에 나온것 보다 잘 만들기 어려우니</li>
<li>디자이너가 원하는 라이브러리를 찾아서 라이브러를 커스텀 해서 사용하자</li>
</ul>

<h3>링크 모음</h3>

<ul>
<li>GIF로 기본적인 동작이 잘 나와 있으니 보면서 필요 한걸 찾아서 사용 하면 좋다.</li>
<li><a href="https://github.com/wasabeef/awesome-android-ui">안드로이드  UI 모음 1</a></li>
<li><a href="https://www.ctolib.com/topics-113375.html">안드로이드  UI 모음 2</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>데이터바인딩과 뷰모델</title>
	  <link>//viewmodel</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-12-28T00:00:00+00:00</pubDate>
	  <guid>//viewmodel</guid>
	  <description><![CDATA[
	     <h3>데이터바인딩을 이용한 뷰모델</h3>

<ul>
<li>기존 프로젝트중 화면 하나를 변경<br></li>
<li>화면은 viewpager에 이미지 추가(횡으로 한칸 한칸 이동)</li>
<li><p>LinearLayout 에 현재 이미지 위치를 표시해 주는 포인트 추가</p>

<ul>
<li>이미지 개수가 최대 몇개인지 알수 없는 API 인지라 imageview를 동적 할당 하여 넣어줌 </li>
</ul></li>
<li><p>아래가 XML 
<script src="https://gist.github.com/pyeongho/ae301847d752e8a6fbd7909a4e3632ea.js"></script></p></li>
<li><p>뷰모델 
<script src="https://gist.github.com/pyeongho/7b47e6abfb5f1c8b1ffb03fc5f0d2dcd.js"></script></p></li>
<li><p>생각보다 괜찮은 방법으로 보임</p></li>
<li><p>해야할 작업은 많아 지지만 매우 마족 스러움</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>kotlin init 사용시 편집기 주의사항</title>
	  <link>//kotlin_init</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-11-20T00:00:00+00:00</pubDate>
	  <guid>//kotlin_init</guid>
	  <description><![CDATA[
	     <h3>kotlin constructor , init</h3>

<ul>
<li>생성자 사용하면서 사용하는 코틀린 내용입니다.</li>
<li>참고 <a href="https://kotlinlang.org/docs/reference/classes.html">kotlinlang.org</a></li>
<li>참고 <a href="https://thdev.tech/kotlin/2017/03/09/Kotlin-Constructor-Init/">꿈많은 개발자가 되자 Kotlin constructor init 이란?</a></li>
</ul>

<h4>문서의 소중함</h4>

<ul>
<li><p>The primary constructor cannot contain any code. Initialization code can be placed in initializer blocks, which are prefixed with the init keyword.<br>
During an instance initialization, the initializer blocks are executed in the same order as they appear in the class body, interleaved with the property initializers:</p></li>
<li><p>파파고 번역</p>

<ul>
<li>기본 생성자는 코드를 포함할 수 없습니다. 초기화 코드는 init 키워드가 앞에 붙는 initializer 블록에 배치할 수 있습니다.<br>
인스턴스 초기화 중에 이니셜라이저 블록은 속성 이니셜라이저와 함께 클래스 본체에 나타나는 것과 동일한 순서로 실행됩니다.(위에서부터 실행 한다.)</li>
</ul></li>
</ul>

<h4>다시 한번 확인 하는 이유는 역시나  NullPointerException</h4>

<ul>
<li>아래 코드를 확인</li>
</ul>

<p><script src="https://gist.github.com/pyeongho/b5aa08641cdfa05a6ca56f18a4d30d3e.js"></script></p>

<ul>
<li>편집기에서 에러가 발생 하지 않는게 문제</li>
<li>열심히 문서 보고 공부 했으면 문제가 없었겠지만  nullPoint -&gt; sb.append(&quot; hahaha&quot;) 에서 에러가 발생 한다.</li>
<li>순서대로 초기화 하기 때무에 val sb = StringBuilder(name) 하기 전에 사용, 널포인트 </li>
<li>sb.append(&quot; hahaha&quot;) 를 첫번째 init 블럭에 사용하면 에러 표시를 하지만 함수를 이용하면 나타 나지 않는다.</li>
<li>문서 확인과 편집기 완벽 하지 않음으로 발생하는 내용으로 잘 알고 있어야 합니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>파이썬 텔레그램 봇 만들기</title>
	  <link>//telefram_bot_father</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-11-14T00:00:00+00:00</pubDate>
	  <guid>//telefram_bot_father</guid>
	  <description><![CDATA[
	     <h3>텔래그램 봇을 이용해서 알림을 만들어 보자</h3>

<h4>왜</h4>

<ul>
<li>라즈베리파이에서 20초 정도에 한번씩 DI 값을 읽어서 서버로 전송 한다. 
가끔 라즈베리파이의 와이파이 연결이 끊겨서 동작 안할때가 있어서 라즈베리파이 동작 알림을 만들고 있습니다.</li>
</ul>

<h4>우선 텔레그램 알림 봇 부터 설정</h4>

<ul>
<li>텔래그램에서 BotFather 친구 추가</li>
<li>시작 버튼을 누른 후</li>
<li>설명서에 나온 /newbot 클릭 또는 명령어 실행</li>
<li>영어를 읽으면서 봇 이름 입력 하면 됩니다.</li>
<li>대략 xxx<em>bot -&gt; xxyy</em>bot 이런식으로 두번 입력<br></li>
<li>토큰이 발급 됩니다.</li>
</ul>

<h4>파이썬 라이브러리 설치</h4>

<ul>
<li>pip install python<em>telegram</em>bot</li>
<li>혹시 cryptography 가 없다고 나오면 </li>
<li>pip install cryptography </li>
<li>업그레이드와 setuptools 버전등은 설치에 맞게 해야 합니다.

<ul>
<li>c9 에서 작업 할때 setuptools 버전이 3.3 이라 설치가 안되어 폴더에서 직접 지우는 만행을 </li>
<li>pip에서 안되어 pip3 에서 테스트</li>
<li>테스트만 할거라 빨리 하고 싶어서 되는곳에서 진행 </li>
</ul></li>
<li>설치 버전은 아래와 같습니다. 

<ul>
<li>cryptography==2.4.1</li>
<li>python<em>telegram</em>bot==11.1.0</li>
</ul></li>
</ul>

<h4>봇을 만들기 완료</h4>

<ul>
<li>명령어로 동작 하는 방식이 기본적인 봇<br></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/5b61fc108e4888a76d2ef44e9026c88d.js"></script></p>

<ul>
<li>위와 같은 코드를 작성하면 /start 를 입력하면 &quot;I&#39;m a bot, please talk to me!&quot; 를 출력합니다.</li>
<li>start 가 아닌 다른 명령어들을 추가해서 원하는 기능을 만들 수 있습니다.</li>
</ul>

<h4>알림봇이라 말하지만 그냥 텔레그램 메시지 보내기</h4>

<ul>
<li>다른곳과 살짝 달라서 아직 어떻게 해야 하는지 몰라서 막 만들었습니다.</li>
<li>아무리 봐도 너무 이상한 코드지만 사용자가 없을 때 동작 만 확인하기 좋은 코드</li>
</ul>

<p><script src="https://gist.github.com/pyeongho/d8e99a95e6352af3c1cc0b0527eaea57.js"></script></p>

<ul>
<li>메시지에서 chat_id 를 찾아서 해당 id에 메시지를 보내는 샘플 입니다.</li>
<li>set() 자료구조를 이용해서 동일한 id 를 필터링 하였습니다. </li>
<li>그냥 참고용 이에요 </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>App Version Name 다양한 방법</title>
	  <link>//appVersion</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-11-12T00:00:00+00:00</pubDate>
	  <guid>//appVersion</guid>
	  <description><![CDATA[
	     <h3>몇명 사용하지도 않는데 왜 앱 버전을 못 가지고 오는 걸까?</h3>

<ul>
<li>그냥 버전이름과 코드를 가지고 오는 방법으로 아래와 같이 사용하고 있습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">        <span class="n">PackageManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
           <span class="n">PackageInfo</span> <span class="n">info</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">getPackageInfo</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">(),</span> <span class="mi">0</span><span class="o">);</span>
           <span class="n">String</span> <span class="n">packageName</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">packageName</span><span class="o">;</span>
           <span class="kt">int</span> <span class="n">versionCode</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">versionCode</span><span class="o">;</span>
           <span class="n">String</span> <span class="n">versionName</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">versionName</span><span class="o">;</span>
           <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NameNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
           <span class="c1">// TODO Auto-generated catch block</span>
           <span class="o">}</span>
</code></pre></div>
<ul>
<li>특정 기기에서 특정 조건 일때만 죽는 디버깅이 너무 어렵다.</li>
<li>우선 문제 해결 먼저 진행</li>
<li>처음에는 하드코딩하 넣었지만 버전 올라갈때마다 같이 변경해줘야 하는 너무나 큰 불편함이 존재함</li>
<li>그래서 빌드 컨피그를 이용하여 아래와 같이 사용하면 상수 처럼 사용 가능 </li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">      /*version name*/
      BuildConfig.VERSION_NAME

      /*version code*/
      BuildConfig.VERSION_CODE

</code></pre></div>
<h3>BuildConfig 에 나만의 상수 추가</h3>

<ul>
<li>위 방법을 찾기 전에는 아래와 같은 방법으로 진행했지만 이제는 다른 상수 추가 할때 사용 중<br></li>
<li>프로젝트 build.gradle 에서 appVersion 을 추가</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">ext {
    appVersion = "1.0.5"
}

</code></pre></div>
<ul>
<li>versionName &quot;$rootProject.appVersion&quot;</li>
<li>build.gradle buildTypes 에 추가 한 내용</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    def version=  '\"' + "$rootProject.appVersion" +'\"'
    debug{
        buildConfigField "String", "APP_VERSION", version
    }
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        buildConfigField "String", "APP_VERSION", version
    }

</code></pre></div>
<ul>
<li>BuildConfig.APP_VERSION  이런 상수를 사용 가능하다.</li>
<li>필요한 상수등을 정의해서 편하게 사용하면 된다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>No toolchains found in the NDK</title>
	  <link>//no-ndk</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-11-09T00:00:00+00:00</pubDate>
	  <guid>//no-ndk</guid>
	  <description><![CDATA[
	     <h3>NDK 를 사용하지 않는데</h3>

<ul>
<li>안드로이드 스튜디오 3.2로 업데이트 이후 구 버전 프로젝트 실행 시 아래와 같은 에러가 너무 많이 난다. </li>
<li>&quot;No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android&quot;</li>
</ul>

<h3>나만의 해결</h3>

<ul>
<li>그래들 버전 업</li>
<li>다른 분들은 안될수도 있지만 저는 3.2.1 로 변경하니 NDK 가 더이상 안나옵니다.</li>
<li>&quot;classpath &#39;com.android.tools.build:gradle:3.2.1&#39;&quot;</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>앱 아이콘 동적 변경</title>
	  <link>//change-icon</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-11-06T00:00:00+00:00</pubDate>
	  <guid>//change-icon</guid>
	  <description><![CDATA[
	     <h3>아이콘을 동적 변경해야 하는일도 있는 세상</h3>

<ul>
<li>세상은 어떤일들이 일어 날지 모른다. 앱 아이콘을 조건에 따라 변경하고 싶어 하는 일도 있다.</li>
<li>정말 가능하다 ㅎㅎ</li>
</ul>

<h3>동적 아이콘 변경</h3>

<ul>
<li><a href="https://github.com/myinnos/AppIconNameChanger">AppIconNameChanger</a> </li>
<li>동작은 github 에 라이브러리가 잘 처리해 줍니다.</li>
</ul>

<h3>기본적인 알리아스 사용</h3>

<ul>
<li>애플리케이션 배포후에 런처 액티비티를 변경해야하는 일이 발생 할때 사용하면 좋다.</li>
<li>앱 업데이트로 바탕화면의 아이콘이 없어지는건 앱이 동작 안하는것과 같다.</li>
<li>아래 코드와 같이 기존 액티비티의 이름(기존 이름을 알리아스로 설정)이 실행되면 신규 액티비타를 실행 시켜 주는 방법 </li>
</ul>

<p><script src="https://gist.github.com/pyeongho/57ea15753697fd8c3e35a87d18e8fa64.js"></script></p>

<h3>동작 확인</h3>

<ul>
<li>메니페스트의 activity-alias 를 이용하는 방식이다.</li>
<li>알리아스의 번역처럼 별명을 지어 주는 내용입니다.</li>
<li>알리아스를 만들어서 각각의 속성을 주고 targetActivity 를 이용해서 실행 시킬 액티비티를 설정</li>
<li>동작해야 하는 액티비티는 하나가 되지만 각각의 별칭을 이용해서 접근이 가능하다.</li>
<li>기본동작 해양하는 알리아스를  android:enabled=&quot;true&quot; 활성화 하면 된다.</li>
<li>코드에서 해당 알리아스를 기본으로 동작 시켜 주면 된다.<br></li>
<li>아래 코드 내용처럼 패키지매니저를 이용해서 패키지 구성 요소를 변경 할수 있다.</li>
</ul>

<p><script src="https://gist.github.com/pyeongho/ce5b9f9862ab86312bd6203e2dd8648e.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>Jetpack 사용을 위한 기초 공부 AAC(ViewModel)</title>
	  <link>//aac_c2</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-10-29T00:00:00+00:00</pubDate>
	  <guid>//aac_c2</guid>
	  <description><![CDATA[
	     <h3>샘플은 구글</h3>

<ul>
<li><a href="https://github.com/googlesamples/android-sunflower">해바라기</a><br></li>
<li><a href="https://github.com/googlesamples/android-architecture-components">구글 샘플</a></li>
<li><a href="https://developer.android.com/topic/libraries/architecture/viewmodel">ViewModel</a></li>
</ul>

<h3>패턴의 변화</h3>

<ul>
<li>ViewModel클래스는 UI 관련 데이터를 라이프 사이클을 고려한 방식으로 저장하고 관리하도록 설계되었습니다. 이 ViewModel클래스를 사용하면 화면 회전과 같은 구성 변경시에도 데이터를 유지할 수 있습니다.</li>
</ul>

<h3>뷰모델</h3>

<ul>
<li>뷰모델은 옵저버패턴이라고 이해중</li>
<li>데이터가 변화 가능한곳에 콜백 같은 옵저버를 추가한다.</li>
<li>UI 쪽에서 해당 데이터의 콜백을 이용하여 업데이트 한다.</li>
<li>데이터를 콜백 형태로 묶어 놓기 때문에 위에서 말하는 UI 와 완전 분리가 가능하다.</li>
<li>예를 들어 특정 데이터가 변경 되면 콜백 발생하도록 하고 콜백에서 UI 업데이트를 처리한다.</li>
<li>이런 개념으로 이해 함</li>
<li>BasicRxJavaSampleKotlin 기본으로 공부 중</li>
<li>콜백을 넣어 주는 부분이 직접접이지 않아 이해 하고 있어야 이해가 된다.</li>
<li>아래와 같은 코드가 있을 때 Rx 를 이용해서  viewModel.userName()  변화를 감지하여 UI 업데이트 </li>
<li>클릭 이벤트에서 updateUserName() 를 호출 하면 DB 완료후 결과를 다시 읽어 UI 를 업데이트 함</li>
<li>하지만 뷰모엘을 이용하면 콜백으로 변경 내용을 확인 하므로 UI 업데이트에 대한 의존성을 없앨수 있다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">      override fun onStart() {
            super.onStart()
            // Subscribe to the emissions of the user name from the view model.
            // Update the user name text view, at every onNext emission.
            // In case of error, log the exception.
            disposable.add(viewModel.userName()
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({ this.user_name.text = it },
                            { error -&gt; Log.e(TAG, "Unable to get username", error) }))
        }

        override fun onStop() {
            super.onStop()

            // clear all the subscription
            disposable.clear()
        }

        private fun updateUserName() {
            val userName = user_name_input.text.toString()
            // Disable the update button until the user name update has been done
            update_user_button.isEnabled = false
            // Subscribe to updating the user name.
            // Enable back the button once the user name has been updated
            disposable.add(viewModel.updateUserName(userName)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({ update_user_button.isEnabled = true },
                            { error -&gt; Log.e(TAG, "Unable to update username", error) }))
        }

</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
