<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>RN 헬로우 월드</title>
	  <link>//rn_beginner</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-02-17T00:00:00+00:00</pubDate>
	  <guid>//rn_beginner</guid>
	  <description><![CDATA[
	     <h3>RN 을 시작해 보자</h3>

<ul>
<li><p>필요 패키지 설치
~~~
brew install watchman
brew install flow
brew install nvm
nvm install node
nvm alias default node
brew install caskroom/cask/brew-cask
brew cask install virtualbox
brew install yarn
~~~</p></li>
<li><p>렘의 문서를 따라 하다 보면 2곳에서 에러가 발생합니다.</p>

<ul>
<li>첫번째 에러 해결

<ul>
<li>open AwesomeProject/ios/AwesomeProject.xcodeproj -&gt; 이걸로 하면 에러 발생</li>
<li>open AwesomeProject/ios/AwesomProject.xcworkspace  이걸로 해야 합니다.</li>
</ul></li>
<li>두번째 에러 해결

<ul>
<li>main.jsbundle 에러 가 발생하면</li>
<li>Build Pharse에 Copy Bundle Resource 에 &#39;+&#39; 버튼을 누르고 main.jsbundle을 선택해서 추가해주자.</li>
</ul></li>
</ul></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://academy.realm.io/kr/posts/react-native/">https://academy.realm.io/kr/posts/react-native/</a></li>
<li><a href="https://velog.io/@dody_/RN-%EC%97%90%EB%9F%AC%EB%85%B8%ED%8A%B8-main.jsbundle-does-not-exist-">https://velog.io/@dody_/RN-%EC%97%90%EB%9F%AC%EB%85%B8%ED%8A%B8-main.jsbundle-does-not-exist-</a></li>
<li><a href="https://alpoxdev.tistory.com/18">https://alpoxdev.tistory.com/18</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>헤로쿠 기본 설정</title>
	  <link>//heroku</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-11-27T00:00:00+00:00</pubDate>
	  <guid>//heroku</guid>
	  <description><![CDATA[
	     <h3>헤로쿠 기본 공부</h3>

<ul>
<li>헤로쿠 가입후</li>
<li>앱 생성 : 앱이름은 :  &quot;random-bot-17&quot;</li>
<li><p>cli 설치
~~~
brew tap heroku/brew &amp;&amp; brew install heroku
~~~</p></li>
<li><p>heroku login 실행</p></li>
<li><p>브라우저 로그인 실패(ip 다름)</p></li>
<li><p>heroku login --interactive 을 이용해서 터미널 로그인(이메일, 비밀번호 로그인 완료)</p></li>
<li><p>https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up</p>

<ul>
<li>node --version  설치확인</li>
<li>npm --version 설치확인</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 리뷰 요청하기</title>
	  <link>//review</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-23T00:00:00+00:00</pubDate>
	  <guid>//review</guid>
	  <description><![CDATA[
	     <h3>안드로이드도 리뷰를 요청 할 수 있습니다.</h3>

<ul>
<li><a href="https://developer.android.com/guide/playcore/in-app-review">https://developer.android.com/guide/playcore/in-app-review</a></li>
</ul>

<h3>사용법</h3>

<ul>
<li>참고 문서에도 있지만 천천히 따라하기</li>
<li>의존성 주입 :  implementation &#39;com.google.android.play:core-ktx:1.8.1&#39;</li>
<li><p>추가 코드 : 결과 처리 예외 처리 역시 가능함</p>

<ul>
<li></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    val manager = ReviewManagerFactory.create(context)
    val request = manager.requestReviewFlow()
    request.addOnCompleteListener { request -&gt;
        if (request.isSuccessful) {
            // We got the ReviewInfo object
            val reviewInfo = request.result
        } else {
            // There was some problem, continue regardless of the result.
        }
    }  
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>github action 사용하기</title>
	  <link>//action</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-22T00:00:00+00:00</pubDate>
	  <guid>//action</guid>
	  <description><![CDATA[
	     <h3>Github action 을 이용한 CI/CD</h3>

<ul>
<li>기본적인 액션 사용법은 너무 간단합니다.

<ul>
<li>깃허브에서 액션 누르고 새로 만들기 누르고 안드로이드 선택 하면 기본적인 생성은 가능합니다.</li>
</ul></li>
<li><p>원하는 방법이 모두 다를수 있지만 간단하게 작성해 보았습니다.</p>

<ul>
<li>특정 태그가 푸시 되면 빌드를 시작 한다.</li>
<li>원하는 flavor 로 빌드 한다.</li>
<li>태그 이름으로 바이너리를 생성한다.</li>
<li>바이너리를 아티팩트로 만들어서 업로드 한다.</li>
<li>슬랙으로 공유한다.</li>
<li>아티팩트 주소가 아닌 슬랙 액션 주소를 공유해서 찾아서 다운 받아야 하지만 빌드 상태를 알수 있어서 그냥 유지 하였습니다.</li>
</ul></li>
<li><p>참고 내용</p>

<ul>
<li><p>태그 필터 아래 내용이 DEV 로 시작하는 태그를 감지하여 빌드를 시작하는 코드</p>
<div class="highlight"><pre><code class="language-" data-lang="">on:
push:
tags:
  - DEV*
</code></pre></div></li>
<li><p>flavor 로 빌드 하기</p>

<ul>
<li>run: bash ./gradlew assembleDevDebug</li>
<li>bash 퍼미션 오류 수정</li>
<li>assembleDevDebug 원하는 flavor 로 apk 생성</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">- uses: actions/checkout@v2
- name: set up JDK 1.8
uses: actions/setup-java@v1
with:
  java-version: 1.8
- name: Build with Gradle
run: bash ./gradlew assembleDevDebug
</code></pre></div></li>
<li><p>태그 이름 환경 변수 설정 및 사용</p>
<div class="highlight"><pre><code class="language-" data-lang="">- name: Set tag name env
  run: echo ::set-env name=DEVELOP_VERSION::${GITHUB_REF#refs/*/}
- name: check tag name
  run: |
    echo $DEVELOP_VERSION
    echo $  
</code></pre></div></li>
<li><p>파일 이름 변경, 아티팩트 업로드(라이브러리 사용), 자신의 경로에 맞게 수정해야 합니다.</p></li>
<li><p>슬랙 알림 라이브러리</p>

<ul>
<li><a href="https://github.com/marketplace/actions/slack-notify">https://github.com/marketplace/actions/slack-notify</a></li>
</ul></li>
</ul></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/72c897d81aeb4b9e03404d0289a31fa0.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 fastlane 빌드</title>
	  <link>//fastlane</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-10T00:00:00+00:00</pubDate>
	  <guid>//fastlane</guid>
	  <description><![CDATA[
	     <h3>azure, fastlane</h3>

<ul>
<li><p>azure</p>

<ul>
<li>회원가입</li>
<li>파이프라인 생성</li>
<li>깃허브 연결</li>
<li>yml 파일 생성(자동생성 사용)</li>
<li>필요에 따라 내용 추가</li>
</ul></li>
<li><p>fastlane</p>

<ul>
<li>안드로이드 앱 루트 폴더로 이동</li>
<li>fastlane init 실행

<ul>
<li>json 파일은 플레이콘솔 액세스 용으로 콘솔에서 생성 가능</li>
</ul></li>
</ul></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://dev-yakuza.github.io/ko/react-native/fastlane/">https://dev-yakuza.github.io/ko/react-native/fastlane/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>소소한 재택 근무</title>
	  <link>//home</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-08-26T00:00:00+00:00</pubDate>
	  <guid>//home</guid>
	  <description><![CDATA[
	     <h3>처음으로 재택</h3>

<ul>
<li>집에 책상 의자가 없어서 바닥에 앉아서 하는데 엉덩이가 너무 아퍼요</li>
<li>생각보다 적응은 잘되요 ㅎㅎ</li>
<li></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 앱 상태(foreground, background)</title>
	  <link>//app</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-03-12T00:00:00+00:00</pubDate>
	  <guid>//app</guid>
	  <description><![CDATA[
	     <h3>외부에서 앱을 실행 하거나 푸시 도착 했을때 앱 상태가 필요 한 경우가 있습니다.</h3>

<ul>
<li>Foreground 라는 클래스를 사용 했지만 라이프 사이클을 이용하면 쉽게 처리 가능합니다.</li>
</ul>

<h3>라이프 사이클 클래스</h3>

<ul>
<li>상태는 3개로 실행 안됨</li>
<li>백그라운드</li>
<li>포그라운드<br>
<script src="https://gist.github.com/pyeongho/5a3a3bcfa25b9b85e1dd4c3a6d474c2b.js"></script></li>
</ul>

<h3>애플리케이션 클래스에 추가</h3>

<ul>
<li>앱에서 사용하는 애플리케이션 클래스를 상속 받은 곳에서 아래 내용을 추가해서 활성화 한다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">ProcessLifecycleOwner.get()
            .lifecycle
            .addObserver(OnAppObserver())

</code></pre></div>
<h3>유의사항</h3>

<ul>
<li>아래 내용 참고 해서 원하는상태를 체크해서 동작 하면 됩니다.</li>
<li>외부 딥링크에서 앱 호출시 포그라운드 동작한다.

<ul>
<li>스키마로 앱을 실행하면서 백그라운드에서 포그라운드로 변경되면서 포그라운드 동작 </li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 adid 가져오기</title>
	  <link>//adid</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-02-25T00:00:00+00:00</pubDate>
	  <guid>//adid</guid>
	  <description><![CDATA[
	     <h3>앱을 개발하다 보면 adid 를 가져와야 하는 일도 있습니다.</h3>

<ul>
<li>최종적으로 사용할 함수는 아래와 같습니다. </li>
<li>비동기 처리는 필수 입니다.</li>
<li>그리고 의존성도 추가 해야 합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  AdvertisingIdClient.getAdvertisingIdInfo(context).getId()
</code></pre></div>
<h3>추가 내용 및 최종 카드</h3>

<ul>
<li>의존성 이름은 아래와 같으면 버전은 선택해서 넣으면 됩니다. </li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  implementation 'com.google.android.gms:play-services-ads:18.3.0'

</code></pre></div>
<ul>
<li>대충 코드는 아래와 같으면 어싱크 태스크 등을 이용하셔도 됩니다.</li>
<li>AdvertisingIdClient.getAdvertisingIdInfo(context).getId()  함수를 비동기로 사용 하면 됩니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">
    Observable.just(context)
            .map {AdvertisingIdClient.getAdvertisingIdInfo(it).getId()}
            .subscribeOn(Schedulers.io())
            .subscribe(
                    {
                        log.d("adid  "+it)
                    },
                    {
                        log.e(it.message)
                    },
                    {}
            )

</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 5.0 ~ 5.1 Error inflating class android.webkit.WebView (21~22)</title>
	  <link>//androidx_webview</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-02-07T00:00:00+00:00</pubDate>
	  <guid>//androidx_webview</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/57783707/webview-inflateexception">https://stackoverflow.com/questions/57783707/webview-inflateexception</a></li>
</ul>

<h3>androidx 에서 Error inflating class android.webkit.WebView 에러 발생</h3>

<ul>
<li>롤리팝 버전에서 해당 에러로 앱 크래시</li>
</ul>

<h3>콜라보레이션</h3>

<ul>
<li>androidx.appcompat:appcompat:1.1.0</li>
<li>com.google.android.material:material:1.1.0</li>
<li>위 2개의 라이브러리의 콜라브레이션으로 에러 발생  1.1.0 이 2개모두 추가되어 있으면 100% 크래시(롤리팝 버전에서)</li>
</ul>

<h3>appcompat 버전 수정</h3>

<ul>
<li>androidx.appcompat:appcompat:1.1.0 -&gt; androidx.appcompat:appcompat:1.0.2 </li>
<li>com.google.android.material:material:1.1.0</li>
<li>appcompat:1.0.2를 사용한다고 하면 안죽는다고 하지만 </li>
<li>appcompat:1.0.2 과 material:1.0.0 을 사용할때만 정상 동작 합니다.</li>
</ul>

<h3>웹뷰 커스텀 버전을 사용하는게 마음이 편할거 같습니다.</h3>

<ul>
<li><p>코틀린 버전 (자동 변환)
<script src="https://gist.github.com/pyeongho/44f8bd5cac7c26a9d6110550535cbefa.js"></script></p></li>
<li><p>자바 버전
<script src="https://gist.github.com/pyeongho/70dc3d9c1035a9082756f7982059876a.js"></script></p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>플레이스토어 referrer 데이터 넘기기</title>
	  <link>//store_referrer</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-02-04T00:00:00+00:00</pubDate>
	  <guid>//store_referrer</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/24833801/pass-referrer-data-through-chrome-intent-to-google-play">https://stackoverflow.com/questions/24833801/pass-referrer-data-through-chrome-intent-to-google-play</a></li>
</ul>

<h3>랜딩 페이지 제작 시  referrer 데이터 전송</h3>

<ul>
<li>검색 하면 항상 나오는 형태로 아래와 같이 사용이 가능 하다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  market://details?id=com.패키지.이름&amp;referrer=xxxx 
</code></pre></div>
<ul>
<li>위와 같이사용하기 위해서는 웹에서 앱의 설치 유무를 판단 하여 앱실행 또는 마켓이동으로 분기를 처리해야한다. 분기 처리가 완벽하면 문제가 없겠지만 타임아웃을 이용해서 처리하는게 일반적이어서 문제가 발생 한다.</li>
<li>차라리 아래와 같은 일반 적인 형태에서 처리가 가능하면 어떨까 해서 찾아 보았습니다.(전달 데이터는 URL인코딩 사용 추천)</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  Intent://호스트?데이터A=AAAAAAAA&amp;데이터B=BBBBBBB#Intent;scheme=스키마;action=android.intent.action.VIEW;category=android.intent.category.BROWSABLE;package=com.패키지.이름;end 
</code></pre></div>
<h2>intent:// 스토어 이동시 리퍼러(referrer) 및 extra 데이터 전달</h2>

<ul>
<li>S.market_referrer= 를 추가하면 플레이스토어어 리퍼러에 데이터 전달 가능</li>
<li>아래 처럼 넣으면 InstallReferrerClient 에서 데이터를 확인 가능 합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  Intent://호스트?데이터A=AAAAAAAA&amp;데이터B=BBBBBBB#Intent;scheme=스키마;action=android.intent.action.VIEW;category=android.intent.category.BROWSABLE;package=com.패키지.이름;S.market_referrer=데이터A=AAAAAAAA&amp;데이터B=BBBBBBB;end 
</code></pre></div>
<ul>
<li>참고 
<script src="https://gist.github.com/pyeongho/a129329471269e1b9fcf09d6a19c24b5.js"></script></li>
</ul>

<h2>intent 로 데이터를 보내는 형태가 미리 정의 되어 있다.</h2>

<ul>
<li>타입</li>
<li>S.market<em>referrer 이면 스트링 타입의 market</em>referrer 이다.<br></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  String =&gt; 'S'
  Boolean =&gt;'B'
  Byte =&gt; 'b'
  Character =&gt; 'c'
  Double =&gt; 'd'
  Float =&gt; 'f'
  Integer =&gt; 'i'
  Long =&gt; 'l'
  Short =&gt; 's'

</code></pre></div>
<ul>
<li> 웹에서 앱을 시작 할때 쿼리문 말고 아래 처러 보내서 데이터를 확인 가능 합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  // 웹 
  &lt;a href="intent://whatever/#Intent;scheme=myapp;package=com.what.ever.myapp;S.name=Perico%20de%20los%20Palotes;i.age=35;end"&gt;Do Whatever&lt;/a&gt;


  // 앱 
  intent.extras?.let {
      val  name = it.getString("name")
      val  age = it.getInt("age")
  }

</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
