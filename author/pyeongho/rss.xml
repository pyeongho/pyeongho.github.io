<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>RemoteConfig FirebaseRemoteConfigFetchThrottledException</title>
	  <link>//firebase_remoteconfig</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-22T00:00:00+00:00</pubDate>
	  <guid>//firebase_remoteconfig</guid>
	  <description><![CDATA[
	     <h3 id="section">파이어베이스 리모트 컨피그 사용</h3>
<ul>
  <li>앱 수정 없이 API 서버 사용 유무를 선택 하는 기능을 만들려고함</li>
  <li>공지나 강제 업데이트 기능을 이걸로 하면 좋을거 같음</li>
</ul>

<h4 id="section-1">0. 목적</h4>
<ul>
  <li>앱 재배포 없이 기능을 선택 하려고함</li>
  <li>firebase reomte config 기능이 눈에 들어옴</li>
  <li>테스트도 할겸 도전</li>
</ul>

<h4 id="section-2">1. 앱에 파이어 베이스 리모트 컨피그 기능 추가</h4>
<ul>
  <li>안드로이드 스튜디오에서 편하게 추가 가능하다.</li>
  <li>tools -&gt; Firebase 선택시 편집기 오른쪽에 사용 가능한 기능이 나옵니다.</li>
  <li>Remote Config  를 선택해서 순서대로 하면 사용상 문제는 없습니다.</li>
</ul>

<h4 id="section-3">2. 처음 한두번은 문제 없다가 갑자기 에러가 나기 시작함</h4>
<ul>
  <li>순서 대로 진행 하면 ‘Fetch Failed’ 에러로 정확한 이유를 알수 없음</li>
  <li>그래서 addOnFailureListener 리스너를 이용해서 exception 클래스 이름을 확인 하였습니다.</li>
  <li>FirebaseRemoteConfigFetchThrottledException</li>
  <li>위 내용으로 에러가 발생</li>
  <li><a href="http://blog.naver.com/PostView.nhn?blogId=cranjathe&amp;logNo=220845740807&amp;parentCategoryNo=&amp;categoryNo=158&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView">사용법 및 에러처리 방법</a></li>
  <li>구글 검색으로 위와 같은 내용이 찾음</li>
  <li>아래 코드로 동작 확인</li>
</ul>

<p><code class="highlighter-rouge">java
    FirebaseRemoteConfigSettings setting = new FirebaseRemoteConfigSettings.Builder()
      .setDeveloperModeEnabled(BuildConfig.DEBUG)
      .build();
    mFirebaseRemoteConfig.setConfigSettings(setting);
</code></p>

<h4 id="remote-config---">3. Remote Config 사용시 주의 사항</h4>
<ul>
  <li>개발 모드 일때는 꼭 개발 설정을 하자</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>대한민국 부동산의 미래</title>
	  <link>//nav_real_estate</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-20T00:00:00+00:00</pubDate>
	  <guid>//nav_real_estate</guid>
	  <description><![CDATA[
	     <h4 id="section">본것 깨달은것 적용할것</h4>

<h4 id="section-1">1. 내꺼</h4>
<ul>
  <li>너무 늦은거 같다는 생각을 많이 하였습니다. 노후파산을 읽고 은퇴후 생활을 고민 하여야 했지만 생각만 하고 실천하지 못하였다. 그래서 많은 시간이 지나버렸다. 이번 ‘대한민국 부동산의 미래’ 라는 책을 읽고 다시한번 실행 해야겠다는 생각을 했다. 책의 출시 시기가 2016년6월 빚을 내면 원금과 이자를 같이 갚아야 한다는 내용이 부족하지만 현실을 바라보기는 충분다. 이상적인 은퇴시기인 60세에 은퇴를 한다고 가정을 해보자. 그러면 최소 30년은 벌어놓은 돈으로 생활해야 한다. 최저 생활비는 150이라고 하지만 사람다운 삶을 위해서는 250정도는 있어야 한다고들 한다. <br />
  단순한 계산으로 250 X 12 X 30 = 90,000 9억 정도가 있어야 한다. <br />
  생각을 안해도 순수하게 9억을 가지고 은퇴하기는 힘들거 같다.<br />
  한달 단위로 가능성을 만들어 보자<br />
  주택 연금 : 5억짜리 집으로 연금을 신청하면 한달에 135 만원 정도 나온다고 한다.<br />
  주택연금이 좋은점은 연금을 받을 동안 해당 집에서 거주 해도 되는걸로 보인다. 250 중에 집값도 포함 되어 있다고 생각하면 많은 부분이 해소된다. 공인중개사분은 2~3채를 사야 한다고 한다. 하지만 한채 사기도 힘든데 이걸 어떻게 해야 하는지도 잘 모르겠다.</li>
  <li>전세를 끼고 집을 구매하는 방법, 전세값과 집값이 차이가 많이 안나는 곳에 갭투자 하면 좋을거 같다. 월급으로 이자를 감당이 될것으로 보인다.</li>
  <li>토지 구매를 생각해야 한다. 30년뒤에 토지 값은 오를것으로 생각한다. 책에 나온것을 보면 과거 20~30년간 토지 가격은 최대 2~3000배 올라다고 한다.</li>
  <li>주택 구매는 서울과 1기 신도시를 타겟으로 해야 한다. 이유는 집값이 떨어지지 않을 곳이다.</li>
  <li>실제 거주 지역과 투자용 집을 구분해야 한다.</li>
  <li>내년이 오기전에 전세끼고 집을 구매하는 방법을 생각해 보자</li>
  <li>계산
    <ul>
      <li>전세를 끼고 주택을 구매한다. 예를 들어서 100%짜리 집을 젠세금 75%끼고 있는 집을 25%에 구매 한다.</li>
      <li>25%는 대출 한다. 이외 부가적인 돈은 보유 현금으로 한다.</li>
      <li>현재 살고 있는 전세금으로 25%를 상환한다. 상환한 나머지 금액으로 다른 곳에 집을 구한다.</li>
      <li>75%의 부채를 가지고 있는것과 동일하다. 지하철역 주변과 공실이 없도록 해야한다.</li>
      <li>하지만 75%는 이자가 없다.</li>
      <li>75%를 줄여야 한다. 실제 거주하는곳도 좋았으면 좋겠다.
        <ul>
          <li>선택1
            <ul>
              <li>은행에서 50%를 대출 받아서 다음계약에서 25%에 반 전세 형태로 변경한다.</li>
              <li>50%에 대한 월세를 받는다.</li>
              <li>월세와 월급의 일부로 대출을 상환?</li>
            </ul>
          </li>
          <li>선택2
            <ul>
              <li>전세는 귀한 매물이라 생각하고 공실 없이 전세를 잘 유지 시킨다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>문제는 실제 최소한의 비용으로 실제 거주지도 괜찮은 곳에서 있고 싶다. 좀더 고민하자..</li>
</ul>

<h4 id="section-2">현장 메모 첨부</h4>
<ul>
  <li><img src="http://dl.dropbox.com/s/v3acnw3etogtaon/201705201617.png" alt="" /></li>
  <li><img src="http://dl.dropbox.com/s/n940oow1doxfnnv/201705201620.png" alt="" /></li>
  <li><img src="http://dl.dropbox.com/s/qkq460mh73vmcfc/201705201618.png" alt="" /></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Rx 사용하면서 추가하거나 공부한 내용</title>
	  <link>//use-rx-android</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-14T00:00:00+00:00</pubDate>
	  <guid>//use-rx-android</guid>
	  <description><![CDATA[
	     <h3 id="rx----">rx 라이브러리를 사용하면서 사용하는 함수들</h3>
<ul>
  <li>간단하게 성남도서관 검색 앱을 개발하면서 사용하는 함수들 입니다.</li>
  <li>rxbiding 사용법</li>
</ul>

<h4 id="section">0. 목적</h4>
<ul>
  <li>클린 + MVP + RX 를 사용하면서 익숙해지기</li>
  <li>뷰에서는 이벤트에 대한 처리와 보여주는것만 처리</li>
  <li>프리젠터에서는 유즈케이스를 이용한 API 접근</li>
  <li>유즈케이스 옵저버를 반환</li>
  <li>이로 인해서 구조가 무너지지 않은걸로 생각함</li>
</ul>

<h4 id="rxbiding">1. rxbiding</h4>
<ul>
  <li>각종 view 들의 이벤트를 옵저버로 형태로 변환하여 편하게 사용 가능함</li>
  <li><a href="https://github.com/JakeWharton/RxBinding">https://github.com/JakeWharton/RxBinding</a>
    <ul>
      <li>안드로이드 UI 위젯 사용을 위한 플랫폼</li>
    </ul>
  </li>
  <li>
    <p>현재 사용을 위하여 추가한  라이브러리</p>

    <div class="highlighter-rouge"><pre class="highlight"><code>compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'
</code></pre>
    </div>
  </li>
  <li>사용은 연속 클릭 방지를 위해서 사용하였습니다. API 호출 까지 한번에 사용하면 좋을거 mvp 를 적용중이라 구조가 무너져서 사용 안하기로함</li>
  <li>연속 클릭 방지를 위한 RxBiding 사용
    <ul>
      <li>뷰의 클릭에 사용할 버튼뷰를 넘기고</li>
      <li>throttleFirst(1, TimeUnit.SECONDS) : (첫번쩨 이벤트를 실행후 1초이내로 들어오는 다른 이벤트는 버린다.)</li>
      <li>
        <p>throttleLast(1, TimeUnit.SECONDS) : 1초 동안 들어오는 이벤트중 마지막 이베트늘 실행</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">RxView</span><span class="o">.</span><span class="na">clicks</span><span class="o">(</span><span class="n">btnUseRxCallBack</span><span class="o">)</span>
    <span class="o">.</span><span class="na">throttleFirst</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
            <span class="n">o</span> <span class="o">-&gt;</span> <span class="n">mPresenter</span><span class="o">.</span><span class="na">clickedSearch</span><span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">()),</span>
            <span class="n">error</span><span class="o">-&gt;</span><span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span><span class="n">error</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="rx-">2. 사용중인 RX 함수</h4>
<ul>
  <li>filter
    <ul>
      <li>
        <p>아래 처럼 문자열이 있을때만 필터링을 추가할 수 있다. true 일때만 다음으로</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">text</span><span class="o">))</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
  <li>map
    <ul>
      <li>
        <p>입력으로 들어 오는 값을 변경 할 수 있다. 다음으로 전달되는 문자열은 간장공장+query</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="s">"간장공장"</span><span class="o">+</span><span class="n">text</span><span class="o">)</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
  <li>zip
    <ul>
      <li>이걸 몰라서 한참 걸렸습니다.</li>
      <li>이름의 느낌 처럼 압축 하는 느낌입니다.</li>
      <li>
        <p>일단 사용 코드 입니다.</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">zip</span><span class="o">(</span>
    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">),</span>
    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">requestPage</span><span class="o">),</span>
    <span class="o">(</span><span class="n">queryText</span><span class="o">,</span><span class="n">requestPageText</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"phkim"</span><span class="o">,</span><span class="s">"query: "</span><span class="o">+</span><span class="n">queryText</span> <span class="o">+</span> <span class="s">"requestPage:"</span><span class="o">+</span><span class="n">requestPageText</span><span class="o">))</span>
</code></pre>
        </div>
      </li>
      <li>문자열 하나씩 입력되면 동식에 사용 가능하도록 변경해 줍니다.</li>
      <li>배열이 들어가서 하나씩 연속으로 사용하는게 아닌 동시에 사용 가능합니다.</li>
    </ul>
  </li>
  <li>flatMap
    <ul>
      <li>결과를 옵저버 형태로 반환합니다.</li>
      <li>다른 옵저버와 합칠때 사용합니다.</li>
      <li>코드를 추가 하기에는 양이 너무 길어 져서</li>
      <li>옵저버 A , 옵저버 B</li>
      <li>실행중인 옵저버 A 스트림에 옵저버 B 를 추가 할 수 있습니다.</li>
      <li>콜백에 콜백을 처리할때 사용하기 좋습니다.</li>
      <li>예를 들어서 소셜 로그인 처리 할때 사용 하면 됩니다.
        <ul>
          <li>페이스북 로그인 -&gt; 콜백으로 결과 -&gt; 사용하는 서버로 결과 전달 -&gt; 페이스북과 사용중인 서버 로그인 완료</li>
          <li>위와 같은 내요을 콜백에서 콜백을 호출하는 형태를 조금이나마 줄일 수 있다</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Daum 이미지 검색을 내가 좋아하는 형태로 변경해 보자</title>
	  <link>//my-clean-mvp</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-07T00:00:00+00:00</pubDate>
	  <guid>//my-clean-mvp</guid>
	  <description><![CDATA[
	     <h3 id="gdg-atsl-on-mvp-">구글 샘플과 GDG-ATSL-ON-MVP를 이용</h3>
<ul>
  <li>2개의 코드 모두 너무 좋지만 앞으로를 위해서 필요한 부분을 변경해 보려고 합니다. 남들이 보면 이상해 보일수도 있겠지만 구조와 라이브러리르 조금 추가 및 변경해서 원하는 형태로 변경합니다.</li>
  <li>원래 코드도 좋지만 이상하게 마음에 안드는 부분을 변경해보려고 합니다.
    <ul>
      <li><a href="https://github.com/ZeroBrain/GDG-ATSL-ON-MVP">https://github.com/ZeroBrain/GDG-ATSL-ON-MVP</a></li>
    </ul>
  </li>
</ul>

<h4 id="section">1. 구글샘플 기반으로 앱을 생성하고 제로브레인님의 다음 이미지 검색기능을 추가 하는 형태로 진행</h4>
<ul>
  <li>기본 샘플 생성</li>
  <li>버터나이프, 데이터바인딩 은 넣으면 코드가 짧아 지지만 사용 안합니다.</li>
  <li>구글 샘플이 좋았던 점은 거의 모든 뷰를 프래그먼트에서 구현 하였던 점입니다.
    <ul>
      <li>프로가드 적용시 액티비티 코드는 거의 원형이 남아 있는데 이를 프래그먼트에서 구현 하니 프로가드 적용이 조금더 강력한 느낌 이었습니다.</li>
    </ul>
  </li>
  <li>구글 샘플에서 기본적으로 필요한 것들을 복사해옴</li>
  <li>rx 를 추가하면 많이 없어질걸로 예상</li>
</ul>

<h4 id="section-1">2. 진행 순서</h4>
<ul>
  <li>샘플앱 기본을 정한다.(나중에 해도 됨)</li>
  <li>MVP 구현은 거의 구글샘플을 기반으로 한다.(프래그먼트)</li>
  <li>클린아키텍처 기반으로 앱의 목적을 정한다.
    <ul>
      <li>이미지 검색 원하는 문구로 이미지를 검색하고 결과를 클릭하면 이미지가 포함된 URL을 브라우저를 통해서 연다.</li>
      <li>엔티티 설정 -&gt;  이미지URL, 이미지 타이틀, 이미지를 포함한 오리지널 URL</li>
    </ul>
  </li>
  <li>UseCase 를 만든다.
    <ul>
      <li>문자열 입력에 따른 결과값 반환 하는 케이스</li>
      <li>대략 =&gt; GetImages(String query)  이런 함수로 예상</li>
    </ul>
  </li>
  <li>UseCase가 가지고올 레포지토리 생성</li>
  <li>원래 구글샘플에 rx 통신 모듈 추가</li>
</ul>

<h4 id="section-2">3. 여러번 반복 하니 편해진다.</h4>
<ul>
  <li>아직 대거를 사용하진 못했지만 기본 싱글톤 인젝션 방식으로 구현되어 있어서 대거를 추가하기 쉬어 보인다.</li>
  <li>기존에는 다음 API 처리문과 use 케이스가 결합되어 있어서 변경 하면 여기 저기 변경이 많이 발생했지만</li>
  <li>지금은 다음에서 네이버로 변경 된다 하더라고 레포지토리만 변경하고 해당 API맞게 받은후 동일한 usecase 를 사용하기에 쉽게 변경 가능하다.</li>
</ul>

<h4 id="mvp--">4. mvp 의 장점</h4>
<ul>
  <li>당연한거지만 다른 레이어와 완전히 분리되어 있어서 로그만 출력하고 추후 개발이 쉽다.</li>
  <li>UI 쪽만 따로 개발 및 테스트가 가능하다.</li>
</ul>

<h4 id="section-3">5. 구글 샘플의 콜백</h4>
<ul>
  <li>use case 콜백은 상당히 유용하다.</li>
  <li>처음에는 사용 안하려고 했지만 기본 언어 이외에 사용하는것도 거의 없다.</li>
  <li>android.os.Handler 만 사용하고 있다.</li>
</ul>

<h4 id="rx--">6. Rx 콜백으로 변경하기</h4>
<ul>
  <li>기존 rx 샘플에 만들어 놓은 apicallback 를 이용해 보겠습니다.
    <ul>
      <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
      <li>폴더이름 Retorfit2T</li>
    </ul>
  </li>
  <li>apicallback 클래스를 복사해서 사용하기</li>
</ul>

<h4 id="section-4">7. 인젝션</h4>
<ul>
  <li>현재 인젝션을 싱글톤으로 주입 하는 방법을 선택했습니다.</li>
  <li>이를 대거를 이용하는 방법은 추후 진행 하겠습니다.</li>
</ul>

<h4 id="section-5">8. 샘플</h4>
<ul>
  <li>입력창에서 문자를 입력하면 핸들러콜백을 이용하는 방식</li>
  <li>버튼을 누르면 rx 를 이요하는 방법 입니다.</li>
  <li>샘플 코드
    <ul>
      <li>MyCleanMvp 폴더입니다.</li>
      <li>프로젝트 그래들에 다음 API 키를 추가해야합니다.</li>
      <li><a href="https://github.com/pyeongho/Sample.git">https://github.com/pyeongho/Sample.git</a></li>
      <li><img src="http://dl.dropbox.com/s/nnzymkk8a9f3vb3/201705090718.png" alt="" /></li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>이미지를 호스팅을 드랍박스로 변경해 보자</title>
	  <link>//github-image-dropbox</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-30T00:00:00+00:00</pubDate>
	  <guid>//github-image-dropbox</guid>
	  <description><![CDATA[
	     <h4 id="section">구글 드라이브는 이상하게 사파리에서 정상 동작을 안한다.</h4>
<ul>
  <li>드랍박스를 이용해서 링크를 가지고 오는 방법을 만들어 보자</li>
</ul>

<h4 id="section-1">1. 드랍박스 업로드가 쉘로 가능한지 찾기</h4>
<ul>
  <li><a href="https://github.com/andreafabrizi/Dropbox-Uploader">https://github.com/andreafabrizi/Dropbox-Uploader</a></li>
  <li>위 경로에서 쉘스크립트를 제공한다.</li>
  <li>업로드 와 공유기능을 제공합니다.</li>
  <li>그래서 기존 구글드라이브와 와 같이 프로그램을 만들어 보자</li>
  <li>구글드라이브 설명
    <ul>
      <li><a href="https://pyeongho.github.io/google-drive-for-image">https://pyeongho.github.io/google-drive-for-image</a></li>
    </ul>
  </li>
</ul>

<h4 id="section-2">2. 수정된 스크립트만 올리겠습니다.</h4>
<ul>
  <li>인자를 받아서 수정하는 부분을 갭쳐실행 -&gt; 업로드 -&gt; 공유 -&gt; 링크 복사</li>
  <li>
    <p>인자받는 부분을 모두 지우고 아래 내용을 추가 했습니다.<br />
<script src="https://gist.github.com/pyeongho/70aa0ea2f17452d3fefbce17ed7b9e10.js"></script></p>
  </li>
  <li>그리고 db_share 함수와 get_Share 함수에 내용을 추가 했습니다.<br />
<script src="https://gist.github.com/pyeongho/d1b3e874b5dd47b6721b16f6f49e5b43.js"></script></li>
</ul>

<h4 id="section-3">3. 드랍박스 이미지는 사파리에서 잘 나왔으면 좋겠습니다.</h4>
<p><img src="http://dl.dropbox.com/s/s5slt9ilsflggrv/201704301038.png" alt="드랍박스공유테스트" /></p>

	  ]]></description>
	</item>

	<item>
	  <title>Github Page 스태틱으로 변경하기</title>
	  <link>//github-static</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-29T20:00:00+00:00</pubDate>
	  <guid>//github-static</guid>
	  <description><![CDATA[
	     <h4 id="section">테마를 변경하면서 스택으로 변경하기로 결정</h4>
<ul>
  <li>테마변경을 적용중 원하는 카테고리 동작이 안되어서 찾아보니 특정 폴더를 추가해야 하는걸 알았습니다. 그래서 이것 저것 찾다가 결국은 스태틱 사이트로 변경 하기로 결정</li>
  <li>목표 설정
    <ul>
      <li>저장소 위치를 비트버켓으로 이동한다.</li>
      <li>지킬로 빌드후 결과물을 pyeongho.github.io 로 올린다.</li>
    </ul>
  </li>
</ul>

<h4 id="section-1">1. 우선 저장소 옮기는 건 쉬움</h4>
<ul>
  <li>git remote add 태그 [저장소 위치]</li>
  <li>추가된 저장소로 푸시</li>
</ul>

<h4 id="section-2">2. 지킬 컴파일 환경 구성</h4>
<ul>
  <li>테마 변경중이라 글을 못섰지만</li>
  <li>sudo jekyll serve 를 하기위해서 이거저것 해서 성공</li>
</ul>

<h4 id="section-3">3. 기존 파일을 모두삭제</h4>
<ul>
  <li>스태틱 파일이 정상적으로 생기는걸 확인하고 해당 파일로 전체 파일 변경</li>
  <li>모두 정상 동작</li>
</ul>

<h4 id="section-4">4. 지금 쓰는건 테스트 하기위함</h4>
<ul>
  <li>수동으로 비트버켓에 푸시</li>
  <li>jekyll build</li>
  <li>결과물을 pyeongho.github.io 로 푸시</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>비트버켓에서 파이프라인을 이용한 자동 배포</title>
	  <link>//bitbucket-deploy</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-29T12:00:00+00:00</pubDate>
	  <guid>//bitbucket-deploy</guid>
	  <description><![CDATA[
	     <h4 id="section">자동배포시스템 적용하기</h4>
<ul>
  <li>github 를 이용할때는 travis 를 이용하려 햐였지만 비트버켓으로 이동하면서 최종적으로 비트버켓 내의 시스템을 이용함</li>
</ul>

<h4 id="section-1">1. 스태틱으로 변경 후 배포 방법 개선이 필요 하다고 생각</h4>
<ul>
  <li>블로그 업데이트 순서
    <ul>
      <li>비트버켓에서 클론</li>
      <li>글 작성</li>
      <li>비트버켓에 오리지널 마크다운 푸시</li>
      <li>로컬에서 지킬 빌드 후 결과를 깃허브에 푸시</li>
    </ul>
  </li>
  <li>위 같은 순서를 하려고 하니 너무 끔직함</li>
  <li>스크립트를 작성해서 하려 했지만 마크다운 툴을 비주얼스튜디오 코드를 사용하다 보니 스크립트 명령을 부를수가 없다.</li>
  <li>명령창을 열어서 스크립트 실행? 이것도 귀찮다.</li>
  <li>만약 로컬에서 지킬 빌드가 안되면 어떻게? 저거 하려면 몇 단계를 거쳐야 하는거야.. 나름 코딩하는 사람인데</li>
</ul>

<h4 id="section-2">2. 트래비스 삽질</h4>
<ul>
  <li>jekyll/jasper 테마가 트래비스 연동을 추천해서 해당 방법을 계속 찾음</li>
  <li>깃허브에서도 실패한 트래비스</li>
  <li>비트버켓에서 트래비스 가능 할거라 생각하고 찾아지만 한글이나 영어 둘다 자료가 너무 없음</li>
  <li>검색을 조금 바꿔보니 비트버켓은 자체 ci 를 제공하는걸로 보임</li>
  <li>파이프라인 이라는 용어찾음</li>
</ul>

<h4 id="section-3">3 비트버켓 파이프라인 적응기</h4>
<ul>
  <li>비트버켓 저장소의 설정을 확인하면 pipeline 설정 항목이 보인다.</li>
  <li>항목을 설정하면 파이프라인 설정 파일을 만들수있다.</li>
  <li>지킬을 루비라는것만 알아서 ..</li>
  <li>다시 검색을 시작</li>
  <li><a href="https://blog.nathanaelcherrier.com/2017/02/01/utiliser-jekyll-avec-bitbucket-pages/">https://blog.nathanaelcherrier.com/2017/02/01/utiliser-jekyll-avec-bitbucket-pages/</a></li>
  <li>위 링크에서 어떻게 해야 할지를 발견함</li>
  <li>내가 생각했던 순서를 정확하게 똑같이 하려는 분을 만남. 감사합니다.</li>
</ul>

<h4 id="section-4">4. 자동 배포 시스템</h4>
<ul>
  <li>파이프라인 얌 파일 설정</li>
  <li>
    <script src="https://gist.github.com/pyeongho/fe5b671a55f6c18d6f6f918af27cfbe7.js"></script>
  </li>
  <li>번들 빌드 하기위해서는 Gemfile Gemfile.lock 파일 필요합니다.(재스퍼 테마에서 파일 참고)</li>
  <li>위 내용중 SITE_A 는 비트버켓 설정에 가능합니다. 공개된곳에 암호를 입력할수 없기에 설정에서 환경 변수 등록이 가능합니다.
    <ul>
      <li>setting -&gt; Environment variables -&gt; 문자열 등록</li>
    </ul>
  </li>
  <li>처음에는 토큰을 트래비스가 했던 토큰 방법을 찾아 보았는데 계속 실패하고 설마 했는데 사이트에 환경변수 입력하는 곳 있어서 github push 조건을 만들었습니다.</li>
  <li>그래서 테스트 푸시를 했지만 컴파일 에러 에러 에러 ..</li>
  <li>처음에는 루비 버전 문제라 생각 하고 재스퍼의 트래비스와 동일한 버전으로 변경했지만 실패..</li>
  <li>에러 메시지를 자세히 읽어보니 json 1.8.3 라고 나와 있지만 정확히 안알려줌</li>
  <li>에러 메시지로 구글링 하니 동일한 증상에 대한 해결책이 있음</li>
  <li><a href="https://github.com/flori/json/issues/303">https://github.com/flori/json/issues/303</a></li>
  <li>여기에 보면 ruby 2.4 에서는 1.8.3 버전이 동작 안한다고 함</li>
  <li>그래서 Gemfile.lock 파일에서 json 1.8.3 을 2.0.2 로 변경 지킬 컴파일 완료</li>
  <li>자동 배포 완료</li>
  <li>비트버켓 파이프라인에서 진행상황 또는 결과들을 볼 수있습니다.</li>
  <li><img src="http://drive.google.com/uc?export=view&amp;id=0BwUadct9RzY3REF4SGtfZEhpWVU" alt="결과" /></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>미라클 모닝,당신의 하루를 바꾸는 기적</title>
	  <link>//navi_morning</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//navi_morning</guid>
	  <description><![CDATA[
	     <h4 id="section">본것 깨달은것 적용할것</h4>

<h4 id="section-1">1. 내꺼</h4>
<ul>
  <li>미라클 모닝
    <ul>
      <li>명상: 앉아서, 고요히, 평화롭게, 천천히, 깊히 호흡 하면서</li>
      <li>확신의 말:  나의 무한한 가능성과 우선 과제들을 상기시켜주는 다짐과 확신의 말을 큰소리로 읽기</li>
      <li>비전보드 : 눈을 감아 상상하거나, 비전보드를 보며 실제 처럼 생생하게 성과를 그려 본다.</li>
      <li>쓰기 : 감사함을 느끼는 대상, 자랑스러운 기억, 노력해서 얻어낸 결과를 일기장에 적는다.</li>
      <li>읽기 : 자기계발서를 읽는다.</li>
      <li>운동 : 일어서서 몸을 움직인다.</li>
    </ul>
  </li>
  <li>36: 성공과 정도가 자기계발의 정도를 넘어서는 경우는 드물다. “ 성공과 일치되는 노력”</li>
  <li>60: 평범
    <ul>
      <li>룸미러 증후군 : 자신은 안된다. 한계를 설정해서 자신을 미리 규정한다.</li>
      <li>목표의식 결여
        <ul>
          <li>목표의식 만들기 :사소하고 간단한 목표, 언제나 바꿔도 되는 목표, 목표에 맞춰 살자</li>
        </ul>
      </li>
      <li>사건의 분리: 약속깨는것 정도는 괜찬다.</li>
      <li>책임감 부족</li>
      <li>평범한 영향력 집단에 있기, 밝은사람 주변에는 밝은 사람만</li>
      <li>낮은 자기계발 정도</li>
      <li>절박함의 부족</li>
    </ul>
  </li>
  <li>“목표는 결정 하는것이다”</li>
  <li>85: 아침 일찍 일어나기 위해서는 휴가 첫날의 설렘을 가져보자</li>
  <li>121: 목표는 구체적으로
    <ul>
      <li>‘나는 일주일에 5일 헬스클럼에 갈것이다. 최소 20분간 러닝머신을 뛸 것이다. 20분동안 온전히 뜀박질에 집중 할 것이다’</li>
      <li>빈도, 양, 정확한 시간으로 목표를 정한다.</li>
    </ul>
  </li>
  <li>126: 꿈을 시각화 해보자
    <ul>
      <li>예) 난 어디에 취직해서 어떤 개발자가 되어서 어떤 코딩을 할것이다.</li>
    </ul>
  </li>
  <li>147:  생각을 손으로 정리하면 조금더 명확해 진다.</li>
  <li>158: 침묵(명상)5분 -&gt; 확신의말 5분 -&gt; 시각화 5분 -&gt; 운동 20분 -&gt; 독서 20분 -&gt; 일기쓰기 5분</li>
</ul>

<h4 id="section-2">2. 타인의 생각</h4>
<ul>
  <li>A : ‘오늘을 마지노선으로 그어라’ 에 대한 의문점이 많다.</li>
  <li>B
    <ul>
      <li>교육의 질이 교사를 넘어서기 힘들다.</li>
      <li>8번 노출의 힘</li>
      <li>아프리카에 우물 파기, 하루 4시간씩 물을 구하러 이동하지만 우물을 파기위한 시간이 없다. 우선순위를 정하자</li>
      <li>우리가 가진 빛은 다른 사람에게 전파 된다.</li>
    </ul>
  </li>
  <li>C : 나를 사랑 하자, 나를 비난하지 말자</li>
  <li>D
    <ul>
      <li>평범함에 안주 하지 않겠다.</li>
      <li>확신을 무한히 외친다.</li>
      <li>숨쉬는걸 느껴 보자</li>
    </ul>
  </li>
  <li>E : 다른사람에게 좋은 인상을 주려고 노력하지 말고 자신을 보여주자, (목표설정), (멘토), (동료), (의지)</li>
  <li>F : 마음만 먹고 행동하지 않는건 기록하지 않아서 이다.</li>
  <li>G : 환경 &lt;- 행동 &lt;- 능력 &lt;- 믿음 &lt;- 정체성
    <ul>
      <li>금수저 흙수저는 행동으로 해결한다.</li>
      <li>습관이 중요하다.</li>
    </ul>
  </li>
</ul>

<h4 id="section-3">3. 책 추천</h4>
<ul>
  <li>‘새벽나라에 사는 거인’</li>
  <li>‘내 영혼을 담은 인생의 사계절: 짐론’</li>
</ul>

<h4 id="section-4">다시 한번</h4>
<ul>
  <li>목표는 결정 하는것이다.</li>
  <li>8번 노출의 힘</li>
  <li>자신의 목표 꿈을 무한 반복하자</li>
</ul>

<h4 id="section-5">현장 메모 첨부</h4>
<ul>
  <li><img src="http://drive.google.com/uc?export=view&amp;id=0BwUadct9RzY3TUxaNGV6LU15M1U" alt="" /></li>
  <li><img src="http://drive.google.com/uc?export=view&amp;id=0BwUadct9RzY3Uy1JSEV0TnNxVXc" alt="" /></li>
  <li><img src="http://drive.google.com/uc?export=view&amp;id=0BwUadct9RzY3YjBtaGRGcnBWTzg" alt="" /></li>
  <li><img src="http://drive.google.com/uc?export=view&amp;id=0BwUadct9RzY3UzdkaDQtbmtMRG8" alt="" /></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>구글에서 만든 클린 아키텍처를 이해하고 알아보자</title>
	  <link>//google-todo-clean</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//google-todo-clean</guid>
	  <description><![CDATA[
	     <h3 id="section">구글 클린 아키텍처</h3>
<ul>
  <li>mvp 패턴만 적용 하더라도 구조가 이상해 보인다. 어떻게 하면 좀더 좋은 구조를 만들 수 있을까를 고민하던 중 클린아키텍처가 있었고 그중 구글이 만들 샘플 코드가 기본 라이브러리로만 만들어져서 마음에 들어서 분석하기 시작함</li>
</ul>

<h4 id="section-1">1. 구글 샘플 분석 하기</h4>
<ul>
  <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></li>
  <li>패키지 구분을 어떻게 했는지 직관적인 확인이 어렵다.(아직 적응 못함)</li>
  <li>한눈에 Uncle Bob clean architecture 레이어 확인 가능 할 줄 알았다.</li>
  <li>처음 보이는건 테스트 유닛만 보인다.</li>
  <li>그래도 구글이니 잘 만들었을거라 예상하고 다시 확인 시작</li>
  <li>참고로 구글 프로젝트라서 그런지 구아바를 사용 중
    <ul>
      <li><a href="https://github.com/google/guava">https://github.com/google/guava</a></li>
      <li>구글의 자바 라이브러리라고 생각하면 좋음</li>
      <li><a href="https://blog.outsider.ne.kr/710">구아바를 사용해야 하는 5가지 이유</a></li>
      <li><a href="http://heowc.tistory.com/61">구아바 맛보기</a></li>
    </ul>
  </li>
  <li>todo 앱 으로 할일을 만들고 체크해서 할일 완료 할일을 확인하는 앱이다.</li>
  <li>가장 기본이 되는 엔티티 레이어를 찾아보자</li>
  <li>패키지 이름에 없어서 구조를 확인해서</li>
  <li>아래와 같은 구조로 설계되어 있다</li>
  <li>패키지 이름에서 데이터 소스코드가 보임</li>
  <li>com.example.android.architecture.blueprints.todoapp.data.source</li>
  <li>감사하게 아래처럼 패키지 이름이 정의 되어 있습니다.</li>
  <li>설계와 동일하게 로컬과 리모트 패키지도 보이고</li>
  <li>엔티티 개념을 보이는 내용이 없다.</li>
  <li>클린아키텍처를 이해하기로 앱을 본질은 투두를 만들려고 했으니 기본적인 할일의 제목 할일의 설명 했다, 안했다. 에 대한 클래스가 있을거라 예상 했지만 해당 패키지에는 없다.</li>
  <li>위 데이터레이어 패키지를 확인해보니 Task 라는 클래스가 보인다.</li>
  <li>패키지는 com.example.android.architecture.blueprints.todoapp.tasks.domain.model;</li>
  <li>글을 좀더 자세히 읽어보니 MVP 모델의 중간에 도메인 레이어를 추가한 개념을 사용한걸로 보인다.
    <ul>
      <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a> 설명에 나와 있는데 안읽고 이제 서야 읽어봄</li>
      <li>위 샘플을 기반을 클린 아키텍처를 구현함</li>
      <li>Google todo mvp 를 살짝 보고 돌아옴</li>
    </ul>
  </li>
  <li>MVP 기반의 코드와 다른 점은 중간에 도메인 레이어를 추가 한 점입니다.</li>
  <li>데이터 &lt;- 도메인 &lt;- 프리젠터 레이어로 구성되어 있습니다.</li>
  <li>TasksDataSource(데이터레이어) &lt;- usecase(도메인레이어) &lt;- 프리젠테이션레이어(사용자)</li>
  <li>처음에는 별로 마음에 안들었지만 보다 보면 볼수록 마음에 듬</li>
  <li>정리중</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>크롬 40+ 버전에서 의 앱 실행 문제</title>
	  <link>//chrome-40</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//chrome-40</guid>
	  <description><![CDATA[
	     <h3 id="section">크롬에서 사용자 제스처 없이 앱 실행은 안됩니다.</h3>
<ul>
  <li>탐색할수없음</li>
</ul>

<h4 id="javascript--body-onload-----">1. javascript 의 body onload 에 마켓 이동하는 코드를 추가</h4>
<ul>
  <li>아래와 같이 간단하게 추가 했는데 마켓으로 이동 안하는 기기들이 있음<br />
  <script src="https://gist.github.com/pyeongho/b26f2f488f00f487a19ab823bbbca27a.js"></script></li>
  <li>크롬 인스펙트를 이용해서 콘솔로그를 확인하니 “탐색할수없음” 이라는 문구가 나옴</li>
</ul>

<h4 id="section-1">2. 구글 검색 시작</h4>
<ul>
  <li>이것 저것 검색 하다 보니 chrome 40+ 이상에서는 동작 안하는다는 내용 확인</li>
  <li>
    <p><a href="https://devtalk.kakao.com/t/onload/15293/2">https://devtalk.kakao.com/t/onload/15293/2</a></p>
  </li>
  <li>그래서 조금더 검색</li>
  <li><a href="http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/">http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/</a></li>
  <li>에서 내용을 잘 정리해줌</li>
</ul>

<h4 id="section-2">3. 내용 요약</h4>
<ul>
  <li>구글엔지니어가 판도라 앱을 설치</li>
  <li>주소창에 pandora.com 을 크롬에서 입력</li>
  <li>웹사이트로 이동되지 않고 판도앱이 실행됨</li>
  <li>버그로 접수</li>
  <li>수정해 버림</li>
</ul>

<h4 id="section-3">4. 구글의 답변</h4>
<ul>
  <li>
    <p>원문 : From the omnibox, no, there is no plans to allow external redirects.  If typing in the omnibox, the user is showing a strong intent to stay within chrome, so we made the decision to not allow external redirects (too many of them led to what we believed to be bad user experiences).<br />
Clicking on a link should still behave as before and redirect to market:// links. As it stands, how can I programmatically redirect a user to the play store?<br />
There is no plans to support a redirect without a user gesture.</p>
  </li>
  <li>
    <p>번역기 : 검색 주소창에서 외부로 리디렉션을 허용 할 계획이 없습니다. 검색 주소창에 검색어를 입력하면 사용자는 크롬 내에 머물러야한다는 강한 의지를 나타내고 있으므로 외부 리디렉션을 허용하지 않기로 결정했습니다. 너무 많은 사용자가 사용자 경험이 좋지 않다고 생각하는 것으로 이끌었습니다. <br />
링크를 클릭하면 이전과 같이 작동하고 market : // 링크로 리디렉션되어야합니다. 그대로, 어떻게 프로그래밍 방식으로 사용자를 플레이 스토어 로 리디렉션 할 수 있습니까? <br />
사용자 gestur e 없이 리디렉션을 지원할 계획은 없습니다 .</p>
  </li>
</ul>

<h4 id="section-4">5. 수정 사용자 제스처로 이동하게 하면 됩니다.</h4>
<ul>
  <li>사용자 액션안에서 처리하면 됩니다. 아래는 컨펌창으로 한 예제 입니다.</li>
  <li>사용자 액션만 추가 하면 됩니다.<br />
  <script src="https://gist.github.com/pyeongho/af47412cd50a3579484f0d3db285cd73.js"></script></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
