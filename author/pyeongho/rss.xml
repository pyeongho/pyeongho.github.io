<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>깃허브 액션 에러 사건 일지</title>
	  <link>//github_actions</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-09-13T00:00:00+00:00</pubDate>
	  <guid>//github_actions</guid>
	  <description><![CDATA[
	     <h3>깃허브 액션이 빌드 에러 발생</h3>

<ul>
<li>라이브러리 다운로드 받지 못하고 에러가 발생하면서 에러</li>
<li><p>로걸에서 캐시 클리어 이후로 빌드 실패</p>
<div class="highlight"><pre><code class="language-" data-lang=""> ./gradlew build --refresh-dependencies --stacktrace
</code></pre></div></li>
<li><p>터미널에서 --refresh-dependencies 를 추가후 빌드하면 라이브러리를 다운로드 받아서 진행</p></li>
<li><p>/Users/사용자$/Users/.gradle/caches/버전/ 폴더를 삭제 해도 됩니다.</p></li>
<li><p>결국 로컬에서도 에러가 발생한다.</p></li>
<li><p>특정 라이브러리 에러가 발생해서 해당 라이브러리르 패키지로 바꾸면 다른 라이브러리들이 에러를 막 발생 대충 아래와 같은 문구가 포함 되어 있습니다.</p>
<div class="highlight"><pre><code class="language-" data-lang="">org.gradle.api.artifacts.ResolveException: Could not resolve all dependencies for
</code></pre></div></li>
<li><p>이후 해당 에러로 검색 하기 시작
-루트의 그래들을 수정 했습니다.</p></li>
<li><p>allprojects -&gt; repositories 위치의 내용을 확인 했습니다.</p></li>
<li><p>순서를 변경 했습니다.</p></li>
<li><p>mavenCentral , maven, google, jcenter</p></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  // 변경 전
  repositories {
          maven { url 'https://maven.google.com' }
          maven { url 'https://jitpack.io' }
          maven { url 'https://jcenter.bintray.com' }
          maven { url 'https://naver.jfrog.io/artifactory/maven/' }
          jcenter()
          flatDir { dirs 'libs' }
          google()
          mavenCentral()
      }

 // 변경 후
  repositories {
          mavenCentral()
          maven { url 'https://maven.google.com' }
          maven { url 'https://jitpack.io' }
          maven { url 'https://jcenter.bintray.com' }
          maven { url 'https://naver.jfrog.io/artifactory/maven/' }
          google()
          jcenter()
          flatDir { dirs 'libs' }
      }
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>TextView 에 setTextAppearance 모든 속성은 동작하지 않는다. 주의해야 한다.</title>
	  <link>//textview_setTextAppearance</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-07-30T00:00:00+00:00</pubDate>
	  <guid>//textview_setTextAppearance</guid>
	  <description><![CDATA[
	     <h3>TextView setTextAppearance 동작 확인하기</h3>

<ul>
<li>lineSpacingMultiplier 이 동작하지 않아서 확인 작업을 했습니다.</li>
<li>setTextAppearance 를 이용해서 TextView 의 스타일을 적용할때 몇몇 속성이 동작 안하는 걸 확인 할 수 있다.</li>
<li><p>setTextAppearance 를 따라가다 보면 모든 속성이없다.</p>

<ul>
<li>TextView 의 코드의 setTextAppearance 따라가다 보면 아래와 같은 함수를 만나는데 setTextAppearance 관련 내용이 없다.</li>
<li><script src="https://gist.github.com/pyeongho/fe4db5c76404c43877424ce99132e6ff.js"></script></li>
</ul></li>
<li><p>아래는 동작 가능한 속성들을 정리해 보았습니다.
<script src="https://gist.github.com/pyeongho/b369691948ee30c4918d175b6212fe11.js"></script></p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>TextView 에 LeadingMarginSpan 들여쓰기 및 이미지 배치</title>
	  <link>//textview_leadingmargin</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-07-19T00:00:00+00:00</pubDate>
	  <guid>//textview_leadingmargin</guid>
	  <description><![CDATA[
	     <h3>TextView 에 문단 들여 쓰기 및 이미지 배치 관련 디자인이 들어 올수 있습니다.</h3>

<ul>
<li><img src="http://drive.google.com/uc?export=view&amp;id=1yH8gvaJWOt0bEzz98YpMnj6YWl1GPdWz" alt=""></li>
<li>간단 합니다. LeadingMarginSpan 만 기억하고 있으면 적용하기 쉽습니다.</li>
<li><p>들여쓰기 기능이라서 아래 처럼 사용 하면 됩니다.
<script src="https://gist.github.com/pyeongho/2b2e21f254b5fd173f456afced74218d.js"></script></p></li>
<li><p>first = 200 =&gt; 들여쓰기 픽셀</p></li>
<li><p>rest = 1 =&gt; 단락의 나머지줄 들여쓰기 (the indent for the remaining lines of the paragraph)</p></li>
<li><p>start = 0, end =  1, flags = 0 =&gt; span 의 인자값</p></li>
<li><p>end =  1 이 왜 1인지 궁금해 할수 있습니다. 이는 디자인상 요청 사항으로 두번째 문단은 들여쓰기가 안되어야 해서 입니다.</p></li>
<li><p>일반적인 들여쓰기에서는 길이를 넣으면 됩니다.</p></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://developer.android.com/reference/android/text/style/LeadingMarginSpan">https://developer.android.com/reference/android/text/style/LeadingMarginSpan</a></li>
<li><a href="https://developer.android.com/reference/android/text/style/LeadingMarginSpan.Standard">https://developer.android.com/reference/android/text/style/LeadingMarginSpan.Standard</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>웹뷰 사용시 비동기 주의 사항(뷰바인딩 사용)</title>
	  <link>//webview_async</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-07-05T00:00:00+00:00</pubDate>
	  <guid>//webview_async</guid>
	  <description><![CDATA[
	     <h3>웹뷰 사용시 비동기 처리를 주의 해야 합니다.</h3>

<ul>
<li>웹뷰는 제어 함수들은 콜백 형태로 함수를 제공해 주고 있습니다.</li>
<li>크롬 클라이언트나 , 웹뷰클라이언트의 함수를 오버라이딩 해서 많이 사용 할 것입니다.</li>
<li>예를 들어서 페이지 로딩이 완료된 이후 동작을 처리하기 위해서 웹뷰 클라이언트의 onPageFinished 사용을 가정 합니다.</li>
<li>onPageFinished 함수에 화면 UI 제어 함수를 추가 합니다. (onPageFinished -&gt; binding.loading.isVisible = false)</li>
<li>binding 은 뷰바인딩 입니다. 구글원하는 대로 아래 처럼 사용하면 에러가 발생 합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  private var _binding: xxxxxxxxxBinding? = null
  val binding get() = _binding!!

  override fun onDestroyView() {
          super.onDestroyView()
          _binding = null
      }
</code></pre></div>
<ul>
<li>위와 같이 사용시 크래시는 항상 재현 시킬 수 있습니다.</li>
<li>해당 웹뷰 접근 -&gt; 페이지 완료 전에 해당 화면 종료 -&gt; 약간 기다림(페이지 완료 될때 까지) -&gt; 크래시</li>
<li>매우 당연한 결과 입니다. 해당 화면이 이미 종료 되어  onDestroyView 가 실행 되었고 이후에 onPageFinished 가 실행 되었습니다.</li>
<li>그래서 binding.loading.isVisible = false 를 실행 하려면 크래시가 발생 되기 때문입니다.</li>
</ul>

<h3>웹뷰 콜백을 받아서 처리 할 때는 웹뷰 처리를 신경써서 해야 합니다.</h3>

<ul>
<li>화면이 종료 될때 웹뷰도 같이 종료 시키던지(onDestroyView 에서 binding.webview.destroy())</li>
<li>화면종료 후에 UI 처리 할때 예외를 추가(try catch )</li>
<li>꼭 신경 써야 합니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 빌드 실패 with github actions</title>
	  <link>//gradle_action</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-06-30T00:00:00+00:00</pubDate>
	  <guid>//gradle_action</guid>
	  <description><![CDATA[
	     <h3>깃허브 액션을 CI/CD 를 사용하던 중 랜덤으로 빌드 실패가 발생</h3>

<ul>
<li>깃허브 액션 + 패스트레인 을 이용해서 자동화 빌드를 사용하고 있습니다.</li>
<li>처음에는 별다른 이슈 없이 잘 사용 하고 있었습니다. 최근 한달전 정도 부터 빌드 실패가 발생하기 시작 했습니다.</li>
<li>정말 빌드 실패가 아닌 재시도 하면 성공 하는 이상한일이 발생하기 시작 했습니다.</li>
<li>빌드 로그를 보아도 딱히 이유를 알수가 없었습니다.</li>
<li>gradle 빌드에 로그를 추가해서(stacktrace , debug) 확인을 했습니다. 아래와 같은 로그만 남아 있었습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  org.gradle.launcher.daemon.client.DaemonDisappearedException: Gradle build daemon disappeared unexpectedly (it may have been killed or may have crashed)
</code></pre></div>
<ul>
<li>데몬이 없어 졌다고 해서 그래들옵션에 no-daemon 을 추가해 보았지만 그래도 에러는 지속 되었습니다.</li>
<li>(https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners)[https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners]</li>
<li>깃허브 액션에 대해서 조금만 더 알아보기로 하였습니다.</li>
<li>일단 깃허브 액션의 머신 스펙을 확인 하였습니다. 그런데 스펙에 보이는 마음에 들지 않는 숫자 메모리 7기가</li>
<li><p>설마 설마 그래들 속성을 확인 했습니다. 역시나 아래 처럼 최대 메모리가 8기가로 설정 되어 있었습니다.
<code>
org.gradle.jvmargs=-Xms4096m -Xmx8192m -XX:MaxPermSize=1024m
</code></p></li>
<li><p>여러분도 원인 모를 actions 의 빌드 실패가 발생하면 메모리를 확인해 보세요</p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>RN 헬로우 월드</title>
	  <link>//rn_beginner</link>
	  <author>PyeongHo</author>
	  <pubDate>2021-02-17T00:00:00+00:00</pubDate>
	  <guid>//rn_beginner</guid>
	  <description><![CDATA[
	     <h3>RN 을 시작해 보자</h3>

<ul>
<li><p>필요 패키지 설치
~~~
brew install watchman
brew install flow
brew install nvm
nvm install node
nvm alias default node
brew install caskroom/cask/brew-cask
brew cask install virtualbox
brew install yarn
~~~</p>

<ul>
<li>React/RCTBridgeDelegate.h&#39; file not found

<ul>
<li>cd /ios</li>
<li>pod install</li>
<li>cd ..</li>
<li>react-native run-ios</li>
</ul></li>
<li>&#39;React&#39; requires CocoaPods version &gt;= 1.10.1, which is not satisfied by your current version, 1.10.0. #153

<ul>
<li>sudo gem install cocoapods</li>
</ul></li>
<li> &#39;No bundle URL present&#39; in react-native?

<ul>
<li>react-native start</li>
</ul></li>
<li>서버가 동작 하고 그게 에뮬레이터에서 돌아간다.</li>
<li>역시나 제일 중요한건 아래와 같은 사이트가 아닌 메인 사이트 였습니다.</li>
<li>https://reactnative.dev/docs/environment-setup</li>
</ul></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://academy.realm.io/kr/posts/react-native/">https://academy.realm.io/kr/posts/react-native/</a></li>
<li><a href="https://velog.io/@dody_/RN-%EC%97%90%EB%9F%AC%EB%85%B8%ED%8A%B8-main.jsbundle-does-not-exist-">https://velog.io/@dody_/RN-%EC%97%90%EB%9F%AC%EB%85%B8%ED%8A%B8-main.jsbundle-does-not-exist-</a></li>
<li><a href="https://alpoxdev.tistory.com/18">https://alpoxdev.tistory.com/18</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>헤로쿠 기본 설정</title>
	  <link>//heroku</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-11-27T00:00:00+00:00</pubDate>
	  <guid>//heroku</guid>
	  <description><![CDATA[
	     <h3>헤로쿠 기본 공부</h3>

<ul>
<li>헤로쿠 가입후</li>
<li>앱 생성 : 앱이름은 :  &quot;random-bot-17&quot;</li>
<li><p>cli 설치
~~~
brew tap heroku/brew &amp;&amp; brew install heroku
~~~</p></li>
<li><p>heroku login 실행</p></li>
<li><p>브라우저 로그인 실패(ip 다름)</p></li>
<li><p>heroku login --interactive 을 이용해서 터미널 로그인(이메일, 비밀번호 로그인 완료)</p></li>
<li><p>https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up</p>

<ul>
<li>node --version  설치확인</li>
<li>npm --version 설치확인</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 리뷰 요청하기</title>
	  <link>//review</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-23T00:00:00+00:00</pubDate>
	  <guid>//review</guid>
	  <description><![CDATA[
	     <h3>안드로이드도 리뷰를 요청 할 수 있습니다.</h3>

<ul>
<li><a href="https://developer.android.com/guide/playcore/in-app-review">https://developer.android.com/guide/playcore/in-app-review</a></li>
</ul>

<h3>사용법</h3>

<ul>
<li>참고 문서에도 있지만 천천히 따라하기</li>
<li>의존성 주입 :  implementation &#39;com.google.android.play:core-ktx:1.8.1&#39;</li>
<li><p>추가 코드 : 결과 처리 예외 처리 역시 가능함</p>

<ul>
<li></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    val manager = ReviewManagerFactory.create(context)
    val request = manager.requestReviewFlow()
    request.addOnCompleteListener { request -&gt;
        if (request.isSuccessful) {
            // We got the ReviewInfo object
            val reviewInfo = request.result
        } else {
            // There was some problem, continue regardless of the result.
        }
    }  
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>github action 사용하기</title>
	  <link>//action</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-22T00:00:00+00:00</pubDate>
	  <guid>//action</guid>
	  <description><![CDATA[
	     <h3>Github action 을 이용한 CI/CD</h3>

<ul>
<li>기본적인 액션 사용법은 너무 간단합니다.

<ul>
<li>깃허브에서 액션 누르고 새로 만들기 누르고 안드로이드 선택 하면 기본적인 생성은 가능합니다.</li>
</ul></li>
<li><p>원하는 방법이 모두 다를수 있지만 간단하게 작성해 보았습니다.</p>

<ul>
<li>특정 태그가 푸시 되면 빌드를 시작 한다.</li>
<li>원하는 flavor 로 빌드 한다.</li>
<li>태그 이름으로 바이너리를 생성한다.</li>
<li>바이너리를 아티팩트로 만들어서 업로드 한다.</li>
<li>슬랙으로 공유한다.</li>
<li>아티팩트 주소가 아닌 슬랙 액션 주소를 공유해서 찾아서 다운 받아야 하지만 빌드 상태를 알수 있어서 그냥 유지 하였습니다.</li>
</ul></li>
<li><p>참고 내용</p>

<ul>
<li><p>태그 필터 아래 내용이 DEV 로 시작하는 태그를 감지하여 빌드를 시작하는 코드</p>
<div class="highlight"><pre><code class="language-" data-lang="">on:
push:
tags:
  - DEV*
</code></pre></div></li>
<li><p>flavor 로 빌드 하기</p>

<ul>
<li>run: bash ./gradlew assembleDevDebug</li>
<li>bash 퍼미션 오류 수정</li>
<li>assembleDevDebug 원하는 flavor 로 apk 생성</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">- uses: actions/checkout@v2
- name: set up JDK 1.8
uses: actions/setup-java@v1
with:
  java-version: 1.8
- name: Build with Gradle
run: bash ./gradlew assembleDevDebug
</code></pre></div></li>
<li><p>태그 이름 환경 변수 설정 및 사용</p>
<div class="highlight"><pre><code class="language-" data-lang="">- name: Set tag name env
  run: echo ::set-env name=DEVELOP_VERSION::${GITHUB_REF#refs/*/}
- name: check tag name
  run: |
    echo $DEVELOP_VERSION
    echo $  
</code></pre></div></li>
<li><p>파일 이름 변경, 아티팩트 업로드(라이브러리 사용), 자신의 경로에 맞게 수정해야 합니다.</p></li>
<li><p>슬랙 알림 라이브러리</p>

<ul>
<li><a href="https://github.com/marketplace/actions/slack-notify">https://github.com/marketplace/actions/slack-notify</a></li>
</ul></li>
</ul></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/72c897d81aeb4b9e03404d0289a31fa0.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 fastlane 빌드</title>
	  <link>//fastlane</link>
	  <author>PyeongHo</author>
	  <pubDate>2020-09-10T00:00:00+00:00</pubDate>
	  <guid>//fastlane</guid>
	  <description><![CDATA[
	     <h3>azure, fastlane</h3>

<ul>
<li><p>azure</p>

<ul>
<li>회원가입</li>
<li>파이프라인 생성</li>
<li>깃허브 연결</li>
<li>yml 파일 생성(자동생성 사용)</li>
<li>필요에 따라 내용 추가</li>
</ul></li>
<li><p>fastlane</p>

<ul>
<li>안드로이드 앱 루트 폴더로 이동</li>
<li>fastlane init 실행

<ul>
<li>json 파일은 플레이콘솔 액세스 용으로 콘솔에서 생성 가능</li>
</ul></li>
</ul></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://dev-yakuza.github.io/ko/react-native/fastlane/">https://dev-yakuza.github.io/ko/react-native/fastlane/</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
