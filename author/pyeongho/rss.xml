<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>안드로이드 띵스</title>
	  <link>//android_things</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-02-24T00:00:00+00:00</pubDate>
	  <guid>//android_things</guid>
	  <description><![CDATA[
	     <h4>구글 랩스 안드로이드 띵즈</h4>

<ul>
<li>안드로이드 띵즈 : 운영체제 이름</li>
<li>2월24일 구글코라아에서 진행 하는 발표에 참석</li>
</ul>

<h3>0. 구글</h3>

<ul>
<li><img src="http://drive.google.com/uc?export=view&amp;id=1S7V2V6rfTWe2M6RnEobBU9WzUnYW5hHs" alt="이거주나요?"></li>
<li>생각보다 비싼거다고 안줬습니다. </li>
</ul>

<h3>1. 안드로이드 띵스</h3>

<ul>
<li>똑똑하고 연결된 기기</li>
<li>직접 연결, 브리지 연결</li>
<li><img src="http://drive.google.com/uc?export=view&amp;id=1TN1Y1oUz0l4njJ-xGaUmBYVtZFdJokRL" alt="구조"></li>
<li>임베디드에서 어려운 점을 구글에서 해준다.</li>
<li>안드로이드 프레임워크, 리눅스 커널</li>
<li>제조사는 원래 햐야 했던, 드라이버와 응용프로그램만 만들면 된다.</li>
<li>업데이트나 안드로이드 업데이트는 구글에서 한다.</li>
<li>응용프로그램도 안드로이드 개발자가 할 수 있으니 좀더 편한 임베디드 시스템을 만들수 있다.</li>
<li>AOSP 와 다른점 

<ul>
<li>Android SDK, Android Studio =&gt;  play services , firebase, cloud platform</li>
<li>스토어 없지만 개발자 콘솔에서 배포 관리하여 업데이트가 가능하다. 운영체제 업데이트도 구글에서 한다.</li>
</ul></li>
<li>라즈베리파이3에선도 안드로이드 띵즈는 동작한다.</li>
<li>샘플보드에서 동작 사진

<ul>
<li><a href="https://huewu.github.io/ataog_codelab/#0">설명서 링크</a></li>
<li>위 링크가 언제까지 동작 할지는 모르겠지만 우선 링크</li>
<li><img src="http://drive.google.com/uc?export=view&amp;id=1jX4w31ro7tj0lkeStoLzElnbJnhUZAx2" alt="동작"></li>
<li>크리덴셜 부분이 조금만 실수 해도 동작 하지 않아서 약간 오래 걸리긴 했다.</li>
<li><a href="git%20clone%20https://github.com/androidthings/sample-googleassistant.git">샘플코드</a></li>
</ul></li>
</ul>

<h3>2. 액션온구글</h3>

<ul>
<li>사용자와 구글사이의 대화형 인터페이스 </li>
<li>한국어 지원 가능 하여 기본적인 AI 스피커를 만들 수 있어 보인다.</li>
<li>설치없이 사용가능: 이름만 알면</li>
<li>액션 기능 단위</li>
<li>다이얼롤그플로우 : Dialogflow(API.AI) , 챗봇 빌더

<ul>
<li>어시스턴스에서는 무료</li>
</ul></li>
<li>SSML 포맷 재생 가능</li>
<li>사용자 목소리 인식 또는 계정정보 기반, 사용자 구분 가능</li>
<li>보안이필요 없으면 그냥 로그인 없어도 됨</li>
<li>대화 세션 중 상태 저장 가능</li>
<li>풀필먼트 fullfillment </li>
<li>파이어베이스 글라우펑션 기능</li>
<li>정해진 질문에 답변합니다.</li>
<li>다이얼로그플로우 : 헌국어 머신러닝은 되긴함 </li>
<li><a href="https://huewu.github.io/ataog_codelab/#0">설명서 링크</a></li>
<li>사용 후기

<ul>
<li>어떻게 말을 입력하고 데이터를 저장해야 하는지 알 수 있었다.</li>
</ul></li>
</ul>

<h3>3. 전체적인 내용</h3>

<ul>
<li>2개를 합쳐서 해야 하는 방법을 따로 공부해야 한다.</li>
<li>하지만 보드가 없어서 고민입니다.</li>
<li>라즈베리파이3 라도 사야하나 </li>
<li>안드로이드 띵즈는 응용프로그램에서 센서 연결등을 어떻게 해야 하는지 공부해야 하며</li>
<li>액션온구글 만든걸 응용프로그램에서 확인 하는걸 따로 공부 해야 한다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>애플리케이션 Foreground 확인</title>
	  <link>//lifecycle</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-02-12T00:00:00+00:00</pubDate>
	  <guid>//lifecycle</guid>
	  <description><![CDATA[
	     <h3>애플리케이션이 Foreground 를 확인 해야 할 때는 많습니다.</h3>

<ul>
<li>안드로이드 사용자중 홈버튼으로 앱을 종료 시키는 사람이 의외로 많다.</li>
<li>백그라운드 동작을 허용하지 않기 위해서는 포그라운드 인지 백그라운드 인지 확인을 해야 한다.</li>
<li>api 26이 나오면서 권한 없이 사용 가능한 방법이 생겼다.</li>
<li>Application.ActivityLifecycleCallbacks 를 이용하는 방법</li>
<li>Application 상속받은 클래스에서 위 클래스를 구현해 주면 됩니다. </li>
<li>사용은 애플리케이션 상속 받은 코드에서 init 을 호출해서 사용하면 됩니다.</li>
<li><div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">
    class OnApplication: Application() {
        override fun onCreate() {
            super.onCreate()
            Foreground.init(this)

        }
    }

</code></pre></div></li>
<li><p>애프리케이션 생성자에서 클래스를 초기화 합니다.</p></li>
<li><p>싱글톤 클래스라서 사용은 편하게 하시면 됩니다. 아래 처럼 원하는걸로 편하게 사용하면 됩니다.</p>

<ul>
<li>Foreground.get().isBackground</li>
<li>Foreground.get().appStatus</li>
</ul></li>
<li><p>전체 코드는 아래에 있습니다.</p>

<ul>
<li>간단한 동작 설명<br>

<ul>
<li>onActivityStarted 추가 되면 카운트 +1</li>
<li>onActivityStopped 추가 되면 카운트 -1</li>
<li>카운트가 0 이면 백그라운드</li>
<li>카운트가 1 보다 크면 포그라운드</li>
<li>카운트가 1 이면 포그라운드 전환<br></li>
</ul></li>
</ul></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/59944e4e9e8d76f45c6f395dccd1d8e8.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 immersive</title>
	  <link>//immersive</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-01-26T00:00:00+00:00</pubDate>
	  <guid>//immersive</guid>
	  <description><![CDATA[
	     <h3>갤럭시 s8 의 이상한 기능</h3>

<ul>
<li>갤럭시 s8 에서 특정 설정을 하면 소트키가 항상 숨겨지는 모드가 존재 해서 내가 추가한 내용은 아니지만 마치 이머시브 모드 처럼 동작 하는 현상</li>
<li>애플리케이션 개발 중에는 몰라도 될거 같지만 막상 개발하다 보면 알아야 도움 되는 내용입니다.</li>
<li><p>알아야 하는 내용</p>

<ul>
<li>애플리케이션 시작시 소프트키가 활성화 되어 있는지 체크 해야 하는부부</li>
<li>에플리케이션 실행 중 변경 되는 내용 이렇게 2가지 경우가 있습니다.</li>
</ul></li>
<li><p>애플리케이션 시작하면서 확인 하는 코드 </p>

<ul>
<li>enable 가 0 보다 크면 소프트 키가 안보이는 상태 입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    var enable = 0
    try {
        enable = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            Settings.Global.getInt(activity.contentResolver, "navigationbar_hide_bar_enabled")
        } else {
            -1
        }
    }catch (e: Exception){
    }
</code></pre></div></li>
<li><p>런타임에서 리스너로 확인 하는 방법</p>

<ul>
<li>arg 가 2일때 소프트 키가 안보이는 상태 입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    val decorView = activity.window.decorView
    decorView.setOnSystemUiVisibilityChangeListener {arg -&gt;
        log.d("Current arg: " + arg)
        if(arg == 2){
          //TODO 소포트키 안보임
        }else{
          //TODO 소포트 보임
        }
    }
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 스와이프백</title>
	  <link>//swipe_back</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-01-26T00:00:00+00:00</pubDate>
	  <guid>//swipe_back</guid>
	  <description><![CDATA[
	     <h3>조금더 편한 액티비 종료</h3>

<ul>
<li>손가락으로 드래그하여 액티비티 종료 하는 라이브러리 입니다.</li>
<li>iOS에서 자주 사용 되지만 안드로이드에서도 사용 할 수 있습니다.</li>
<li>아래가 오리지널 코드 위치 입니다.</li>
<li><a href="https://github.com/liuguangqiang/SwipeBack">스와이프백</a></li>
<li>코드분석은 setContentView 를 할때 루트에 스와이프 레이아웃을 추가하여 터치 이벤트를 전역으로 사용 할 수 있게 하여 드래그로 액티비티를 종료 할 수 있도록 한 라이브러리 입니다.</li>
</ul>

<h3>현재 제가 사용하는 코드는 프래그먼트 기반이라서 동작하지 않았습니다.</h3>

<ul>
<li>약간의 변경으로 프래그먼트에서 동작 하도록 하였습니다.</li>
<li>드래그로 완료시 액티비티 종료코드를 리스너로 등록하여 콜백을 받음</li>
<li>콜백 받은곳에서 프래그먼트를 제거 하는 형태 입니다.</li>
</ul>

<h3>SwipeBackLayout 추가</h3>

<ul>
<li>아래 코드를 기본코드에서 변경</li>
<li><script src="https://gist.github.com/pyeongho/de9bfd8d2fd3468f65c102284a25dc31.js"></script></li>
</ul>

<h3>SwipeBackFragment 추가</h3>

<ul>
<li>SwipeBackActivity 를 조금만 변경하여 아래 처럼 만들었습니다.</li>
<li>사용할 프래그먼트에서 SwipeBackFragment를 상속 받고 아래 처럼 사용하면 됩니다. </li>
<li>아래와 같이 setContentView 를 호출 하여 사용하면 동작 합니다.</li>
<li><p>기본적인 사용법은 swipeBack 과 동일합니다.</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">
  override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        setContentView(R.layout.layout_notice)
        setDragEdge(SwipeBackLayout.DragEdge.TOP) // 스와이프 방향
        return super.onCreateView(inflater, container, savedInstanceState)
    }

</code></pre></div></li>
<li><script src="https://gist.github.com/pyeongho/80330d4b1218e4aeaf67ba8fd7327acc.js"></script> </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 네스티드 웹뷰</title>
	  <link>//nested_webview.1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-27T00:00:00+00:00</pubDate>
	  <guid>//nested_webview.1</guid>
	  <description><![CDATA[
	     <h3>웹뷰와 네이티브의 연동시 꼭필요한 웹뷰 확장</h3>

<ul>
<li>웹뷰를 스크롤 하면 툴바가 사라지거나 </li>
<li>BottomSheet 에 웹뷰를 추가 했으때도 RecyclerView 처럼 스크롤 되는걸 원할 때 </li>
</ul>

<h2>bottom sheets 샘플은 <a href="http://thdev.tech/">꿈 많은 개발자가 되자</a> 코드 입니다.</h2>

<h3>네스티드 웹뷰 동작</h3>

<ul>
<li><p>일반 웹뷰
<img src="https://drive.google.com/uc?export=view&amp;id=10ht2zV7vkXuKizDFTHpM7eQqmkuOjnIV" alt="webview"> </p></li>
<li><p>네스티드 웹뷰
<img src="https://drive.google.com/uc?export=view&amp;id=1L1XlYTFKd4d5VOMggToi01wTywhdO_Hj" alt="네스티드">    </p></li>
</ul>

<h3>네스티드 웹뷰 코드</h3>

<ul>
<li>참고 : <a href="https://github.com/takahirom/webview-in-coordinatorlayout">https://github.com/takahirom/webview-in-coordinatorlayout</a></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/fbe0ecd55df127365179b65098ad4b25.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 TextView Padding 문제</title>
	  <link>//no_padding_textview</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-27T00:00:00+00:00</pubDate>
	  <guid>//no_padding_textview</guid>
	  <description><![CDATA[
	     <h3>디자인가이드를 적용하면서 문제가 발생하는 부분은 역시 TextView 패딩</h3>

<ul>
<li>TextView로 구성된 화면에서 마진으로 간격이 조정된 디자인 가이드를 받으면 생각 했던거 보다 간격이 훨씬 벌어짐</li>
<li>처음에 적용 했던 내용은 includeFontPadding을 false 로 적용 함<br></li>
<li>약간 줄어 들긴 하지만 완벽 하게 적용 되진 않았습니다.</li>
<li><p>아래 이미지     </p>

<ul>
<li><img src="https://drive.google.com/uc?export=view&amp;id=1nnjL0afBO2rmZOXJzbi95P6lef2XWRA-" alt="이렇게"><br></li>
<li>왼쪽이 일반 TextView에 includeFontPadding를 적용한 버전, 패딩을 완전히 제거한 버전 입니다.</li>
<li>xml 코드 첨부하였습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">    <span class="nt">&lt;TextView</span>
          <span class="na">android:includeFontPadding=</span><span class="s">"false"</span>
          <span class="na">android:background=</span><span class="s">"#00ff00"</span>
          <span class="na">android:text=</span><span class="s">"ABCD"</span>
          <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
          <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;NPTextView</span>
          <span class="na">android:includeFontPadding=</span><span class="s">"false"</span>
          <span class="na">android:background=</span><span class="s">"#00ff00"</span>
          <span class="na">android:text=</span><span class="s">"ABCD"</span>
          <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
          <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

</code></pre></div></li>
<li><p>NPTextView는 1줄 짜리에만 적용해서 사용해야 합니다. 여러줄은 아직 동작 안합니다.</p></li>
<li><p>그리고 직접 추가한 패딩 역시 제거하기때문에 잘 사용해야 합니다.</p></li>
<li><p>코드 내용은 텍스트 크기를 읽어서 Rect 사이즈를 타이트하게 고정하는 내용입니다.</p></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/859d82d7f30a4005ad7fd1e38ddd6512.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 알쓸신잡 1</title>
	  <link>//tips1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-24T00:00:00+00:00</pubDate>
	  <guid>//tips1</guid>
	  <description><![CDATA[
	     <h3>NavigationView 상단 그림자</h3>

<ul>
<li>안드로이드 기본 메뉴를 사용중에 아래와 같은 요구 사항이 들어 올때 처리 방법

<ul>
<li><img src="https://drive.google.com/uc?export=view&amp;id=1mN322WnoJSJWKYxHEQIT5Cl4ynUxKK46" alt="이렇게"></li>
<li>for tag:  NavigationView remove shadow </li>
</ul></li>
<li>처음에는 DrawerLayout, NavigationView 속성을 열심히 찾음

<ul>
<li>DrawerLayout의 StatusBar 은 투명하게 되고, 메뉴 나올때 그림자도 제거 가능</li>
<li>정작 하고 싶음 NavigationView 상단 statusbar 그림자가 남아 있음</li>
<li>NavigationView 코드를 확인 하면서 발생한 생각 상다바 만큼 알파값을 위에 추가한 느낌</li>
</ul></li>
<li>설마 하면서 NavigationView marginTop 을 -24dp 로 설정하니 그림자가 안보임 </li>
<li>그래서 내린 알쓸신잡 NavigationView 에서 상단에 알파값을 주기 때문에 상태바 만큼 위로 올려 버리니 동작 </li>
<li><p>24만큼 올렸으니 컨텐츠는 24만큼 내려야 합니다. 아래 처럼 android:layout_marginTop=&quot;-24dp&quot; 발견하기 까지 많은 시간이 걸렸습니다.</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;android.support.design.widget.NavigationView</span>
    <span class="na">android:id=</span><span class="s">"@+id/nav_view"</span>
    <span class="na">android:layout_marginTop=</span><span class="s">"-24dp"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_gravity=</span><span class="s">"start"</span>
    <span class="na">android:fitsSystemWindows=</span><span class="s">"true"</span>
    <span class="na">app:headerLayout=</span><span class="s">"@layout/nav_header_main"</span>
    <span class="na">app:menu=</span><span class="s">"@menu/activity_main_drawer"</span> <span class="nt">/&gt;</span>
</code></pre></div></li>
</ul>

<h3>안드로이드 스튜디오 실행기기 다중 선택</h3>

<ul>
<li>한개만 선택해야 한다는 고정 관념</li>
<li>shift f10 을 이용해서 실행 단일 기기 선택 </li>
<li>원하는 디바이스 선택 후 테스트 </li>
<li>너무 고정 관념 처럼 사용함</li>
<li>안드로이드 스튜디오 3.0 에서는 이 방법을 사용하기 힘든 이상하게 타겟이 고정됨</li>
<li>그런데 다른 방법으로 해결 고정 관념 타파</li>
<li>아래 그림 처럼 실행시 기기를 여러개 선택 가능하다.</li>
<li>여러개 선택하면 동시에 설치되고 실행
<img src="https://drive.google.com/uc?export=view&amp;id=1T2U0bqErnqhc1G39-BvWyTjCRbfdPkUI" alt="다중선택"></li>
</ul>

<h3>Kotlin DP &lt;-&gt; PX 변경 함수</h3>

<ul>
<li>베이스 액티비티나,  베이스 프래그먼트에 추가해 놓으면 편합니다.</li>
<li><p>사용법</p>

<ul>
<li>144.toDP</li>
<li>36.toPx</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">val Int.toDp: Int
    get() = (this / Resources.getSystem().displayMetrics.density).toInt()

val Int.toPx: Int
    get() = (this * Resources.getSystem().displayMetrics.density).toInt()
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>파이썬을 크로스도메인 허용</title>
	  <link>//flaskcross</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-22T00:00:00+00:00</pubDate>
	  <guid>//flaskcross</guid>
	  <description><![CDATA[
	     <h3>플라스크에서 크로스도메인 허용</h3>

<h4>파이썬 서버에 크로스도메인 허용</h4>

<ul>
<li>요청내용은 응답 헤더에 아래 내용 추가 였습니다.
<code>
 &#39;Access-Control-Allow-Origin: *&#39;
 &#39;Access-Control-Allow-Methods: GET&#39;
 &#39;Access-Control-Allow-Headers: X-Requested-With, Content-Type&#39;
</code></li>
<li>내용을 찾아 보니 크로스 도메인 허용</li>
<li>그래서 플라스크 크로스도메인 관련 내용을 찾으니 아래 처럼 친절하게 나와 있었습니다.<br></li>
<li>오리지널 참고 코드 입니다.

<ul>
<li><a href="http://flask.pocoo.org/snippets/56/">http://flask.pocoo.org/snippets/56/</a></li>
</ul></li>
<li><p>필요한 코드
<script src="https://gist.github.com/pyeongho/61fb098a180301db1a21c17f2d4e85de.js"></script></p></li>
<li><p>위 crossdomain 함수를 추가 후 내용필욯나 페이지에는 아래 내용을 추가 하면 됩니다.</p>

<ul>
<li>@crossdomain(origin=&#39;*&#39;)<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Shared elements</title>
	  <link>//sharedelements</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-21T00:00:00+00:00</pubDate>
	  <guid>//sharedelements</guid>
	  <description><![CDATA[
	     <h3>머티리얼 화면 전환, Shared Elements</h3>

<ul>
<li>플레이스토어에서 앱을 선택하면 리스트의 이미지가 스르르하면서 커지면서 화면 전환이 발생</li>
<li>처음에는 엄청난 라이브러리를 사용한지 알았지만 안드로이드 기본을 이용하면 된다.</li>
<li>안드로이는 구현보다 무엇을 사용하지만 알면 금방 적용 할수 있습니다. </li>
<li>일단 처음 발견한 링크 입니다.

<ul>
<li><a href="https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb">fragment-transitions-with-shared-elements</a><br></li>
</ul></li>
<li>위 링크를 보고 사용하는 내용이 shared-elements 라는것을 알고 사용하기로 함</li>
<li>5.0 이상만 가능하지만 이제는 5.0 미만에서의 애니메이션은 신경 안쓰기로 결정함 </li>
<li>shared-elements 를 키워드로 검색</li>
<li>안드로이드 개발자 사이트 참고 링크

<ul>
<li><a href="https://developer.android.com/training/material/animations.html?hl=ko">https://developer.android.com/training/material/animations.html?hl=ko</a></li>
</ul></li>
<li>다른 사람이 만든 공부하기 쉬운 샘플코드

<ul>
<li><a href="https://github.com/mikescamell/shared-element-transitions">https://github.com/mikescamell/shared-element-transitions</a></li>
</ul></li>
<li>프래그먼트에서 프래그먼트로 이동할 때 만 적어 보겠습니다.

<ul>
<li>각각의 상황에 맞는 내용은 위 링크 샘플에 잘 정리 되어 있습니다.</li>
</ul></li>
<li><p>A 프래그먼트에 이미지 뷰를 추가</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:id=</span><span class="s">"@+id/logo"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:layout_centerInParent=</span><span class="s">"true"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>android:transitionName 속성이 2번째 프래그먼트에도 동일하게 사용됩니다.</li>
</ul></li>
<li><p>A 프래그먼트 에서 B 프래그먼트 생성 및 A 프래그먼트 삭제 </p>

<ul>
<li>참고 addToBackStack(TAG) 을 이용해서 뒤로가기 가능하도록 가능합니다.(플레이스토어 처럼 반대 애니메이션 동작 합니다.)</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">  val mainFragment = MainFragment.newInstance("")
  supportFragmentManager
            .beginTransaction()
            .addSharedElement(img, ViewCompat.getTransitionName(img))
            .remove(intro)
            .replace(R.id.contentFrame, mainFragment)                
            .commit()
</code></pre></div></li>
<li><p>여기서 중요한건 아래 내용입니다.</p>

<ul>
<li>.addSharedElement(img, ViewCompat.getTransitionName(img))</li>
<li>img 는 A 프래그먼트의 ImageView 객체 입니다.</li>
<li>메소드명처럼 엘레먼트를 전달하여 B 프래그먼트에서 활용 하는걸로 보입니다</li>
</ul></li>
<li><p>B 프래그먼트</p>

<ul>
<li>onCreate 생성자에 아래 내용을 추가해 줍니다.</li>
<li>transition.move 를 수정하면 다양한 효과가 있을거라 생각하지만 move 로 충분 했습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            sharedElementEnterTransition = TransitionInflater.from(context).inflateTransition(android.R.transition.move)
        }
    }
</code></pre></div>
<ul>
<li>B 프래그먼트에 이미지뷰 추가</li>
<li>이번에도 transitionName 필드에 주의해 주세요</li>
<li>사이즈를 고정한건 이동하면서 객체가 작아지는걸 볼려고 추가한 내용입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:layout_centerHorizontal=</span><span class="s">"true"</span>
    <span class="na">android:id=</span><span class="s">"@+id/fragment_b_imaged"</span>
    <span class="na">android:layout_width=</span><span class="s">"30dp"</span>
    <span class="na">android:layout_height=</span><span class="s">"30dp"</span>
    <span class="na">android:scaleType=</span><span class="s">"centerCrop"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">tools:ignore=</span><span class="s">"UnusedAttribute"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>여기까지 추가 하면 기본적인 동작을 확인 가능합니다.</li>
<li>좀더 많은 내용은 중간에 추가된 샘플이 좋습니다.<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>롤리팝 이상에서 백그라운드 푸시 보내기</title>
	  <link>//push</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-07-22T00:00:00+00:00</pubDate>
	  <guid>//push</guid>
	  <description><![CDATA[
	     <h3>백그라운드 푸시 적용</h3>

<ul>
<li>롤리팝 이상에서 앱이 백그라운드 상태에서는 푸시를 수신하는 코드가 동작 하지 않고 운영체제에서 알림을 발생시킨다.</li>
<li>파이어베이스 콘솔에서 푸시를 발송하면 OS 에서만 수신 

<ul>
<li>이유를 찾아 보니 푸시 메시지 notification 이 있을 때 앱에서 푸시를 수신 안하고 OS 가 처리함</li>
</ul></li>
<li>notification 영역을 제거하고 페이로드 영역(data) 부분만 으로 푸시를 보내면 됩니다.</li>
<li>커스텀 푸시는 아니지만 노티 알림 클릭시 원하는 동작을 만들고 싶을때가 많다.</li>
<li><p>그래서 푸시 규격에 대해서 자세히 찾아 봄</p>

<ul>
<li><a href="https://firebase.google.com/docs/cloud-messaging/http-server-ref?hl=ko">https://firebase.google.com/docs/cloud-messaging/http-server-ref?hl=ko</a></li>
<li>위 링크에서 보면 click_action 이 존재 하고 하고 이를 이용하면 시작 액티비티를 지정이 가능하다.</li>
<li>그래서 서버쪽 전송 영역을 아래 처러 지정 하였습니다.
<code>json
data: {
  hello: &quot;good job&quot;,
},
notification: {
  title: &quot;Hello, World&quot;,
  body: &quot;This is a notification that will be displayed if your app is in the background.&quot;,
  click_action:&quot;OPEN_ACTIVITY_1&quot;,
  icon:&quot;white&quot;,
  color:&quot;#FF0000&quot;,
  sound:&quot;default&quot;
}
</code></li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">".BasicNotificationActivity"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;intent-filter&gt;</span>
          <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">"OPEN_ACTIVITY_1"</span> <span class="nt">/&gt;</span>
          <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">"android.intent.category.DEFAULT"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/intent-filter&gt;</span>
  <span class="nt">&lt;/activity&gt;</span>
</code></pre></div>
<ul>
<li>내용

<ul>
<li>title 와 body 로 제목과 내용이 나옵니다. </li>
<li>icon 은 리소스에 있는 아이콘이 선택되어서 나옵니다.(되도록 흰색 알파 이미지선택이 필요합니다.)</li>
<li>icon 배경색은 빨간색</li>
<li>소리는 기본 알림 소리 입니다.</li>
<li>알림을 클릭 시 BasicNotificationActivity 가 실행됩니다.</li>
<li>intent 로 hello 가 있습니다.<br></li>
</ul></li>
</ul></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
