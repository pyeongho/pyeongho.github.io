<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>androidx navigation , Safe Arg</title>
	  <link>//navigation</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-12-04T00:00:00+00:00</pubDate>
	  <guid>//navigation</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://developer.android.com/guide/navigation/navigation-pass-data">https://developer.android.com/guide/navigation/navigation-pass-data</a></li>
<li><a href="https://developer.android.com/jetpack/androidx/releases/navigation">https://developer.android.com/jetpack/androidx/releases/navigation</a></li>
<li><a href="https://www.charlezz.com/?p=354">https://www.charlezz.com/?p=354</a></li>
<li><a href="https://blog.naver.com/yoonhok_524/221530058636">https://blog.naver.com/yoonhok_524/221530058636</a></li>
</ul>

<h3>종속성 추가</h3>

<ul>
<li>프로젝트 레벨 </li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">buildscript {
    repositories {
        google()
    }
    dependencies {
        def nav_version = "2.1.0"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

</code></pre></div>
<ul>
<li>앱 레벨</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">apply plugin: "androidx.navigation.safeargs" or  apply plugin: "androidx.navigation.safeargs.kotlin"

dependencies {
  def nav_version = "2.1.0"

  // Java language implementation
  implementation "androidx.navigation:navigation-fragment:$nav_version"
  implementation "androidx.navigation:navigation-ui:$nav_version"

  // Kotlin
  implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
  implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

}


</code></pre></div>
<h3>Safe Arg</h3>

<ul>
<li>번들을 사용해도 되지만 안전하게 변수로 사용하는 방법</li>
<li><p>방법</p>

<ul>
<li>액션을 만든다.</li>
<li>액션에 arg를 추가 한다.</li>
<li>도착지에 arg 를 추가한다.</li>
</ul></li>
<li><p>네비게이션 샘플</p>

<p><script src="https://gist.github.com/pyeongho/616fc4d88b8bd1f3bc3bb5ce2987b9b4.js"></script>  </p></li>
<li><p>시작 지 액션 실행</p>

<ul>
<li>자신이 정의 프래그먼트 이름(Register1Fragment)으로  xxxxxDirections 클래스(Register1FragmentDirections)가 자동 생성 되며 해당 클래스에 액션이 정의 되어 있다.<br>
<code>kotlin
val action = Register1FragmentDirections.actionNavRegister1ToNavRegister2(it.arg)
Navigation.findNavController(v).navigate(action)
</code></li>
</ul></li>
<li><p>종착지 확인</p>

<ul>
<li>자신이 정의한 이름에(Register2Fragment)  xxxArgs 가 추가된 클래스가 자동 생성되되 미리 정의된 변수를 확인 할 수 있습니다.<br></li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">val args :Register2FragmentArgs by navArgs()
override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        log.d(args.name)
}

</code></pre></div></li>
</ul>

<h3>에러 발생 주의점</h3>

<ul>
<li>cannot inline bytecode built with jvm target 1.8 into bytecode that is being built with jvm target 1.6. please specify proper &#39;-jvm-target&#39; option</li>
<li>File-settings안의 kotlin compiler 안의 target JVM version을 바꿔준다 

<ul>
<li>File-Invalidate Caches / Restart 후 Build - Clean Project </li>
</ul></li>
<li>안되면 

<ul>
<li>build.gradle(module:app)안의  android{} 안에 kotlinOptions{jvmTarget = &quot;1.8&quot;} 을 넣는다<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>intellij 계열 인증서 오류 수정</title>
	  <link>//ssl</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-11-27T00:00:00+00:00</pubDate>
	  <guid>//ssl</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://m.blog.naver.com/PostView.nhn?blogId=youzang7&amp;logNo=221192794441&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F">intellij Server Certificates 문제</a></li>
</ul>

<h3>안드로이드 스튜디오 , intellij 등을 사용시 뜬금 없이 나오는 인증서 오류 문제</h3>

<ul>
<li>아래와 같은 에러들로 빌드 에러가 발샐할 때 (일반적이지는 않아요)

<ul>
<li>PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException</li>
<li>Server&#39;s Certificate is not trusted pop-up</li>
</ul></li>
</ul>

<h3>참고 사이트</h3>

<ul>
<li>3개 정도의 방법입니다. 저는 사내 인증서 허용 방법으로 해결 했습니다. 마지막 방법은 실패해서 정리는 안했습니다.</li>
</ul>

<h2>설정 변경</h2>

<ul>
<li> SSL 통신 관련 옵션을 해제

<ul>
<li>File &gt; Settings &gt; Tools &gt; Server Certificates &gt; Accept non-trusted certificates automatically 체크</li>
<li>저는 실패 했습니다.</li>
</ul></li>
</ul>

<h2>사내 인증서 허용</h2>

<ul>
<li>회사내 인증서 및 self 인증서가 존재한다면 다음과 같이 진행한다.</li>
<li>저는 이걸로 성공 했습니다.</li>
<li>경로 : C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.2.1\jbr\lib\security</li>
<li>해당 경로의 파일들은 따로 백업</li>
<li>keytool ‐keystore cacerts ‐importcert ‐alias HQSSL ‐file HQSSL.cer 실행 (password : changeit , HQSSL.cer 사내 인증서 파일로 대체)</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>단색 bmp 생성</title>
	  <link>//monobmp</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-11-27T00:00:00+00:00</pubDate>
	  <guid>//monobmp</guid>
	  <description><![CDATA[
	     <h3>단색 BMP 생성</h3>

<ul>
<li>BMP 헤더는 한땀 한땀 만들어서 넣었습니다. ㅠㅠ</li>
<li>128 * 64 사이즈의 단색 BMP 파일 생성 입니다.</li>
<li>단색의 경우 1비트가 1픽셀을 나타 냅니다.</li>
<li>1바이트는 8픽셀 입니다.</li>
<li>128 * 64 = 8192 픽셀</li>
<li>8192 =&gt;  1024바이트 </li>
<li>헤더는 무식하게 하드코딩으로 넣었습니다.</li>
<li><p>색상 가지고 와서 약간의 색상이 포함 되어 있으면 1 없으면 0
``` kotlin
    val width = bitmap.width
    val height = bitmap.height
    var R: Int
    var G: Int
    var B: Int
    var pixel: Int
    var i = 62
    var bit = 7
    for (x in height-1  downTo  0) {  // 위아래 반전을 제거 하기 위해서 63부터 역순, 
        for (y in 0 until width) {
            pixel = bitmap.getPixel(y, x)   </p>
<div class="highlight"><pre><code class="language-" data-lang="">        R = Color.red(pixel)
        G = Color.green(pixel)
        B = Color.blue(pixel)
        val gray = R+G+B/3
        if(gray  &gt; 128){
            arrayOfByte[i] = arrayOfByte[i]  or  (1 shl bit).toByte()  
        }

        if(bit ==0){  // 알아보기 쉽게, 엔디안 처리 
            i++
            bit = 8
        }
        bit--
    }
}
</code></pre></div></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">



### e BMP 헤더
  - 128 * 64 입니다.
  - [헤더참고](https://heinek.tistory.com/13)
  ``` kotlin
        val arrayOfByte = ByteArray(1086)
        arrayOfByte[0] = 66
        arrayOfByte[1] = 77
        arrayOfByte[2] = 62   // 사이즈  0x3E
        arrayOfByte[3] = 4    // 사이즈  0x04
        arrayOfByte[4] = 0    // 사이즈  0x00   
        arrayOfByte[5] = 0    // 사이즈  0x00   1086
        arrayOfByte[6] = 0
        arrayOfByte[7] = 0
        arrayOfByte[8] = 0
        arrayOfByte[9] = 0
        arrayOfByte[10] = 62  // 이미지 데이터가 있는 곳의 포인터 실제 데이터는 62번째 주소 부터 
        arrayOfByte[11] = 0
        arrayOfByte[12] = 0
        arrayOfByte[13] = 0
        arrayOfByte[14] = 40
        arrayOfByte[15] = 0
        arrayOfByte[16] = 0
        arrayOfByte[17] = 0
        arrayOfByte[18] = Byte.MIN_VALUE  // -128  폭
        arrayOfByte[19] = 0
        arrayOfByte[20] = 0
        arrayOfByte[21] = 0
        arrayOfByte[22] = 64  // 높이
        arrayOfByte[23] = 0   // 높이
        arrayOfByte[24] = 0   // 높이
        arrayOfByte[25] = 0   // 높이  0 0 0 64
        arrayOfByte[26] = 1  
        arrayOfByte[27] = 0
        arrayOfByte[28] = 1
        arrayOfByte[29] = 0
        arrayOfByte[30] = 0
        arrayOfByte[31] = 0
        arrayOfByte[32] = 0
        arrayOfByte[33] = 0
        arrayOfByte[34] = 0
        arrayOfByte[35] = 4
        arrayOfByte[36] = 0
        arrayOfByte[37] = 0
        arrayOfByte[38] = 0
        arrayOfByte[39] = 0
        arrayOfByte[40] = 0
        arrayOfByte[41] = 0
        arrayOfByte[42] = 0
        arrayOfByte[43] = 0
        arrayOfByte[44] = 0
        arrayOfByte[45] = 0
        arrayOfByte[46] = 0
        arrayOfByte[47] = 0
        arrayOfByte[48] = 0
        arrayOfByte[49] = 0
        arrayOfByte[50] = 0
        arrayOfByte[51] = 0
        arrayOfByte[52] = 0
        arrayOfByte[53] = 0
        arrayOfByte[54] = 0
        arrayOfByte[55] = 0
        arrayOfByte[56] = 0
        arrayOfByte[57] = 0
        arrayOfByte[58] = -1
        arrayOfByte[59] = -1
        arrayOfByte[60] = -1
        arrayOfByte[61] = 0 

</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>android headup notification</title>
	  <link>//headup</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-10-27T00:00:00+00:00</pubDate>
	  <guid>//headup</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://codechacha.com/ko/notifications-in-android/">안드로이드의 다양한 Notification 종류와 구현 방법</a></li>
<li><a href="https://github.com/codechacha/notifications-with-styles">샘플</a></li>
</ul>

<h3>푸시 채널 이야기</h3>

<ul>
<li>P 버전 이상에서는 채널을 추가해야 노티피케이션을 사용 할 수 있습니다.</li>
</ul>

<h3>headup  notification 매우 강조 되는 표시</h3>

<ul>
<li>문자등이 올때 상태바에서 뚝 떨어지는 노티피케이션 입니다.</li>
</ul>

<h3>Head Up Notifiation</h3>

<ul>
<li>Head up Notification은 전면에 노티가 뜨는 것을 말합니다. 사용자가 Statusbar를 내려서 확인하지 않아도 바로 화면에 뜨기 때문에 쉽게 눈에 띕니다. 전화와 같은 중요한 작업을 알릴 때 이런 노티를 적용하면 좋을 것 같습니다. 중요하지 않은데 사용된다면 사용자가 이 앱이 거슬리다고 생각할 수 있습니다.<br>
아래 화면은 Head up notification입니다. 예제는 기본 노티에 적용하였지만 모든 스타일의 노티에 적용할 수 있습니다. </li>
</ul>

<p><script src="https://gist.github.com/pyeongho/341435dcb47b87b81026f3afd00434ea.js"></script></p>

<ul>
<li>1. 채널을 만들 때 중요도를 IMPORTANCE_HIGH로 설정해야 합니다.</li>
<li>2. PendingIntent를 만듭니다. Builder에 fullScreenPendingIntent를 등록하기 때문에 변수 이름을 fullScreenPendingIntent라고 했습니다.</li>
<li>3. Builder의 priority를 PRIORITY_HIGH로 설정해야 합니다.</li>
<li>4. fullScreenPendingIntent를 등록합니다.</li>
<li>그리고 가장 중요한 것은 앱의 AndroidManifest.xml에 다음 퍼미션을 꼭 추가해야 합니다. Install 퍼미션이기 때문에 설치만 하면 바로 권한을 받습니다.

<ul>
<li> <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT"/></li>
<li>Head up notification은 채널의 중요도를 IMPORTANCE<em>HIGH, 노티의 중요도를 PRIORITY</em>HIGH로 설정해야 합니다. 그리고 fullScreenIntent를 추가해야 합니다. 마지막으로 가장 중요한 것은 Q부터 USE<em>FULL</em>SCREEN_INTENT 권한이 없으면 Head up 노티를 띄울 수 없기 때문에 꼭 추가해줘야 합니다.</li>
</ul></li>
</ul>

<h3>문제점</h3>

<ul>
<li>포그라운드 푸시 에서는 위 코드를 적용해서 헤드업 노티피케이션을 만들수 있습니다.</li>
<li>background 에서는 onMessageReceived 에서 작업하는 내용이 동작하지 않아서 head-up notification 동작을 고민하고 찾아 보았습니다.</li>
<li>결론은 푸시전송시 아래와 같은 형태로 하여 보내고 있습니다. </li>
<li>아래와 같은 형태는 포그라운드 상태에서 onMessageReceived 메소드를 이용하여 원하는 작업이 가능합니다.</li>
<li>백그라운드 상태에서는 priority : high 를 추가해도 head-up 은 동작 하지 않았습니다.</li>
<li>동작 안할때는 역시 옛날 방식 notification 필드 자체를 제거해서 하면 onMessageReceived 에서 head up 이 동작 가능합니다.</li>
<li>꼭 필요한 경우 예날 방식 처림 notification 없는 버전으로 작업 해야 할거 같습니다.<br></li>
</ul>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nt">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"토큰"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"notification"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="p">},</span><span class="w">
    </span><span class="nt">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>round rect 마스크</title>
	  <link>//round_rect_mask</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-10-17T00:00:00+00:00</pubDate>
	  <guid>//round_rect_mask</guid>
	  <description><![CDATA[
	     <h3>안쪽이 둥근 모서리</h3>

<ul>
<li>둥근 모서리로 특정 뷰를 보여 줘야 할때</li>
<li>안쪽에 차트나 이미지가 있고 외부에서 마스킹 할때?!</li>
<li>편한 방법은 나인패치로 작업 하셔도 됩니다.</li>
<li>아래 리소스 처럼 하면 가운데가 뻥 뚫린 레이어를 만들 수 있습니다.</li>
<li>색상은 이해되기 쉽게 빨간색과 검정색을 사용 했습니다.</li>
<li>색상을 같은 색으로 하면 마스킹은 가능 합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;layer-list</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;item</span>
        <span class="na">android:bottom=</span><span class="s">"-20dp"</span>
        <span class="na">android:left=</span><span class="s">"-20dp"</span>
        <span class="na">android:right=</span><span class="s">"-20dp"</span>
        <span class="na">android:top=</span><span class="s">"-20dp"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;shape</span> <span class="na">android:shape=</span><span class="s">"rectangle"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;stroke</span>
                <span class="na">android:width=</span><span class="s">"37dp"</span>
                <span class="na">android:color=</span><span class="s">"#ff0000"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;corners</span> <span class="na">android:radius=</span><span class="s">"10dp"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/shape&gt;</span>
    <span class="nt">&lt;/item&gt;</span>


    <span class="nt">&lt;item</span> <span class="na">android:bottom=</span><span class="s">"6dp"</span>
        <span class="na">android:left=</span><span class="s">"6dp"</span>
        <span class="na">android:right=</span><span class="s">"6dp"</span>
        <span class="na">android:top=</span><span class="s">"6dp"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;shape</span> <span class="na">android:shape=</span><span class="s">"rectangle"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;stroke</span>
                <span class="na">android:width=</span><span class="s">"12dp"</span>
                <span class="na">android:color=</span><span class="s">"#000000"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;corners</span> <span class="na">android:radius=</span><span class="s">"10dp"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/shape&gt;</span>
    <span class="nt">&lt;/item&gt;</span>

<span class="nt">&lt;/layer-list&gt;</span>

</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>fragmentTransaction 사용 관련</title>
	  <link>//commit</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-10-10T00:00:00+00:00</pubDate>
	  <guid>//commit</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://pluu.github.io/blog/android/2017/01/26/fragmentTransaction/">https://pluu.github.io/blog/android/2017/01/26/fragmentTransaction/</a></li>
<li><a href="https://m.blog.naver.com/PostView.nhn?blogId=zoomen1004&amp;logNo=220198317501&amp;targetKeyword=&amp;targetRecommendationCode=1&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F">commit vs commitAllowingStateLoss</a></li>
</ul>

<h3>commit vs commitAllowingStateLoss</h3>

<ul>
<li>Fragment 실행은 commit 호출 이후, 하지만 commit는 ListCycle상 onSaveInstanceState()가 호출 되기 전에 수행되어야함 , 이를 어길 시 에러 발생 </li>
<li>onSaveInstanceState 이후 수행가능한 상황에서만 commit 사용</li>
<li>onSaveInstanceState 무관하게 동작 시키기 위해서는 commitAllowingStateLoss 를 사용하자</li>
<li>에러 발생이 무섭다면 commitAllowingStateLoss 사용을 추천 </li>
<li>에러 : java.lang.IllegalStateException:  Can not perform this action after onSaveInstanceState</li>
</ul>

<h3>commit vs commitNow</h3>

<ul>
<li>commitNow()라는 메소드 이름 그대로이지만 동기적으로 트랜잭션 처리를 해주는 것 같습니다. </li>
<li>자세한 내용은 참고 사이트에서 확인 가능합니다.</li>
<li>요약은 조금더 편리 commitNow()</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>R8 NullPointerException</title>
	  <link>//r8_error</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-07-23T00:00:00+00:00</pubDate>
	  <guid>//r8_error</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li><a href="https://github.com/square/okhttp/issues/4604">https://github.com/square/okhttp/issues/4604</a></li>
</ul>

<h3>그래들 수정후 성공</h3>

<ul>
<li>okhttp 와 문제가 발생하는걸로 보입니다.</li>
<li>아래와 같은 내용을 그래들에 추가 하여 해결하였습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang=""> buildscript {
     ...
     repositories {
         ...
         maven {
             url 'http://storage.googleapis.com/r8-releases/raw'
         }
     }

     dependencies {
         classpath 'com.android.tools:r8:1.5.50'  // Must be before the Gradle Plugin for Android.
         classpath 'com.android.tools.build:gradle:3.3.1'  // You don't need to upgrade this to use a newer R8 version.
         ...
      }
 }


</code></pre></div>
<h3>에러 내용</h3>
<div class="highlight"><pre><code class="language-" data-lang="">org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:transformClassesAndResourcesWithR8ForDebug'.
    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:103)
    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:73)
    at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)
    at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)
    at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)
    at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:59)
    at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:101)
    at org.gradle.api.internal.tasks.execution.FinalizeInputFilePropertiesTaskExecuter.execute(FinalizeInputFilePropertiesTaskExecuter.java:44)
    at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:91)
    at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:62)
    at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:59)
    at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)
    at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
    at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)
    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.run(DefaultTaskGraphExecuter.java:256)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)
    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:249)
    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:238)
    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.processTask(DefaultTaskPlanExecutor.java:123)
    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.access$200(DefaultTaskPlanExecutor.java:79)
    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:104)
    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:98)
    at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.execute(DefaultTaskExecutionPlan.java:663)
    at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.executeWithTask(DefaultTaskExecutionPlan.java:597)
    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:98)
    at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NullPointerException
    at com.android.tools.r8.shaking.Enqueuer.transitionDefaultMethodsForInstantiatedClass(Enqueuer.java:744)
    at com.android.tools.r8.shaking.Enqueuer.transitionDefaultMethodsForInstantiatedClass(Enqueuer.java:745)
    at com.android.tools.r8.shaking.Enqueuer.transitionMethodsForInstantiatedClass(Enqueuer.java:730)
    at com.android.tools.r8.shaking.Enqueuer.processNewlyInstantiatedClass(Enqueuer.java:674)
    at com.android.tools.r8.shaking.Enqueuer.trace(Enqueuer.java:1091)
    at com.android.tools.r8.shaking.Enqueuer.traceApplication(Enqueuer.java:1074)
    at com.android.tools.r8.R8.run(R8.java:286)
    at com.android.tools.r8.R8.run(R8.java:228)
    at com.android.tools.r8.R8.lambda$run$0(R8.java:133)
    at com.android.tools.r8.utils.ExceptionUtils.withCompilationHandler(ExceptionUtils.java:55)
    at com.android.tools.r8.utils.ExceptionUtils.withR8CompilationHandler(ExceptionUtils.java:48)
    at com.android.tools.r8.R8.run(R8.java:129)
    at com.android.builder.dexing.R8Tool.runR8(r8Tool.kt:145)
    at com.android.build.gradle.internal.transforms.R8Transform.transform(R8Transform.kt:202)
    at com.android.build.gradle.internal.pipeline.TransformTask$2.call(TransformTask.java:239)
    at com.android.build.gradle.internal.pipeline.TransformTask$2.call(TransformTask.java:235)
    at com.android.builder.profile.ThreadRecorder.record(ThreadRecorder.java:102)
    at com.android.build.gradle.internal.pipeline.TransformTask.transform(TransformTask.java:230)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.doExecute(IncrementalTaskAction.java:50)
    at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)
    at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)
    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:124)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)
    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)
    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:113)
    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:95)
    ... 33 more


</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>redux 공부 중</title>
	  <link>//redux_study</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-07-12T00:00:00+00:00</pubDate>
	  <guid>//redux_study</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li>참고 글이 원본 입니다. </li>
<li><a href="https://qiita.com/Urotea/items/8cbc8f55406b6ff32bbd">샘플 공부</a></li>
<li><a href="https://github.com/Urotea/AndroidBoilerplate">샘플 코드</a></li>
<li><a href="https://github.com/freeletics/RxRedux">참고라이브러리</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>redux</title>
	  <link>//redux</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-07-09T00:00:00+00:00</pubDate>
	  <guid>//redux</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li>참고 글이 원본 입니다. </li>
<li><a href="https://voidsatisfaction.github.io/2017/02/24/what-is-redux/">리덕스(Redux)란 무엇인가?</a></li>
</ul>

<h3>리덕스</h3>

<ul>
<li>안드로이드용 공식 리덕스는 아니지만 리덕스의 기본적인 개념을 알고 일ㄹ</li>
<li><p>리덕스는 어플리케이션의 클라이언트쪽 state를 관리하기 위한 거대한 이벤트 루프이다.</p>

<ul>
<li>액션 = 이벤트</li>
<li>리듀서 = 이벤트에 대한 반응</li>
</ul></li>
<li><p>Redux의 동기</p>

<ul>
<li>Redux공식 문서(참조)에 의하면 리덕스는 클라이언트 앱의 복잡성을 제어하기 위한 하나의 state제어 수단이라고 한다(정확히는 방법론이 맞는것 같다.)</li>
<li>Redux를 제안하고 개발한 Dan Abramov는 클라이언트앱의 복잡성을 증가시키는게 Mutation과 Asynchronicity라며 그 둘을 멘토스와 콜라와 같다고 한다.</li>
<li>Mutation과 Asynchronicity는 각각 존재할때에는 대단한 것임에 틀림없지만 같이 존재할때 크나큰 복잡성을 유도한다는 것이다.</li>
<li>여기서 Redux는 Mutation, 즉 클라이언트의 종합적인 State를 관리하기 위한 아키텍쳐 방법론인 것이다. </li>
</ul></li>
<li><p>Redux의 원리</p>

<ul>
<li>어플리케이션 전체에는 store라는 커다란 하나의 state가 존재하는데 이것이 어플리케이션의 state를 총괄한다.</li>
<li>store의 state는 그 자체를 직접 변형할 수 없고, 오직 순수 함수인 리듀서로만 새로운 형태로 갈아치우는 것이 가능하다.</li>
<li>리듀서는 type과 payloads(꼭 속성이름이 이렇지 않아도 됨)를 속성으로 갖는 단순 객체인 action이벤트가 발생했을 때에만 작동하며</li>
<li>action이벤트를 발생시키는 방법은 dispatch라는 함수에 단순 객체인 action을 넣는것으로 가능하게 한다.</li>
<li>dispatch(action) =&gt; 리듀서 작동 =&gt; store의 state변경 =&gt; 변경된 state가 state를 subscribe하고 있는 컴포넌트에 전달</li>
</ul></li>
<li><p>Redux의 장점</p>

<ul>
<li>application state의 변화가 예측가능하게 변한다는 점이다</li>
<li>이는 특정 액션이벤트 발생에만 reducer가 작동하게 했기때문에 store state가 변한경우 그것이 정확히 어떠한 액션 이벤트로 부터변경된 것인지 알 수 있다.</li>
<li>정확히 어떤 액션 이벤트로 부터 변경된 것인지 알기 때문에 Time travel debugging이 가능해진다. 간단하게 얘기하자면 이제까지 store state가 변화해온 과정을 마치 뒤로가기 버튼이 있는것 처럼 하나하나 확인해볼 수 있는 것이다.</li>
<li>리듀서가 순수 함수(외부에 영향을 끼치지 않는 함수. ex: api calling이 없는 함수)이기 때문에 test코드를 짤 수 있다는 장점도 존재한다.</li>
<li>선언적으로 프로그래밍을 할 수 있다는 점이다(Declarative Programming)</li>
</ul></li>
<li><p>Redux와 Middleware</p>

<ul>
<li>action이 단순 객체이기 때문에 다음과 같은 행동이 불가능하다

<ol>
<li>로그인 요청을 보내며 로딩중이라는 표시를 뜨게 하기</li>
<li>회원가입 요청을 보내는데에 만약 이미 있는 id라면 에러 메세지를 보내고 아니라면 성공시킨다.</li>
</ol></li>
<li>action이 단순 객체라는 얘기는 조건 분기나 다른 action 이벤트를 생성할 수 없기 떄문에 우리는 action creator라는 action을 생성하는 함수를 생성한다. </li>
<li>action creator는 함수이기 때문에 Promise나 Callback을 적절히 조화하는 것으로 다른 action 이벤트를 생성할 수 있고, 조건 분기도 가능해진다. 사실 이름만 action creator이지 action자체를 반환하지 않아도 된다.</li>
<li>redux thunk는 함수를 반환하는 함수인데 dispatch를 가지고 함수를 warpping하고 있으므로 일일이 dispatch를 불러와야하는 귀찮음이 경감된다.</li>
</ul></li>
</ul>

<h4>리덕스의 정체</h4>

<ul>
<li>redux는 state관리를 위한 거대한 event loop

<ul>
<li>액션 = 이벤트</li>
<li>리듀서 = 이벤트에 대한 반응</li>
</ul></li>
<li>액션이벤트를 발생시켜서 리듀서라는 이벤트에 대한 반응을 일으키므로서 어플리케이션의 state를 a라는 상태에서 b라는 상태로 만든다.(a is b)<br></li>
<li><p>실제로 Dan Abramov는 공식 tutorial문서에서 이렇게 얘기하고 있다.</p>
<div class="highlight"><pre><code class="language-" data-lang="">    Following in the steps of Flux, CQRS, and Event Sourcing, Redux attempts to make state mutations predictable by imposing certain restrictions on how and when updates can happen. These restrictions are reflected in the three principles of Redux.
</code></pre></div></li>
<li><p>이벤트 기반의 프로그래밍론이 redux에 사상적으로 들어가 있는 것이다.     </p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>SOLID 를 공부해 보자</title>
	  <link>//oop-solid</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-06-25T00:00:00+00:00</pubDate>
	  <guid>//oop-solid</guid>
	  <description><![CDATA[
	     <h3>SOLID</h3>

<ul>
<li><p>침착하게 습습 후후 </p></li>
<li><p><a href="https://gmlwjd9405.github.io/2018/07/05/oop-solid.html">참고</a></p></li>
<li><p>OOP(객체지향 프로그래밍) 설계 원칙 ‘SOLID’를 이해한다.</p>

<ul>
<li>S: 단일 책임 원칙(SRP)를 이해할 수 있다. </li>
<li>O: 개방-폐쇄 원칙(OCP)을 이해할 수 있다.</li>
<li>L: 리스코프 치환 원칙(LSP)을 이해할 수 있다.</li>
<li>I: 인터페이스 분리 원칙(ISP)을 이해할 수 있다.</li>
<li>D: 의존 역전 원칙(DIP)을 이해할 수 있다.</li>
</ul></li>
<li><p>단일 책임 원칙(SRP, Single Responsibility Principle)</p>

<ul>
<li>객체는 단 하나의 책임만 가져야 한다.</li>
</ul></li>
<li><p>개방-폐쇄의 원칙(OCP, Open Closed Principle)</p>

<ul>
<li>기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다.</li>
<li>클래스를 변경하지 않고도 대상 클래스의 환경을 변경할 수 있는 설계가 되어야 한다.</li>
</ul></li>
<li><p>리스코프 치환 원칙(LSP, Liskov Substitution Principle)</p>

<ul>
<li>일반화 관계에 대한 이야기며, 자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다.</li>
<li>LSP는 부모 클래스와 자식 클래스 사이의 행위가 일관성이 있어야 한다는 의미다. 즉, LSP를 만족하면 프로그램에서 부모 클래스의 인스턴스 대신에 자식 클래스의 인스턴스로 대체해도 프로그램의 의미는 변화되지 않는다.</li>
<li>일반화 관계

<ul>
<li>“is a kind of” 의 관계</li>
<li>예를 들어, 원숭이 is a kind of 포유류</li>
<li>포유류(부모 클래스), 원숭이(자식 클래스)</li>
</ul></li>
<li>LSP를 만족시키는 간단한 방법은 재정의하지 않는 것이다. 즉, 부모 클래스에서 상속받은 메서드들이 자식 클래스에 오버라이드, 즉 재정의되지 않도록 하면 된다.</li>
</ul></li>
<li><p>인터페이스 분리 원칙(ISP, Interface Segregation Principle)</p>

<ul>
<li>인터페이스를 클라이언트에 특화되도록 분리시키라는 설계 원칙이다.</li>
<li>클라이언트 자신이 이용하지 않는 기능에는 영향을 받지 않아야 한다.</li>
</ul></li>
<li><p>의존 역전 원칙(DIP, Dependency Inversion Principle)</p>

<ul>
<li>의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것.</li>
</ul></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
