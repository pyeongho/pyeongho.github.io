<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>구글에서 만든 클린 아키텍처를 이해하고 알아보자</title>
	  <link>//google-todo-clean</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//google-todo-clean</guid>
	  <description><![CDATA[
	     <h3 id="section">구글 클린 아키텍처</h3>
<ul>
  <li>mvp 패턴만 적용 하더라도 구조가 이상해 보인다. 어떻게 하면 좀더 좋은 구조를 만들 수 있을까를 고민하던 중 클린아키텍처가 있었고 그중 구글이 만들 샘플 코드가 기본 라이브러리로만 만들어져서 마음에 들어서 분석하기 시작함</li>
</ul>

<h4 id="section-1">1. 구글 샘플 분석 하기</h4>
<ul>
  <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></li>
  <li>패키지 구분을 어떻게 했는지 직관적인 확인이 어렵다.(아직 적응 못함)</li>
  <li>한눈에 Uncle Bob clean architecture 레이어 확인 가능 할 줄 알았다.</li>
  <li>처음 보이는건 테스트 유닛만 보인다.</li>
  <li>그래도 구글이니 잘 만들었을거라 예상하고 다시 확인 시작</li>
  <li>참고로 구글 프로젝트라서 그런지 구아바를 사용 중
    <ul>
      <li><a href="https://github.com/google/guava">https://github.com/google/guava</a></li>
      <li>구글의 자바 라이브러리라고 생각하면 좋음</li>
      <li><a href="https://blog.outsider.ne.kr/710">구아바를 사용해야 하는 5가지 이유</a></li>
      <li><a href="http://heowc.tistory.com/61">구아바 맛보기</a></li>
    </ul>
  </li>
  <li>todo 앱 으로 할일을 만들고 체크해서 할일 완료 할일을 확인하는 앱이다.</li>
  <li>가장 기본이 되는 엔티티 레이어를 찾아보자</li>
  <li>패키지 이름에 없어서 구조를 확인해서</li>
  <li>아래와 같은 구조로 설계되어 있다</li>
  <li>패키지 이름에서 데이터 소스코드가 보임</li>
  <li>com.example.android.architecture.blueprints.todoapp.data.source</li>
  <li>감사하게 아래처럼 패키지 이름이 정의 되어 있습니다.</li>
  <li>설계와 동일하게 로컬과 리모트 패키지도 보이고</li>
  <li>엔티티 개념을 보이는 내용이 없다.</li>
  <li>클린아키텍처를 이해하기로 앱을 본질은 투두를 만들려고 했으니 기본적인 할일의 제목 할일의 설명 했다, 안했다. 에 대한 클래스가 있을거라 예상 했지만 해당 패키지에는 없다.</li>
  <li>위 데이터레이어 패키지를 확인해보니 Task 라는 클래스가 보인다.</li>
  <li>패키지는 com.example.android.architecture.blueprints.todoapp.tasks.domain.model;</li>
  <li>글을 좀더 자세히 읽어보니 MVP 모델의 중간에 도메인 레이어를 추가한 개념을 사용한걸로 보인다.
    <ul>
      <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a> 설명에 나와 있는데 안읽고 이제 서야 읽어봄</li>
      <li>위 샘플을 기반을 클린 아키텍처를 구현함</li>
      <li>Google todo mvp 를 살짝 보고 돌아옴</li>
    </ul>
  </li>
  <li>MVP 기반의 코드와 다른 점은 중간에 도메인 레이어를 추가 한 점입니다.</li>
  <li>데이터 &lt;- 도메인 &lt;- 프리젠터 레이어로 구성되어 있습니다.</li>
  <li>TasksDataSource(데이터레이어) &lt;- usecase(도메인레이어) &lt;- 프리젠테이션레이어(사용자)</li>
  <li>처음에는 별로 마음에 안들었지만 보다 보면 볼수록 마음에 듬</li>
  <li>정리중</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>클린아키텍처 듣기 전부터 고민하던 내용들</title>
	  <link>//whywhy</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-08T00:00:00+00:00</pubDate>
	  <guid>//whywhy</guid>
	  <description><![CDATA[
	     <h4 id="section">적용에 앞서 많은 고민중</h4>
<ul>
  <li>고민은 좋은거.</li>
</ul>

<h4 id="mvp-----">1. MVP등의 각종 패턴은 정말 만능일까? 의문점들</h4>
<ul>
  <li>장점은 매우 많습니다. 개발자가 많고 교육 시간이 많으면 하는게 좋습니다. 테스트하기에 좋다.</li>
  <li>의문점들
    <ul>
      <li>요즘 유행하는 MVP 패턴을 적용해 보려고 공부중 이지만 유지보수가 정말 편해 질까?</li>
      <li>MVP를 정말 열심히 해서 잘 적용하면 다른 사람들이 잘 알아 볼 수 있을까?</li>
      <li>만약 회사에 신입이 오면 코드가 잘 보고 비슷한 패턴으로 추가를 해줄까?</li>
      <li>정말 유지 보수가 쉬울까?</li>
    </ul>
  </li>
  <li>패턴을 적용하면 우선 많은 파일들이 생김
    <ul>
      <li>패키지 관리를 어떻게 해야 할까? ‘M’ 끼리 ‘V’ 끼리 ‘P’ 끼리</li>
      <li>액티비티는 뷰에 넣어야 하나?</li>
    </ul>
  </li>
  <li>패턴을 적용하면 거의 대부분이 DI라이브러를 추가하기 시작 함(dagger 등)
    <ul>
      <li>컴파일단계에서 추가되어서 기본 구조를 모르면 약간 많이 어색함</li>
      <li>스프링을 공부 했던 사람은 매우 편하다고 함</li>
      <li>C 를 기반으로 하는 저 같은 사람에게는 너무 어색함</li>
    </ul>
  </li>
  <li>지금 만드는 코드들을 보면 액티비티에 다 넣는다. 앱을 만들면서 아래 내용 말고는 없는거 같다. 앱 자체에 알고리즘이라고 할 만한 내용이 없다. 거의 모든일이 서버 의존적이다.
    <ul>
      <li>뷰 초기화(현재는 구글의 데이터 바인딩을 사용해서 안함)</li>
      <li>뷰 이벤트 등록</li>
      <li>http 리스너 등록</li>
    </ul>
  </li>
  <li>
    <p>서버개발자가 있어서 그럴수도 있지만 사내에 막강한 서버개발자가 있고 기본 구성이 서버1명 +앱1명 이라고 가정하고 앱을 만드는 경우를 가정하자. (매우 개인적인 생각들)</p>

    <ul>
      <li>회원 가입 시나리오 및 추가내용
        <ul>
          <li>앱 :  아이디 비밀번호를 서버에 전송</li>
          <li>서버 : 아이디 비밀번호 저장, 토큰 발급</li>
          <li>앱 : 토큰으로 API 접근</li>
          <li>간단하게 회원 가입가능하게 만들었다.</li>
          <li>사업팀에서 요청 사항이 생겼다.
            <ul>
              <li>카카오톡 회원 가입을 추가해 주세요.</li>
              <li>소셜로그인 기능도 결국 소셜의 아이디값을 콜백으로 받아서 이를 회원 가입 시나리오에 추가함, 비밀번호가 없음</li>
            </ul>
          </li>
          <li>매우 간단한 내용이고 다른일들이 발생해도 추가 하기 쉬운 일들이라고 생각한다.</li>
          <li>xml 에 아이디 비밀번호 입력란이 있고 회원 가입 버튼만 있으면 된다.</li>
          <li>카카오톡 버튼이 추가가 필요하면 카카오 sdk 호출이 하여 아이디를 받을수 있는 리스너를 등록한다.
            <ul>
              <li>성공 리스너에서 자사 회원 가입 API를 호출한다.</li>
            </ul>
          </li>
          <li>회원 가입을 시나리오를 가정해 보았고 추가되는 사항도 만들어 보았다.</li>
          <li>액티비티에 기본적인 클래스 분리와 함수 분리만 하였을때에도 변경 되는 로직에 큰무리 없이 쉽게 추가가 가능하다.</li>
          <li>MVP 패턴을 적용하려면 정확히 지킬건 지켜주고 싶다.
            <ul>
              <li>기존 포스트 내용들 처럼 액티비티에 뷰 와 프리젠터 파일 만들어 주고 액티비티와 연결해주고 각종 이벤트들을 연결해 준다.</li>
              <li>카카오 버튼이 하나 추가되어도 뷰와 프리젠터에 추가해서(어렵지는 않다.)</li>
              <li>카카오 SDK api를 이용해서 리스너 등록하고 결과를 처리하고</li>
              <li>프리젠터 임플리먼트에서 결과를 받아서 뷰 함수를 호출하여 화면 업데이트 하고 …</li>
            </ul>
          </li>
          <li>
            <p>위와 같은 상황이 거의 대부분 구성이었다. 앱에서 비지니스로직,모델 이라고 할 내용이 거의 없다.</p>
          </li>
          <li>통신 요청하고 결과를 화면에 보여준다. 이게 거의 대부분의 앱의 구성이었다.</li>
          <li>이렇다 보니 왜 mvp 를 써서 코드가 복잡해 보이게 하는지 잘 이해가 되지 않는다.</li>
          <li>유닛테스트를 만들기 쉽다.
            <ul>
              <li>위 내용중 유닛 테스트는 어떤게 있을까를 생각해 보자</li>
              <li>어떤게 나올까요 애매한 상황이라고 생각합니다.</li>
              <li>왜냐면 내용이 없습니다.</li>
              <li>그래도 뭔가 하고 싶어서..
                <ul>
                  <li>유닛테스트를 하는데 통신 API에 잘못된 값들만 넣어서 결과를 확인한다.
                    <ul>
                      <li>통신 테스트는 별개로 서버와 함께 하는게 좋을거 같은 생각, 내가 만든 기능테스트라고 하기에는 어려워 보임</li>
                    </ul>
                  </li>
                  <li>결과로 받은 내용이 화면에 나오는 부분을 확인한다.</li>
                </ul>
              </li>
              <li>mvp 패턴보다는 차라리 리액트개념을 넣어보자는게 나을거 같다.</li>
              <li>rx로만 앱을 구성하면 한눈에 보기좋고 수정들이 훨씬더 좋으니깐</li>
              <li>등등 하기싫은 이유들..</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>의문점이 생기는 이유는 하기 싫어서 핑계를 찾는거 같다.</li>
  <li>mvp 와 같은 패턴이 생기는 이유를 생각해 보았습니다.
    <ul>
      <li>UI 쪽과 그이외의 기능을 분리하고 UI와 기능의 연결을 단일 통로로 해결하자</li>
      <li>이게 핵심이라고 판단 하고 있습니다.</li>
      <li>mvc, mvvc, mvp 등등을 만들어서 패턴을 만들어 보는 이유는 조금더 규격화 해보는게 아닌지 생각합니다.</li>
      <li>여기서부터 또 다른의문점이 생기기 시작 했습니다.</li>
      <li>저렇게 화면에 보이는 부분만 따로 만들면 자바가 동작 하는 여러 플랫폼에서 동작 해야 하는거 아닐까?</li>
      <li>절대 안되죠 왜냐면 화면에 보이는 부분은 분리했지만 안드로이드 플랫폼 안에서 구분이니깐요</li>
      <li>그래서 이런 저런 생각하던중 클린아키텍처를 보고 기본부터 다시 생각하기 시작함</li>
      <li>드로이드나이츠의 클린아키텍처 세션을듣고 클린아키텍처 먼저 적용이 필요하다고 생각함</li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>드로이드나이츠 클린아키텍처 세션</title>
	  <link>//clean-acrhitecture</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-08T00:00:00+00:00</pubDate>
	  <guid>//clean-acrhitecture</guid>
	  <description><![CDATA[
	     <h4 id="section">드로이드나이츠 클린아키텍처</h4>
<ul>
  <li>드로이드나이츠 컨퍼런스 참가후 작성한 글 입니다.</li>
  <li>
    <p>그중 기억에 남는 클린 아키텍처를 정리 하였습니다.</p>
  </li>
  <li>
    <p><a href="https://speakerdeck.com/sunghyunzz/clean-architecture-in-android/">참고 : https://speakerdeck.com/sunghyunzz/clean-architecture-in-android</a></p>
  </li>
  <li>
    <p><a href="https://realm.io/kr/news/clean-architecture-in-android//">참고 : https://realm.io/kr/news/clean-architecture-in-android/</a></p>
  </li>
  <li><a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">참고 : https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html</a></li>
</ul>

<h4 id="section-1">1. 변화에 잘 적응하는 아키텍처</h4>
<ul>
  <li>이전 까지 했던 고민이 이걸로 보입니다. 어떤 변화든 잘 적응하는 코드를 만들자</li>
  <li>적응을 잘하는건 변하는 부분만 수정하자 &lt;- 이 부분이 중요</li>
  <li>변화에 잘 대응할 수 있다.</li>
  <li>= 변화에 따른 코드의 변경이 적다.
    <ul>
      <li>테이블 구조를 변경했는데 액티비티를 변경???</li>
    </ul>
  </li>
  <li>= 코드가 잘 분리되어있다.
    <ul>
      <li>잘 분리되어야지 그냥 분리하면 안됨</li>
    </ul>
  </li>
  <li>= 코드가 본질에 맞게 설계되어있다.
    <ul>
      <li>어떻게 레이아웃을 구성할까에 사용할까를 이용하면 안됨</li>
      <li>본질
        <ul>
          <li>도메인의 본질 : 기획자, 디자이너가, 사용자가 받아들이는 형태 일반적으로 보여지는 형태가 바뀌는거지 기본 개념이 변경되지 않음. 가계부를 예로 들어서 소비내역, 지출내역이라는 개념은 변경되지 않는다. 변경되는 어떻게 보여줄지 어떻게 필터링 할지가 변경 되는 거다. 도메인의 본질의 개념을 이해햐자.</li>
          <li>개발구조상의 본질 : 쉐어드프리퍼런스, 렘, sqlite 가 있는데 각가의 사용을 언제든 변경 없이 사용이 가능해야한다!?. 쉐어드 프리퍼런스를 수정 했는데 액티비티 수정을 해야 하면 코드가 잘못 된거다.</li>
          <li>안드로이드 구조 상의 본질 : 안드로이드 라이프사이클등</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="section-2">2. 기본 아키텍처</h4>
<ul>
  <li>엉클밥의 클린아키텍처 서버
    <ul>
      <li>
        <p><img src="https://drive.google.com/uc?id=0BwUadct9RzY3cmtQUjlkYlN5QTg" alt="" /></p>
      </li>
      <li>바깥쪽이 보여주는 부분</li>
      <li>가장안쪽이 개념단위
        <ul>
          <li>프레임워크 독립적
            <ul>
              <li>레트로핏 -&gt; 볼리 로 변경이 쉬움</li>
            </ul>
          </li>
          <li>테스트 가능</li>
          <li>ui 독립적</li>
          <li>db 독립적
            <ul>
              <li>서버에서 사용하던지, 내부에서 사용하던지 중요치 않음</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><img src="https://drive.google.com/uc?id=0BwUadct9RzY3YU9CMXN5S2FTRXc" alt="기본" />
    <ul>
      <li>안드로이드의 계층을 4개로 사용자에게 보여지는 로직과 관련된 Presentation 레이어</li>
      <li>DB, 네트워크를 포함한 데이터를 가져오는 Data 레이어</li>
      <li>사용자의 유스케이스로 분리되는 Domain 레이어
        <ul>
          <li>get트랜잭션</li>
        </ul>
      </li>
      <li>사용자의 개념을 정의하는 Entity 레이어</li>
      <li>이 네 레이어 간의 의존성은 위에서 아래로 발생해야 합니다. 즉, 가장 하단부의 레이어일 수록 가장 의존성이 낮아야 합니다. 가량 프리젠테이션 레이어는 데이터 레이어를 알지만 데이터는 프리젠테이션을 몰라야 하며, 이 덕분에 맨 아래의 엔티티는 순수한 Java 내지는 Kotlin 모듈이 될 수 있습니다. 이런 레이어의 분리 덕분에 본질을 정의할 때 어떤 데이터베이스에 저장될지, 어떤 뷰에서 보일지 고민하지 않고 Entity를 작성할 수 있고, 이에 대한 유스 케이스로 Domain 레이어를 작성할 수 있습니다. 또한 트랜잭션을 가져오는 것을 Data에서, 어떻게 보여줄 것인지를 Presentation에서 고민하면 됩니다.</li>
    </ul>
  </li>
</ul>

<h5 id="entity">2.1 Entity</h5>
<ul>
  <li>순수한 Java(Kotlin) 모듈</li>
  <li>Android와의 의존성이 없음
    <ul>
      <li>엔터티는 안드로이드의 파서러블을 사용할 수 없음</li>
    </ul>
  </li>
  <li>파서러블의 고민은 뷰 모델</li>
  <li>도메인(비즈니스 로직)에서 파생되는 개념을 표현</li>
  <li>(같은 서비스) Android - iOS - 서버 모두 동일한 형태</li>
  <li>아래가 샘플로 보여준 코틀린 코드 입니다. 자바는 코틀린은 모르지만 느낌상으로 같다고 만들어본 코드 입니다.</li>
  <li>가계부에서 소비내역 지출 내역의 변경되지 않는다.</li>
  <li>모든 내용이 엔터티에 포함되어 있다.</li>
  <li>TransactionType 엔터티로 선언한것이다.</li>
  <li>테이블간의 조인을 위해서 트랜잭션 아이디 등은 데이터베이스를 위함이기에 엔터티에서는넣으면 안됨<br />
  <script src="https://gist.github.com/pyeongho/88654a0893a13314cc12d77698a1fce0.js"></script></li>
</ul>

<h5 id="domain">2.2 Domain</h5>
<ul>
  <li>순수한 Java(Kotlin) 모듈</li>
  <li>Android와의 의존성이 없음</li>
  <li>Use Case</li>
  <li>Repository Interface 정의</li>
  <li>예
    <ul>
      <li>뱅크레포지토리를 주입을 받고</li>
      <li>인터페이스정의만 함</li>
      <li>하는 액션은 getAll</li>
      <li>BanksRepository 는 인터페이스로 존재</li>
      <li>도메인 레이어에 존재</li>
      <li>유스케이스는 데이터베이스를 고려하지 말자</li>
      <li>사고의 흐름<br />
<script src="https://gist.github.com/pyeongho/ca326b43ca93d0aaaa3925e9e38f49b3.js"></script></li>
    </ul>
  </li>
</ul>

<h5 id="data">2.3 data</h5>
<ul>
  <li>Repository의 실제 구현</li>
  <li>Data Source 의존성</li>
  <li>Android 의존성(어느순간 생기기 시작 가능성)</li>
  <li>데이터베이스 의존성이 생김</li>
  <li>도메인에서 정의한 인터페이스 구현이다. 렘 오브젝트를 엔터티로 변환 한다.</li>
  <li>렘이 sqlite로 변경되면 해당 레이어에서 처리 한다.</li>
  <li>똑같은 도메인의 유지하여 인테페이스를 네트워크로 변경가능하다.</li>
  <li>데이터모델은 렘이 아닌 응답값의 리스폰스로 변경하면 된다.</li>
  <li>예
    <ul>
      <li>
        <script src="https://gist.github.com/pyeongho/a621449874cd17a0c12041baf56fa835.js"></script>
      </li>
    </ul>
  </li>
</ul>

<h5 id="presentation">2.4 Presentation</h5>
<ul>
  <li>UI 레벨의 처리 (mvp, mvc)</li>
  <li>Android 의존성이 강함</li>
  <li>View와 Presenter</li>
  <li>함수 이름도 onViewCreated 처럼 각각의 행동에 맞게
    <ul>
      <li>onNextButtonClicked</li>
    </ul>
  </li>
  <li>내부 로직이 변경되어도 뷰 코드는 변겨이 안됨</li>
  <li>파서러블이 필요할때 프리젠터에서도 뷰 모델이 있고 엔터티를 매핑하여 사용한다.</li>
  <li>예
    <ul>
      <li>
        <script src="https://gist.github.com/pyeongho/618f625aa3f4a212f97197981ed5ea41.js"></script>
      </li>
      <li>
        <script src="https://gist.github.com/pyeongho/6b325023418e98ab2d0a496da91d4087.js"></script>
      </li>
    </ul>
  </li>
</ul>

<h4 id="section-3">3. 좋은 코드가 좋은 제품이다.</h4>
<ul>
  <li>각각의 레이어에서 모델이 존재해서 진입 장벽이 있지만 유지보수가 쉽다.</li>
</ul>

<h4 id="section-4">* 현장 메모</h4>
<ul>
  <li><img src="https://drive.google.com/uc?id=0BwUadct9RzY3cG41UmxfbEN4NjQ" alt="1페이지" /></li>
  <li><img src="https://drive.google.com/uc?id=0BwUadct9RzY3NTNGRVpKLXNSOTg" alt="2페이지" /></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
