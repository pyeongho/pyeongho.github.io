<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>버터나이프 없이 조금더 편하게 XML 의 객체를 사용해 보자</title>
	  <link>//no_more_findviewid</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-09T00:00:00+00:00</pubDate>
	  <guid>//no_more_findviewid</guid>
	  <description><![CDATA[
	     <h4>findViewById 없이 사용하기</h4>

<ul>
<li>앱을 만들면서 항상해야 하고 코드가 안 이쁘게 보이는걸 데이터 바인딩으로 해결해 보자</li>
</ul>

<h4>참고 사이트</h4>

<ul>
<li><a href="https://developer.android.com/topic/libraries/data-binding/index.html#studio_support">안드로이드 개발자 사이트 링크</a></li>
<li><a href="http://gogorchg.tistory.com/entry/Android-DataBinding-findViewById-%EC%9D%B4%EC%A0%9C-%EC%95%88%EB%85%95">GsBob 블로그</a></li>
</ul>

<h4>1. 버터 나이프 사용하면 좋긴 하지만 라이브러리 추가가 싫어 질때가 있어서 찾아보고 적용해 보았습니다.</h4>

<ul>
<li>gradle 추가 내용
<script src="https://gist.github.com/pyeongho/bc1b113241c5c8bfeffd4278be0a50a8.js"></script></li>
</ul>

<h4>2. 기존과 달라지는 방법</h4>

<ul>
<li><ol>
<li>레이아웃 파일 최상위 트리에 </li>
</ol>

<ul>
<li><script src="https://gist.github.com/pyeongho/90ec3c115ae62ecc49f398f40b55e8d6.js"></script></li>
</ul></li>
<li><ol>
<li>setContentView(R.layout.activity_main); 가 아래 처럼 변경 됩니다.</li>
</ol></li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">ActivityMainBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</code></pre></div>
<h4>3. 사용방법</h4>

<p><script src="https://gist.github.com/pyeongho/ec1987cb17dbfaf933b20c848edcaa4d.js"></script></p>

<h4>4. 그래들에 추가 하고 싱크 리빌드 한번 해주세요.</h4>

<ul>
<li>ActivityMainBinding 자동으로 생성 됩니다. </li>
<li>처음에는 이걸 못찾아서 당황 했지만 그래들 싱크 해지고 리빌드 해주면 자동 생성 됩니다.</li>
<li>생성 규칙은 아래 처럼 입니다. _ 자동으로 사라지고 카멜코딩룰을 적용해 줍니다.

<ul>
<li>중요한 점은  activity_main - &gt; ActivityMainBinding 형태로 변형 됩니다.</li>
<li>변수 이름도 해당 규칙이 적용 됩니다. </li>
<li>tv_hello -&gt; tvHello 로 변경 되면서 자동으로 카멜코딩도 적용줍니다.</li>
</ul></li>
</ul>

<h4>5. 리스트뷰 또는 리사이클러 뷰에서 사용</h4>

<ul>
<li>ListView 어댑터나 RecyclerView 어댑터 내에서 데이터 바인딩 항목을 사용 중인 경우 다음을 선호하는 개발자도 있습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">  <span class="n">ListItemBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">ListItemBinding</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">layoutInflater</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
  <span class="c1">//or</span>
  <span class="n">ListItemBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">layoutInflater</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</code></pre></div>
<h4>6. 위에서 사용을 레이아웃 바인딩이라고 하고 이제는 데이터 바이딩과 클릭이벤트</h4>

<ul>
<li>클래스를 사용하기 위해서 사용자 객체를 만든다.</li>
<li><script src="https://gist.github.com/pyeongho/8133adb6428e763ae8953edc56b5a680.js"></script></li>
<li><p>레이아웃 파일에 아래 내용을 추가
<script src="https://gist.github.com/pyeongho/f5603d32a1483c45e22754a6e051ae7a.js"></script></p></li>
<li><p>액티비티 자바 파일에</p></li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">   <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">"Test"</span><span class="o">,</span> <span class="s">"User"</span><span class="o">);</span>
   <span class="n">binding</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</code></pre></div>
<ul>
<li>텍스트뷰에 hello 에 Test 가 추가 된다.</li>
<li>안드로이드 개발자 사이트에 보면 클릭이벤트 리스너등 사용하면 좋을것들이 너무 많다.</li>
<li>심지어 import 룰 사용도 가능하다.</li>
<li>바인딩 기능을 모두 사용하면 레이아웃 파일을 보기 힘들어 질거 같다...</li>
</ul>

<h4>7. 항상 해줘야 하는 자바 코드를 추상화 클래스로 만들어 보면</h4>

<ul>
<li>baseactiviy 를 만듬

<ul>
<li><script src="https://gist.github.com/pyeongho/ac55d87b879282327bbb60c2ab5874de.js"></script></li>
</ul></li>
<li>MainActivity 에서 사용하는 법
<script src="https://gist.github.com/pyeongho/897a041cb9ee3d452f39ce7e7298d6c3.js"></script></li>
</ul>

<h4>8. fragment 에서 사용하기</h4>

<p><script src="https://gist.github.com/pyeongho/7dd19b6ae9edb65b0617f2975603cd3a.js"></script></p>

<h4>9. ViewHolder 에서 사용하기</h4>

<ul>
<li><script src="https://gist.github.com/pyeongho/dc4aa079ab29e6d30d6092f147c6a4d7.js"></script></li>
</ul>

<h4>*. 좋은점</h4>

<ul>
<li>외부 라이브러리를 사용 안해도 된다.</li>
<li>findViewById 사용을 안해도 된다.</li>
<li>심지어 변수 선언들도 안해도 된다.</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
