<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Rx 사용하면서 추가하거나 공부한 내용</title>
	  <link>//use-rx-android</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-14T00:00:00+00:00</pubDate>
	  <guid>//use-rx-android</guid>
	  <description><![CDATA[
	     <h3>rx 라이브러리를 사용하면서 사용하는 함수들</h3>

<ul>
<li>간단하게 성남도서관 검색 앱을 개발하면서 사용하는 함수들 입니다.</li>
<li>rxbiding 사용법</li>
</ul>

<h4>0. 목적</h4>

<ul>
<li>클린 + MVP + RX 를 사용하면서 익숙해지기</li>
<li>뷰에서는 이벤트에 대한 처리와 보여주는것만 처리</li>
<li>프리젠터에서는 유즈케이스를 이용한 API 접근</li>
<li>유즈케이스 옵저버를 반환</li>
<li>이로 인해서 구조가 무너지지 않은걸로 생각함</li>
</ul>

<h4>1. rxbiding</h4>

<ul>
<li>각종 view 들의 이벤트를 옵저버로 형태로 변환하여 편하게 사용 가능함</li>
<li><a href="https://github.com/JakeWharton/RxBinding">https://github.com/JakeWharton/RxBinding</a>

<ul>
<li>안드로이드 UI 위젯 사용을 위한 플랫폼 </li>
</ul></li>
<li><p>현재 사용을 위하여 추가한  라이브러리 </p>
<div class="highlight"><pre><code class="language-" data-lang="">compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'
</code></pre></div></li>
<li><p>사용은 연속 클릭 방지를 위해서 사용하였습니다. API 호출 까지 한번에 사용하면 좋을거 mvp 를 적용중이라 구조가 무너져서 사용 안하기로함 </p></li>
<li><p>연속 클릭 방지를 위한 RxBiding 사용</p>

<ul>
<li>뷰의 클릭에 사용할 버튼뷰를 넘기고</li>
<li>throttleFirst(1, TimeUnit.SECONDS) : (첫번쩨 이벤트를 실행후 1초이내로 들어오는 다른 이벤트는 버린다.)</li>
<li>throttleLast(1, TimeUnit.SECONDS) : 1초 동안 들어오는 이벤트중 마지막 이베트늘 실행</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">RxView</span><span class="o">.</span><span class="na">clicks</span><span class="o">(</span><span class="n">btnUseRxCallBack</span><span class="o">)</span>
      <span class="o">.</span><span class="na">throttleFirst</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
      <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
      <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
              <span class="n">o</span> <span class="o">-&gt;</span> <span class="n">mPresenter</span><span class="o">.</span><span class="na">clickedSearch</span><span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">()),</span>
              <span class="n">error</span><span class="o">-&gt;</span><span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span><span class="n">error</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</code></pre></div></li>
</ul>

<h4>2. 사용중인 RX 함수</h4>

<ul>
<li><p>filter</p>

<ul>
<li>아래 처럼 문자열이 있을때만 필터링을 추가할 수 있다. true 일때만 다음으로 </li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
      <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">text</span><span class="o">))</span>
</code></pre></div></li>
<li><p>map</p>

<ul>
<li>입력으로 들어 오는 값을 변경 할 수 있다. 다음으로 전달되는 문자열은 간장공장+query</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
      <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="s">"간장공장"</span><span class="o">+</span><span class="n">text</span><span class="o">)</span>
</code></pre></div></li>
<li><p>zip</p>

<ul>
<li>이걸 몰라서 한참 걸렸습니다.</li>
<li>이름의 느낌 처럼 압축 하는 느낌입니다.</li>
<li>일단 사용 코드 입니다.<br></li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="n">Observable</span><span class="o">.</span><span class="na">zip</span><span class="o">(</span>
      <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">),</span>
      <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">requestPage</span><span class="o">),</span>
      <span class="o">(</span><span class="n">queryText</span><span class="o">,</span><span class="n">requestPageText</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"phkim"</span><span class="o">,</span><span class="s">"query: "</span><span class="o">+</span><span class="n">queryText</span> <span class="o">+</span> <span class="s">"requestPage:"</span><span class="o">+</span><span class="n">requestPageText</span><span class="o">))</span>
</code></pre></div>
<ul>
<li>문자열 하나씩 입력되면 동식에 사용 가능하도록 변경해 줍니다.</li>
<li>배열이 들어가서 하나씩 연속으로 사용하는게 아닌 동시에 사용 가능합니다. </li>
</ul></li>
<li><p>flatMap</p>

<ul>
<li>결과를 옵저버 형태로 반환합니다.</li>
<li>다른 옵저버와 합칠때 사용합니다.</li>
<li>코드를 추가 하기에는 양이 너무 길어 져서</li>
<li>옵저버 A , 옵저버 B</li>
<li>실행중인 옵저버 A 스트림에 옵저버 B 를 추가 할 수 있습니다.</li>
<li>콜백에 콜백을 처리할때 사용하기 좋습니다.</li>
<li>예를 들어서 소셜 로그인 처리 할때 사용 하면 됩니다.

<ul>
<li>페이스북 로그인 -&gt; 콜백으로 결과 -&gt; 사용하는 서버로 결과 전달 -&gt; 페이스북과 사용중인 서버 로그인 완료</li>
<li>위와 같은 내요을 콜백에서 콜백을 호출하는 형태를 조금이나마 줄일 수 있다</li>
</ul></li>
</ul></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
