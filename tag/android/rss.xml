<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Jetpack 사용을 위한 기초 공부 AAC(ViewModel)</title>
	  <link>//aac_c2</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-10-29T00:00:00+00:00</pubDate>
	  <guid>//aac_c2</guid>
	  <description><![CDATA[
	     <h3>샘플은 구글</h3>

<ul>
<li><a href="https://github.com/googlesamples/android-sunflower">해바라기</a><br></li>
<li><a href="https://github.com/googlesamples/android-architecture-components">구글 샘플</a></li>
<li><a href="https://developer.android.com/topic/libraries/architecture/viewmodel">ViewModel</a></li>
</ul>

<h3>패턴의 변화</h3>

<ul>
<li>ViewModel클래스는 UI 관련 데이터를 라이프 사이클을 고려한 방식으로 저장하고 관리하도록 설계되었습니다. 이 ViewModel클래스를 사용하면 화면 회전과 같은 구성 변경시에도 데이터를 유지할 수 있습니다.</li>
</ul>

<h3>뷰모델</h3>

<ul>
<li>뷰모델은 옵저버패턴이라고 이해중</li>
<li>데이터가 변화 가능한곳에 콜백 같은 옵저버를 추가한다.</li>
<li>UI 쪽에서 해당 데이터의 콜백을 이용하여 업데이트 한다.</li>
<li>데이터를 콜백 형태로 묶어 놓기 때문에 위에서 말하는 UI 와 완전 분리가 가능하다.</li>
<li>예를 들어 특정 데이터가 변경 되면 콜백 발생하도록 하고 콜백에서 UI 업데이트를 처리한다.</li>
<li>이런 개념으로 이해 함</li>
<li>BasicRxJavaSampleKotlin 기본으로 공부 중</li>
<li>콜백을 넣어 주는 부분이 직접접이지 않아 이해 하고 있어야 이해가 된다.</li>
<li>아래와 같은 코드가 있을 때 Rx 를 이용해서  viewModel.userName()  변화를 감지하여 UI 업데이트 </li>
<li>클릭 이벤트에서 updateUserName() 를 호출 하면 DB 완료후 결과를 다시 읽어 UI 를 업데이트 함</li>
<li>하지만 뷰모엘을 이용하면 콜백으로 변경 내용을 확인 하므로 UI 업데이트에 대한 의존성을 없앨수 있다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">      override fun onStart() {
            super.onStart()
            // Subscribe to the emissions of the user name from the view model.
            // Update the user name text view, at every onNext emission.
            // In case of error, log the exception.
            disposable.add(viewModel.userName()
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({ this.user_name.text = it },
                            { error -&gt; Log.e(TAG, "Unable to get username", error) }))
        }

        override fun onStop() {
            super.onStop()

            // clear all the subscription
            disposable.clear()
        }

        private fun updateUserName() {
            val userName = user_name_input.text.toString()
            // Disable the update button until the user name update has been done
            update_user_button.isEnabled = false
            // Subscribe to updating the user name.
            // Enable back the button once the user name has been updated
            disposable.add(viewModel.updateUserName(userName)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({ update_user_button.isEnabled = true },
                            { error -&gt; Log.e(TAG, "Unable to update username", error) }))
        }

</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Jetpack 사용을 위한 기초 공부 AAC(Room)</title>
	  <link>//aac_c1</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-10-29T00:00:00+00:00</pubDate>
	  <guid>//aac_c1</guid>
	  <description><![CDATA[
	     <h3>샘플은 구글</h3>

<ul>
<li><a href="https://github.com/googlesamples/android-sunflower">해바라기</a><br></li>
<li><a href="https://github.com/googlesamples/android-architecture-components">구글 샘플</a></li>
<li><a href="https://developer.android.com/training/data-storage/room/defining-data">Room 엔터티</a></li>
<li><a href="https://www.bsidesoft.com/?p=6003">비사이드소프트</a><br></li>
</ul>

<h3>샘플 내용 요약</h3>

<ul>
<li>sunflower, 구글 AAC 샘플을 적용하기전 기초지식 부터</li>
<li>짧은 샘플이지만 기본적인 내용부터 알아야 가능 </li>
</ul>

<h3>라이브데이터</h3>

<ul>
<li>기존 데이터를 DB 에 넣어 오프라인에서도 기존데이터는 볼수 있도록 하자</li>
<li>항상 최신데이터가 필요 할 수도 있지만 예전 데이터라도 보고 싶을때가 있다. </li>
</ul>

<h3>기초 지식 1: ROOM</h3>

<ul>
<li>라이브 데이터를 사용하기 위해서 기초인 room<br></li>
<li>일반적인 DB 에서는 테이블을 만들어 사용하지만 room 은 orm 형태로 클래스를 만들어 사용한다.</li>
<li>아래와 같이 테이블을 만들어 사용 해야 한다.</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    create table Items(
        id int NOT NULL,
        name varchar(255) NOT NULL,
        description varchar(255),
        price int,
        PRIMARY KEY (id)
    )
</code></pre></div>
<ul>
<li>Room 의 Entity 형태로 변경하면 아래와 같이 클래스 선언후 필요한 어노테이션을 추가하면 된다.</li>
<li>참고내용으로 실제 적용 할때는 찾아서 하는게 좋습니다.

<ul>
<li>어노테이션들

<ul>
<li>@Entity(primaryKeys = {“firstName”, “lastName”})  : 복합키 </li>
<li>@ColumnInfo(name = “first_name”)String firstName : 객체 필드명과 실제 테이블 필드명이 다를 때의 처리</li>
<li>@Ignore Bitmap picture : 무시할 객체의 필드</li>
<li>@Entity(indices = {@Index(“name”), @Index(value = {“last_name”, “address”})}) : 인덱스설정 </li>
<li>@Entity(foreignKeys = @ForeignKey(entity = User.class, parentColumns = “id”, childColumns = “user_id”)) : 외래키 설정 </li>
<li>@Embedded OtherEntity data : 중첩엔티티로 표현하기</li>
</ul></li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    @Entity(tableName = "Items")
    data class ItemEntity(
        @PrimaryKey
        val id:Int,
        val name:String ,
        val description:String, 
        val price:Int
    )
</code></pre></div>
<h3>DAO : 쿼리 인터페이스</h3>

<ul>
<li>Room 전체 적인 DB 개념이니 데이터의 추가 삭제를 담당 하는 인터페이스</li>
<li>SQLite3 를 사용하기에 쿼리문을 직접 사용하거나 제공 되는 어노테이션을 사용하면 된다.</li>
<li>아래는 오너테이션 사용 관련 자바 입니다. 공부하는 코드가 자바라 </li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  // 예제 1
  @Dao
  public interface MyDao {
      @Query("SELECT * FROM user")
      public User[] loadAllUsers();
  }

  // 예제 2
  @Dao
  public interface MyDao {
      @Delete
      public void deleteUsers(User... users);
  }

  // 예제 2
  @Dao
  public interface MyDao {
      @Update
      public void updateUsers(User... users);
  }

  // 예제 3 
  @Dao
  public interface MyDao {
      @Insert(onConflict = OnConflictStrategy.REPLACE)
      public void insertUsers(User... users);

      @Insert
      public void insertBothUsers(User user1, User user2);

      @Insert
      public void insertUsersAndFriends(User user, List&lt;User&gt; friends);
  }
</code></pre></div>
<h3>엔터티, DAO 를 이용한 데이터베이스 생성</h3>

<ul>
<li>빌더 패턴이 적용된 데이터 베이스</li>
<li>여기 까지는 기본적인 내용으로 실제 적용은 다른 포스트에서...</li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">    @Database(entities = arrayOf(User::class), version = 1)
    abstract class UsersDatabase : RoomDatabase() {

        abstract fun userDao(): UserDao

        companion object {

            @Volatile private var INSTANCE: UsersDatabase? = null

            fun getInstance(context: Context): UsersDatabase =
                    INSTANCE ?: synchronized(this) {
                        INSTANCE ?: buildDatabase(context).also { INSTANCE = it }
                    }

            private fun buildDatabase(context: Context) =
                    Room.databaseBuilder(context.applicationContext,
                            UsersDatabase::class.java, "Sample.db")
                            .build()
        }
    }


</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 Jetpack 중 네비게이션 에디터 사용</title>
	  <link>//navigation-editor</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-07-03T00:00:00+00:00</pubDate>
	  <guid>//navigation-editor</guid>
	  <description><![CDATA[
	     <h3>안드로이드 Jetpack</h3>

<ul>
<li>가중 눈에 가는 네비게이션 에디터를 사용해 보려고 했지만 사용법은 금방 나오지만 어떻게 해야 에디터가 나오는지 안보인다.</li>
<li>File -&gt; Settings -&gt; Experimental -&gt; Enable Navigation Editor 을 활성화 하자<br></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>ConstraintLayout 이제 사용 할 듯</title>
	  <link>//constraint</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-07-03T00:00:00+00:00</pubDate>
	  <guid>//constraint</guid>
	  <description><![CDATA[
	     <h3>출처</h3>

<ul>
<li><a href="https://android-developers.googleblog.com/2017/08/understanding-performance-benefits-of.html">구글 블로그 원문</a></li>
<li><a href="http://abandonia.tistory.com/1">구글 블로그 번역문</a></li>
</ul>

<h3>주저리</h3>

<ul>
<li>언제 부턴가 새로운 앱을 만들면  ConstraintLayout 으로 hello world 나왔음에도 불구 하고   RelativeLayout 과 LinearLayout 를 이용하여 디자인을 구성 하였다. 잘 사용 하고 있는데 또 나와서 공부 하기 귀찮아서 ㅎㅎㅎ</li>
</ul>

<h3>성능 이슈</h3>

<ul>
<li> ConstraintLayout 이걸 사용 하면 많은 이야기가 있지만 일단 기존 방법 보다 빠르다고 한다. 트리구조의 뷰를 찾아서 계산 하는게 아니라 1 depth 구조로  만드는게 핵심 처럼 보인다. 수평적인 계층 구조라고 한다. 그리고 실제 테스트 했을때 빨라 졌다고 합니다.</li>
<li><p>테스트 소스</p>

<ul>
<li><a href="https://github.com/googlesamples/android-constraint-layout-performance">테스트 샘플코드 깃허브</a></li>
</ul></li>
<li><h3>애니메이션</h3></li>
<li><p>구글에서 제공하는 샘플이 있어서 공부도 할겸 다운 받아서 공부</p>

<ul>
<li><a href="https://github.com/googlesamples/android-ConstraintLayoutExamples">구글 샘플 깃허브</a></li>
</ul></li>
<li><p>레이아웃도 레이아웃 이지만 MotionLayout 이용한 샘플이 사용 할 수 밖에 없는 이유를 제공 했습니다. </p></li>
<li><p>일단 부드러운 애니메이션이 있으니 무조건 사용하기로 결심   </p></li>
</ul>

<h3>문제점</h3>

<ul>
<li>tool 에서 제공해주는 ConstraintLayout 컨버팅 기능을 사용하려고 했지만 레이아웃이 죄다 깨지는 현상이 발생 했습니다.</li>
<li>역시 한땀 한땀 공부 하며 바꿔야 겠습니다.</li>
</ul>

<h3>현재까지 팁</h3>

<ul>
<li>마법사 지팡이를 잘 누르자 </li>
<li>정렬 기능은 너무 좋은것(마치 포토샵의 정릴 기능 처럼)</li>
<li>팩 기능, 여러가지를 묶어서 사용 할때 좋아요</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>푸시 내용 업데이트</title>
	  <link>//push2</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-05-24T00:00:00+00:00</pubDate>
	  <guid>//push2</guid>
	  <description><![CDATA[
	     <h3>푸시 적용</h3>

<ul>
<li><a href="https://pyeongho.github.io/push">https://pyeongho.github.io/push</a></li>
<li><p>위 글에서 푸시 관련 내용을 작성 하였습니다.</p></li>
<li><p>좀더 명확 하게 하기 위한 내용입니다.</p></li>
<li><p>푸시 발송 json 내용에 notification 있으면 백그라운드 앱에서는 os 가 처리합니다.</p></li>
<li><p>기존 처럼 직접 노티피케이션을 만들어서 사용 하고 싶을때는 꼭  notification 내용을 제거 하고 data 만 보내서 원하는 형태로 사용하면 됩니다. </p>

<ul>
<li>이미지를 노티피케이션을 만들거나 </li>
<li>확장 되는 이미지를 만들거나<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>윈도우즈에서 파이어베이스 CLI 에러</title>
	  <link>//firebase_cli_error</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-03-08T00:00:00+00:00</pubDate>
	  <guid>//firebase_cli_error</guid>
	  <description><![CDATA[
	     <h3>윈도우즈에서 파이어베이스를 이용해서 개발중 발생한 버그</h3>

<ul>
<li>기본적인 파이어베이스 CLI 사용법 아닙니다.</li>
</ul>

<h4>firebase deploy 진행중 발생하는 에러</h4>
<div class="highlight"><pre><code class="language-" data-lang="">    i  deploying functions, hosting
    Running command: npm --prefix $RESOURCE_DIR run lint
    npm ERR! path D:\abcd\$RESOURCE_DIR\package.json
    npm ERR! code ENOENT
    npm ERR! errno -4058
    npm ERR! syscall open
    npm ERR! enoent ENOENT: no such file or directory, open 'D:\abcd\$RESOURCE_D
    IR\package.json'
    npm ERR! enoent This is related to npm not being able to find a file.
    npm ERR! enoent
    ...
</code></pre></div>
<ul>
<li>윈도우에서 최종 배포 명령을 하니 위처럼 에러가 발생 여기 저기 찾아 보니 수정을 해야함 

<ul>
<li>$RESOURCE<em>DIR -&gt; %RESOURCE</em>DIR%</li>
<li>윈도우와 리눅스계열 컴퓨터의 경로 설정 방법에 의한 차이로 보입니다. </li>
<li>firebase.json 파일을 열어서 위 내용처럼 바꾸어 주면 됩니다.</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>코틀린 KTX</title>
	  <link>//kotlin_ktx</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-03-05T00:00:00+00:00</pubDate>
	  <guid>//kotlin_ktx</guid>
	  <description><![CDATA[
	     <h3>코틀린 개발용 확장 라이브러리 KTX 에대한 지극히 개인적인 생각</h3>

<ul>
<li><p>코틀린 KTX 내용 블로그</p>

<ul>
<li><a href="https://android-developers.googleblog.com/2018/02/introducing-android-ktx-even-sweeter.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+blogspot%2FhsDu+%28Android+Developers+Blog%29">KTX 안드로이드 구글 블로그 영문</a></li>
<li><a href="https://developers-kr.googleblog.com/2018/02/introducing-android-ktx-even-sweeter-kotlin-development-for-android.html">KTX 안드로이드 구글 블로그 번역리뷰</a></li>
<li>샘플만 사용해 본 느낌 이고 현재 개발 환경으로 인해서 생각한 내용 입니다. 한줄로 나온 부분은 잘 확인해 보셔야 합니다. </li>
</ul></li>
</ul>

<p>| kotlin | kotlin with KTX |
| ---- | ---- |
|val uri = Uri.parse(myUriString) | val uri = myUriString.toUri() |
|sharedPreferences.edit().putBoolean(key, value).apply() | sharedPreferences.edit { putBoolean(key, value) } |</p>

<ul>
<li>위 내용 이외에 많은 부분이 있습니다.</li>
<li>기존 코틀린 또는 람다 표기법보다 코드 양이 더욱 줄어 들고 어떤 코드는 직관적 입니다.( =&gt; toUri())</li>
<li>하지만 이런 내용들은 API를 코틀린의 기능을 이용해서 확장 시킨 기능이어서 새롭게 시작 개발자 들에게 좋지 못하다고 생각합니다.(교육을 못하는 개발환경)</li>
<li>toUri() 를 사용할때 기본적인 함수를 모를때 발생 할 수 있는 일들, sharedPreferences apply 를 사용 안 할 가능성등 많은 부분이 초급 개발자들이 사용 하면 추후 발생 할 내용 들이 부담 스럽게 다가 옵니다. </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>애플리케이션 Foreground 확인</title>
	  <link>//lifecycle</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-02-12T00:00:00+00:00</pubDate>
	  <guid>//lifecycle</guid>
	  <description><![CDATA[
	     <h3>애플리케이션이 Foreground 를 확인 해야 할 때는 많습니다.</h3>

<ul>
<li>안드로이드 사용자중 홈버튼으로 앱을 종료 시키는 사람이 의외로 많다.</li>
<li>백그라운드 동작을 허용하지 않기 위해서는 포그라운드 인지 백그라운드 인지 확인을 해야 한다.</li>
<li>api 26이 나오면서 권한 없이 사용 가능한 방법이 생겼다.</li>
<li>Application.ActivityLifecycleCallbacks 를 이용하는 방법</li>
<li>Application 상속받은 클래스에서 위 클래스를 구현해 주면 됩니다. </li>
<li>사용은 애플리케이션 상속 받은 코드에서 init 을 호출해서 사용하면 됩니다.</li>
<li><div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">
    class OnApplication: Application() {
        override fun onCreate() {
            super.onCreate()
            Foreground.init(this)

        }
    }

</code></pre></div></li>
<li><p>애프리케이션 생성자에서 클래스를 초기화 합니다.</p></li>
<li><p>싱글톤 클래스라서 사용은 편하게 하시면 됩니다. 아래 처럼 원하는걸로 편하게 사용하면 됩니다.</p>

<ul>
<li>Foreground.get().isBackground</li>
<li>Foreground.get().appStatus</li>
</ul></li>
<li><p>전체 코드는 아래에 있습니다.</p>

<ul>
<li>간단한 동작 설명<br>

<ul>
<li>onActivityStarted 추가 되면 카운트 +1</li>
<li>onActivityStopped 추가 되면 카운트 -1</li>
<li>카운트가 0 이면 백그라운드</li>
<li>카운트가 1 보다 크면 포그라운드</li>
<li>카운트가 1 이면 포그라운드 전환<br></li>
</ul></li>
</ul></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/59944e4e9e8d76f45c6f395dccd1d8e8.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 immersive</title>
	  <link>//immersive</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-01-26T00:00:00+00:00</pubDate>
	  <guid>//immersive</guid>
	  <description><![CDATA[
	     <h3>갤럭시 s8 의 이상한 기능</h3>

<ul>
<li>갤럭시 s8 에서 특정 설정을 하면 소트키가 항상 숨겨지는 모드가 존재 해서 내가 추가한 내용은 아니지만 마치 이머시브 모드 처럼 동작 하는 현상</li>
<li>애플리케이션 개발 중에는 몰라도 될거 같지만 막상 개발하다 보면 알아야 도움 되는 내용입니다.</li>
<li><p>알아야 하는 내용</p>

<ul>
<li>애플리케이션 시작시 소프트키가 활성화 되어 있는지 체크 해야 하는부부</li>
<li>에플리케이션 실행 중 변경 되는 내용 이렇게 2가지 경우가 있습니다.</li>
</ul></li>
<li><p>애플리케이션 시작하면서 확인 하는 코드 </p>

<ul>
<li>enable 가 0 보다 크면 소프트 키가 안보이는 상태 입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    var enable = 0
    try {
        enable = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            Settings.Global.getInt(activity.contentResolver, "navigationbar_hide_bar_enabled")
        } else {
            -1
        }
    }catch (e: Exception){
    }
</code></pre></div></li>
<li><p>런타임에서 리스너로 확인 하는 방법</p>

<ul>
<li>arg 가 2일때 소프트 키가 안보이는 상태 입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    val decorView = activity.window.decorView
    decorView.setOnSystemUiVisibilityChangeListener {arg -&gt;
        log.d("Current arg: " + arg)
        if(arg == 2){
          //TODO 소포트키 안보임
        }else{
          //TODO 소포트 보임
        }
    }
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 스와이프백</title>
	  <link>//swipe_back</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-01-26T00:00:00+00:00</pubDate>
	  <guid>//swipe_back</guid>
	  <description><![CDATA[
	     <h3>조금더 편한 액티비 종료</h3>

<ul>
<li>손가락으로 드래그하여 액티비티 종료 하는 라이브러리 입니다.</li>
<li>iOS에서 자주 사용 되지만 안드로이드에서도 사용 할 수 있습니다.</li>
<li>아래가 오리지널 코드 위치 입니다.</li>
<li><a href="https://github.com/liuguangqiang/SwipeBack">스와이프백</a></li>
<li>코드분석은 setContentView 를 할때 루트에 스와이프 레이아웃을 추가하여 터치 이벤트를 전역으로 사용 할 수 있게 하여 드래그로 액티비티를 종료 할 수 있도록 한 라이브러리 입니다.</li>
</ul>

<h3>현재 제가 사용하는 코드는 프래그먼트 기반이라서 동작하지 않았습니다.</h3>

<ul>
<li>약간의 변경으로 프래그먼트에서 동작 하도록 하였습니다.</li>
<li>드래그로 완료시 액티비티 종료코드를 리스너로 등록하여 콜백을 받음</li>
<li>콜백 받은곳에서 프래그먼트를 제거 하는 형태 입니다.</li>
</ul>

<h3>SwipeBackLayout 추가</h3>

<ul>
<li>아래 코드를 기본코드에서 변경</li>
<li><script src="https://gist.github.com/pyeongho/de9bfd8d2fd3468f65c102284a25dc31.js"></script></li>
</ul>

<h3>SwipeBackFragment 추가</h3>

<ul>
<li>SwipeBackActivity 를 조금만 변경하여 아래 처럼 만들었습니다.</li>
<li>사용할 프래그먼트에서 SwipeBackFragment를 상속 받고 아래 처럼 사용하면 됩니다. </li>
<li>아래와 같이 setContentView 를 호출 하여 사용하면 동작 합니다.</li>
<li><p>기본적인 사용법은 swipeBack 과 동일합니다.</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">
  override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        setContentView(R.layout.layout_notice)
        setDragEdge(SwipeBackLayout.DragEdge.TOP) // 스와이프 방향
        return super.onCreateView(inflater, container, savedInstanceState)
    }

</code></pre></div></li>
<li><script src="https://gist.github.com/pyeongho/80330d4b1218e4aeaf67ba8fd7327acc.js"></script> </li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
