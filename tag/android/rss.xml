<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Rx 사용하면서 추가하거나 공부한 내용</title>
	  <link>//use-rx-android</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-14T00:00:00+00:00</pubDate>
	  <guid>//use-rx-android</guid>
	  <description><![CDATA[
	     <h3 id="rx----">rx 라이브러리를 사용하면서 사용하는 함수들</h3>
<ul>
  <li>간단하게 성남도서관 검색 앱을 개발하면서 사용하는 함수들 입니다.</li>
  <li>rxbiding 사용법</li>
</ul>

<h4 id="section">0. 목적</h4>
<ul>
  <li>클린 + MVP + RX 를 사용하면서 익숙해지기</li>
  <li>뷰에서는 이벤트에 대한 처리와 보여주는것만 처리</li>
  <li>프리젠터에서는 유즈케이스를 이용한 API 접근</li>
  <li>유즈케이스 옵저버를 반환</li>
  <li>이로 인해서 구조가 무너지지 않은걸로 생각함</li>
</ul>

<h4 id="rxbiding">1. rxbiding</h4>
<ul>
  <li>각종 view 들의 이벤트를 옵저버로 형태로 변환하여 편하게 사용 가능함</li>
  <li><a href="https://github.com/JakeWharton/RxBinding">https://github.com/JakeWharton/RxBinding</a>
    <ul>
      <li>안드로이드 UI 위젯 사용을 위한 플랫폼</li>
    </ul>
  </li>
  <li>
    <p>현재 사용을 위하여 추가한  라이브러리</p>

    <div class="highlighter-rouge"><pre class="highlight"><code>compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'
</code></pre>
    </div>
  </li>
  <li>사용은 연속 클릭 방지를 위해서 사용하였습니다. API 호출 까지 한번에 사용하면 좋을거 mvp 를 적용중이라 구조가 무너져서 사용 안하기로함</li>
  <li>연속 클릭 방지를 위한 RxBiding 사용
    <ul>
      <li>뷰의 클릭에 사용할 버튼뷰를 넘기고</li>
      <li>throttleFirst(1, TimeUnit.SECONDS) : (첫번쩨 이벤트를 실행후 1초이내로 들어오는 다른 이벤트는 버린다.)</li>
      <li>
        <p>throttleLast(1, TimeUnit.SECONDS) : 1초 동안 들어오는 이벤트중 마지막 이베트늘 실행</p>

        <p>RxView.clicks(btnUseRxCallBack)<br />
    .throttleFirst(1, TimeUnit.SECONDS)<br />
    .observeOn(AndroidSchedulers.mainThread())<br />
    .subscribe(<br />
            o -&gt; mPresenter.clickedSearch(editText.getText().toString()),<br />
            error-&gt;Log.e(“error”,error.toString()));</p>
      </li>
    </ul>
  </li>
</ul>

<h4 id="rx-">2. 사용중인 RX 함수</h4>
<ul>
  <li>filter
    <ul>
      <li>
        <p>아래 처럼 문자열이 있을때만 필터링을 추가할 수 있다. true 일때만 다음으로</p>

        <p>Observable.just(query)<br />
    .filter(text -&gt; !TextUtils.isEmpty(text))</p>
      </li>
    </ul>
  </li>
  <li>map
    <ul>
      <li>
        <p>입력으로 들어 오는 값을 변경 할 수 있다. 다음으로 전달되는 문자열은 간장공장+query</p>

        <p>Observable.just(query)<br />
    .map(text -&gt; “간장공장”+text)</p>
      </li>
    </ul>
  </li>
  <li>zip
    <ul>
      <li>이걸 몰라서 한참 걸렸습니다.</li>
      <li>이름의 느낌 처럼 압축 하는 느낌입니다.</li>
      <li>
        <p>일단 사용 코드 입니다.</p>

        <p>Observable.zip(<br />
    Observable.just(query),<br />
    Observable.just(requestPage),<br />
    (queryText,requestPageText) -&gt; Log.d(“phkim”,”query: “+queryText + “requestPage:”+requestPageText))</p>
      </li>
      <li>문자열 하나씩 입력되면 동식에 사용 가능하도록 변경해 줍니다.</li>
      <li>배열이 들어가서 하나씩 연속으로 사용하는게 아닌 동시에 사용 가능합니다.</li>
    </ul>
  </li>
  <li>flatMap
    <ul>
      <li>결과를 옵저버 형태로 반환합니다.</li>
      <li>다른 옵저버와 합칠때 사용합니다.</li>
      <li>코드를 추가 하기에는 양이 너무 길어 져서</li>
      <li>옵저버 A , 옵저버 B</li>
      <li>실행중인 옵저버 A 스트림에 옵저버 B 를 추가 할 수 있습니다.</li>
      <li>콜백에 콜백을 처리할때 사용하기 좋습니다.</li>
      <li>예를 들어서 소셜 로그인 처리 할때 사용 하면 됩니다.
        <ul>
          <li>페이스북 로그인 -&gt; 콜백으로 결과 -&gt; 사용하는 서버로 결과 전달 -&gt; 페이스북과 사용중인 서버 로그인 완료</li>
          <li>위와 같은 내요을 콜백에서 콜백을 호출하는 형태를 조금이나마 줄일 수 있다</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Daum 이미지 검색을 내가 좋아하는 형태로 변경해 보자</title>
	  <link>//my-clean-mvp</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-07T00:00:00+00:00</pubDate>
	  <guid>//my-clean-mvp</guid>
	  <description><![CDATA[
	     <h3 id="gdg-atsl-on-mvp-">구글 샘플과 GDG-ATSL-ON-MVP를 이용</h3>
<ul>
  <li>2개의 코드 모두 너무 좋지만 앞으로를 위해서 필요한 부분을 변경해 보려고 합니다. 남들이 보면 이상해 보일수도 있겠지만 구조와 라이브러리르 조금 추가 및 변경해서 원하는 형태로 변경합니다.</li>
  <li>원래 코드도 좋지만 이상하게 마음에 안드는 부분을 변경해보려고 합니다.
    <ul>
      <li><a href="https://github.com/ZeroBrain/GDG-ATSL-ON-MVP">https://github.com/ZeroBrain/GDG-ATSL-ON-MVP</a></li>
    </ul>
  </li>
</ul>

<h4 id="section">1. 구글샘플 기반으로 앱을 생성하고 제로브레인님의 다음 이미지 검색기능을 추가 하는 형태로 진행</h4>
<ul>
  <li>기본 샘플 생성</li>
  <li>버터나이프, 데이터바인딩 은 넣으면 코드가 짧아 지지만 사용 안합니다.</li>
  <li>구글 샘플이 좋았던 점은 거의 모든 뷰를 프래그먼트에서 구현 하였던 점입니다.
    <ul>
      <li>프로가드 적용시 액티비티 코드는 거의 원형이 남아 있는데 이를 프래그먼트에서 구현 하니 프로가드 적용이 조금더 강력한 느낌 이었습니다.</li>
    </ul>
  </li>
  <li>구글 샘플에서 기본적으로 필요한 것들을 복사해옴</li>
  <li>rx 를 추가하면 많이 없어질걸로 예상</li>
</ul>

<h4 id="section-1">2. 진행 순서</h4>
<ul>
  <li>샘플앱 기본을 정한다.(나중에 해도 됨)</li>
  <li>MVP 구현은 거의 구글샘플을 기반으로 한다.(프래그먼트)</li>
  <li>클린아키텍처 기반으로 앱의 목적을 정한다.
    <ul>
      <li>이미지 검색 원하는 문구로 이미지를 검색하고 결과를 클릭하면 이미지가 포함된 URL을 브라우저를 통해서 연다.</li>
      <li>엔티티 설정 -&gt;  이미지URL, 이미지 타이틀, 이미지를 포함한 오리지널 URL</li>
    </ul>
  </li>
  <li>UseCase 를 만든다.
    <ul>
      <li>문자열 입력에 따른 결과값 반환 하는 케이스</li>
      <li>대략 =&gt; GetImages(String query)  이런 함수로 예상</li>
    </ul>
  </li>
  <li>UseCase가 가지고올 레포지토리 생성</li>
  <li>원래 구글샘플에 rx 통신 모듈 추가</li>
</ul>

<h4 id="section-2">3. 여러번 반복 하니 편해진다.</h4>
<ul>
  <li>아직 대거를 사용하진 못했지만 기본 싱글톤 인젝션 방식으로 구현되어 있어서 대거를 추가하기 쉬어 보인다.</li>
  <li>기존에는 다음 API 처리문과 use 케이스가 결합되어 있어서 변경 하면 여기 저기 변경이 많이 발생했지만</li>
  <li>지금은 다음에서 네이버로 변경 된다 하더라고 레포지토리만 변경하고 해당 API맞게 받은후 동일한 usecase 를 사용하기에 쉽게 변경 가능하다.</li>
</ul>

<h4 id="mvp--">4. mvp 의 장점</h4>
<ul>
  <li>당연한거지만 다른 레이어와 완전히 분리되어 있어서 로그만 출력하고 추후 개발이 쉽다.</li>
  <li>UI 쪽만 따로 개발 및 테스트가 가능하다.</li>
</ul>

<h4 id="section-3">5. 구글 샘플의 콜백</h4>
<ul>
  <li>use case 콜백은 상당히 유용하다.</li>
  <li>처음에는 사용 안하려고 했지만 기본 언어 이외에 사용하는것도 거의 없다.</li>
  <li>android.os.Handler 만 사용하고 있다.</li>
</ul>

<h4 id="rx--">6. Rx 콜백으로 변경하기</h4>
<ul>
  <li>기존 rx 샘플에 만들어 놓은 apicallback 를 이용해 보겠습니다.
    <ul>
      <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
      <li>폴더이름 Retorfit2T</li>
    </ul>
  </li>
  <li>apicallback 클래스를 복사해서 사용하기</li>
</ul>

<h4 id="section-4">7. 인젝션</h4>
<ul>
  <li>현재 인젝션을 싱글톤으로 주입 하는 방법을 선택했습니다.</li>
  <li>이를 대거를 이용하는 방법은 추후 진행 하겠습니다.</li>
</ul>

<h4 id="section-5">8. 샘플</h4>
<ul>
  <li>입력창에서 문자를 입력하면 핸들러콜백을 이용하는 방식</li>
  <li>버튼을 누르면 rx 를 이요하는 방법 입니다.</li>
  <li>샘플 코드
    <ul>
      <li>MyCleanMvp 폴더입니다.</li>
      <li>프로젝트 그래들에 다음 API 키를 추가해야합니다.</li>
      <li><a href="https://github.com/pyeongho/Sample.git">https://github.com/pyeongho/Sample.git</a></li>
      <li><img src="http://dl.dropbox.com/s/nnzymkk8a9f3vb3/201705090718.png" alt="" /></li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>구글에서 만든 클린 아키텍처를 이해하고 알아보자</title>
	  <link>//google-todo-clean</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//google-todo-clean</guid>
	  <description><![CDATA[
	     <h3 id="section">구글 클린 아키텍처</h3>
<ul>
  <li>mvp 패턴만 적용 하더라도 구조가 이상해 보인다. 어떻게 하면 좀더 좋은 구조를 만들 수 있을까를 고민하던 중 클린아키텍처가 있었고 그중 구글이 만들 샘플 코드가 기본 라이브러리로만 만들어져서 마음에 들어서 분석하기 시작함</li>
</ul>

<h4 id="section-1">1. 구글 샘플 분석 하기</h4>
<ul>
  <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></li>
  <li>패키지 구분을 어떻게 했는지 직관적인 확인이 어렵다.(아직 적응 못함)</li>
  <li>한눈에 Uncle Bob clean architecture 레이어 확인 가능 할 줄 알았다.</li>
  <li>처음 보이는건 테스트 유닛만 보인다.</li>
  <li>그래도 구글이니 잘 만들었을거라 예상하고 다시 확인 시작</li>
  <li>참고로 구글 프로젝트라서 그런지 구아바를 사용 중
    <ul>
      <li><a href="https://github.com/google/guava">https://github.com/google/guava</a></li>
      <li>구글의 자바 라이브러리라고 생각하면 좋음</li>
      <li><a href="https://blog.outsider.ne.kr/710">구아바를 사용해야 하는 5가지 이유</a></li>
      <li><a href="http://heowc.tistory.com/61">구아바 맛보기</a></li>
    </ul>
  </li>
  <li>todo 앱 으로 할일을 만들고 체크해서 할일 완료 할일을 확인하는 앱이다.</li>
  <li>가장 기본이 되는 엔티티 레이어를 찾아보자</li>
  <li>패키지 이름에 없어서 구조를 확인해서</li>
  <li>아래와 같은 구조로 설계되어 있다</li>
  <li>패키지 이름에서 데이터 소스코드가 보임</li>
  <li>com.example.android.architecture.blueprints.todoapp.data.source</li>
  <li>감사하게 아래처럼 패키지 이름이 정의 되어 있습니다.</li>
  <li>설계와 동일하게 로컬과 리모트 패키지도 보이고</li>
  <li>엔티티 개념을 보이는 내용이 없다.</li>
  <li>클린아키텍처를 이해하기로 앱을 본질은 투두를 만들려고 했으니 기본적인 할일의 제목 할일의 설명 했다, 안했다. 에 대한 클래스가 있을거라 예상 했지만 해당 패키지에는 없다.</li>
  <li>위 데이터레이어 패키지를 확인해보니 Task 라는 클래스가 보인다.</li>
  <li>패키지는 com.example.android.architecture.blueprints.todoapp.tasks.domain.model;</li>
  <li>글을 좀더 자세히 읽어보니 MVP 모델의 중간에 도메인 레이어를 추가한 개념을 사용한걸로 보인다.
    <ul>
      <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a> 설명에 나와 있는데 안읽고 이제 서야 읽어봄</li>
      <li>위 샘플을 기반을 클린 아키텍처를 구현함</li>
      <li>Google todo mvp 를 살짝 보고 돌아옴</li>
    </ul>
  </li>
  <li>MVP 기반의 코드와 다른 점은 중간에 도메인 레이어를 추가 한 점입니다.</li>
  <li>데이터 &lt;- 도메인 &lt;- 프리젠터 레이어로 구성되어 있습니다.</li>
  <li>TasksDataSource(데이터레이어) &lt;- usecase(도메인레이어) &lt;- 프리젠테이션레이어(사용자)</li>
  <li>처음에는 별로 마음에 안들었지만 보다 보면 볼수록 마음에 듬</li>
  <li>정리중</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>크롬 40+ 버전에서 의 앱 실행 문제</title>
	  <link>//chrome-40</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//chrome-40</guid>
	  <description><![CDATA[
	     <h3 id="section">크롬에서 사용자 제스처 없이 앱 실행은 안됩니다.</h3>
<ul>
  <li>탐색할수없음</li>
</ul>

<h4 id="javascript--body-onload-----">1. javascript 의 body onload 에 마켓 이동하는 코드를 추가</h4>
<ul>
  <li>아래와 같이 간단하게 추가 했는데 마켓으로 이동 안하는 기기들이 있음<br />
  <script src="https://gist.github.com/pyeongho/b26f2f488f00f487a19ab823bbbca27a.js"></script></li>
  <li>크롬 인스펙트를 이용해서 콘솔로그를 확인하니 “탐색할수없음” 이라는 문구가 나옴</li>
</ul>

<h4 id="section-1">2. 구글 검색 시작</h4>
<ul>
  <li>이것 저것 검색 하다 보니 chrome 40+ 이상에서는 동작 안하는다는 내용 확인</li>
  <li>
    <p><a href="https://devtalk.kakao.com/t/onload/15293/2">https://devtalk.kakao.com/t/onload/15293/2</a></p>
  </li>
  <li>그래서 조금더 검색</li>
  <li><a href="http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/">http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/</a></li>
  <li>에서 내용을 잘 정리해줌</li>
</ul>

<h4 id="section-2">3. 내용 요약</h4>
<ul>
  <li>구글엔지니어가 판도라 앱을 설치</li>
  <li>주소창에 pandora.com 을 크롬에서 입력</li>
  <li>웹사이트로 이동되지 않고 판도앱이 실행됨</li>
  <li>버그로 접수</li>
  <li>수정해 버림</li>
</ul>

<h4 id="section-3">4. 구글의 답변</h4>
<ul>
  <li>
    <p>원문 : From the omnibox, no, there is no plans to allow external redirects.  If typing in the omnibox, the user is showing a strong intent to stay within chrome, so we made the decision to not allow external redirects (too many of them led to what we believed to be bad user experiences).<br />
Clicking on a link should still behave as before and redirect to market:// links. As it stands, how can I programmatically redirect a user to the play store?<br />
There is no plans to support a redirect without a user gesture.</p>
  </li>
  <li>
    <p>번역기 : 검색 주소창에서 외부로 리디렉션을 허용 할 계획이 없습니다. 검색 주소창에 검색어를 입력하면 사용자는 크롬 내에 머물러야한다는 강한 의지를 나타내고 있으므로 외부 리디렉션을 허용하지 않기로 결정했습니다. 너무 많은 사용자가 사용자 경험이 좋지 않다고 생각하는 것으로 이끌었습니다. <br />
링크를 클릭하면 이전과 같이 작동하고 market : // 링크로 리디렉션되어야합니다. 그대로, 어떻게 프로그래밍 방식으로 사용자를 플레이 스토어 로 리디렉션 할 수 있습니까? <br />
사용자 gestur e 없이 리디렉션을 지원할 계획은 없습니다 .</p>
  </li>
</ul>

<h4 id="section-4">5. 수정 사용자 제스처로 이동하게 하면 됩니다.</h4>
<ul>
  <li>사용자 액션안에서 처리하면 됩니다. 아래는 컨펌창으로 한 예제 입니다.</li>
  <li>사용자 액션만 추가 하면 됩니다.<br />
  <script src="https://gist.github.com/pyeongho/af47412cd50a3579484f0d3db285cd73.js"></script></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>제네릭을 이용하여 샘플코드를 좀더 편하게 사용하기</title>
	  <link>//retrofit2-generic</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-19T00:00:00+00:00</pubDate>
	  <guid>//retrofit2-generic</guid>
	  <description><![CDATA[
	     <h3 id="basepresnter-addsubscription---">최종코드의 BasePresnter의 addSubscription를 부분만 확인하면 됩니다.</h3>
<ul>
  <li>API가 추가 될때마다 계속 추가해야하나?</li>
</ul>

<h4 id="api----">1. api 추가되면 어떻게 해야 하나</h4>
<ul>
  <li>기존 코드에서 기계번역 1개의 api만 사용 하고 있습니다.</li>
  <li>만약 api가 계속 추가 되면 응답값이 계속 바뀌면 api 콜백을 계속 추가 해야 하나?</li>
  <li>addSubscription를 계속 만들어야 하나 고민을 시작함</li>
  <li>그래서 간단하게 제네릭 타입의 클래서를 만들고 api콜백과 addSubscription는 하나만 사용하는 방법</li>
  <li>호출 할때만 제네릭에(템플릿이라고 해야 하나!@) 메소드를 호출할때, 콜백을 받을때 원하는 클래스 타입으로 받고 싶었습니다.</li>
  <li>컴파일 에러 안나게 해서 코드를 추가 했지만,,, 값이 들어 오지 않았습니다.</li>
  <li>git 히스토리에 남아 있습니다.</li>
  <li>그래서 다시 시작 하게 되었습니다.</li>
  <li>코드커밋을 잘못해서 기본 객체로 받는것도 올라가 있습니다.(withoutbutter)</li>
</ul>

<h4 id="section">2. 어떻게 접근할것인가?</h4>
<ul>
  <li>현재 문제점 : addSubscription 에 타입이 정해져 있어서 추가하기 귀찮게 되어 있다.</li>
  <li>API콜백은 원하는 클래스로 사용가능하고 api 인터페이스 역시 샘플처럼 있고 계속 추가 하면 될거라고 생각</li>
</ul>

<h4 id="section-1">3. 공부링크</h4>
<ul>
  <li><a href="https://github.com/amitshekhariitbhu/RxJava2-Android-Samples">https://github.com/amitshekhariitbhu/RxJava2-Android-Samples</a></li>
  <li><a href="https://github.com/delicious-mvp/delicious">https://github.com/delicious-mvp/delicious</a></li>
  <li>rxjava1 이지만 공부할게 많다.</li>
</ul>

<h4 id="section-2">4. 처음 부터 잘못 접근</h4>
<ul>
  <li>제넥릭 사용법을 잘 몰라서 이상한짓을 한거임</li>
  <li>addSubscription 에서 제네릭으로 받으면 됩니다.</li>
  <li>RxJava2 map 과 필터 공부로 깔끔하게 마무리</li>
</ul>

<h4 id="section-3">5. 최종 결과를 다운 받기에 폴더 하나 더 만들었습니다.</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>폴더이름 Retorfit2T</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>AndroidAnnotation을 공부 하자</title>
	  <link>//AndroidAnnotation</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-14T00:00:00+00:00</pubDate>
	  <guid>//AndroidAnnotation</guid>
	  <description><![CDATA[
	     <h3 id="androidannotation----">안드로이드에서 AndroidAnnotation을 이용해서 앱을 개발해 보자</h3>
<ul>
  <li>어노테이션 기능으로 좀금더 편하게 의존성을 주입해서 앱을 개발하는 방법 입니다.</li>
  <li><a href="http://androidannotations.org/">http://androidannotations.org/ 공식사이트</a></li>
</ul>

<h4 id="section">1. 환경 설정</h4>
<ul>
  <li><a href="https://github.com/androidannotations/androidannotations/wiki/Building-Project-Gradle">https://github.com/androidannotations/androidannotations/wiki/Building-Project-Gradle</a></li>
  <li>그래들 환경이라서 편하게 추가 할 수 있습니다.</li>
  <li>
    <p>프로젝트 레벨 그래들</p>
  </li>
  <li>
    <script src="https://gist.github.com/pyeongho/47dbeb046afeee449fbe52f00cc43efc.js"></script>
  </li>
  <li>app 레벨 그래들 변경내용</li>
</ul>

<pre><code class="language-gradle">apply plugin: 'com.android.application'
apply plugin: 'android-apt'

def AAVersion = '4.1.0'

...
dependencies {
 ...
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
 ...   
}

</code></pre>

<h4 id="databinding---">2. databinding 과 함께 사용하기</h4>
<ul>
  <li>databinding 의 BaseActivity 를 사용한다.</li>
  <li>@EActivity 에 레이아웃 파일을 추가하지 않는다.</li>
  <li>기본 Activity 의 onCreate 에서 레이아웃을 처리 한다.</li>
</ul>

<h4 id="section-1">3. 네이버 기계번역을 안드로이드 어노테이션으로 샘플코들르 만들어 보았습니다.</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>AndoroidAnnotation 폴더에 있습니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>dagger2 를 공부</title>
	  <link>//dagger2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-12T00:00:00+00:00</pubDate>
	  <guid>//dagger2</guid>
	  <description><![CDATA[
	     <h4 id="di-">DI 공부</h4>
<ul>
  <li>라이브러리를 이용해서 의존성을  주입하는 방법</li>
  <li>그냥 플래버를 이용해도 되지만 좀더 많은 사람들이 사용하는 방법</li>
</ul>

<h4 id="dagger2-">1. dagger2 공부하기</h4>
<ul>
  <li>아래 링크를 참고로 따라하기 시작</li>
  <li><a href="http://pluu.github.io/blog/android/2017/01/12/android-dagger/">http://pluu.github.io/blog/android/2017/01/12/android-dagger/</a></li>
</ul>

<h4 id="section">2. 위 사이트를 따라하면서 느낀점</h4>
<ul>
  <li>가장 기본적인 사용법은 알수가 있음</li>
  <li>만들어본 샘플은 개 이름을 가지고 오는 가장 간단한 형태였고 이를 주입시키는 내용 이었습니다.</li>
  <li>따라하지는 못했지만 빌드환경을 변경해서 클래스를 변경가능하다.</li>
  <li>테스트시 편한점이 생긴다.</li>
  <li>앞으로 샘플들에 포함된 dagger2 가 있으면 왜 사용해야 하는지 이유를 확실히 하겠습니다.</li>
</ul>

<h4 id="dagger2--">3. 매우 간단한 dagger2 샘플 입니다.</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>dagger2 폴더에 있습니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>mvp 패턴을 공부하자</title>
	  <link>//mvp</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-11T00:00:00+00:00</pubDate>
	  <guid>//mvp</guid>
	  <description><![CDATA[
	     <h3 id="mvp----">안드로이드에 mvp를 적극적으로 추가하기 위한 공부중</h3>

<h4 id="section">1. 첫번쩨 공부</h4>
<ul>
  <li><a href="https://medium.com/@jsuch2362/adapter-누구냐-넌-data-view-2db7eff11c20#.779qihsc4">정승욱님 블로그 게시글 링크</a></li>
  <li>mvp 적용해야겠다고 생각하고 기본적인 샘플을 만들어 볼려고 이것 저것 시도 하였습니다.</li>
  <li>앱을 만들면서 필요 하다고 느껴진 통신을 rxjava2 와 mvp 를 적용 하면 기본적인건 모두 적용 가능하다고 생각</li>
  <li>그래서 네이버 기계 번역을 여기 저기 내용을 짜깁기 해서 만들어 보았습니다.</li>
  <li>저렇게 샘플을 기반으로 패턴을 이용해서 지속적으로 사용하려 했습니다.</li>
  <li>블로그를 여기저기 돌아다니다 보면서 좀더 공부 해야 겠다는 생각이 들어서 공부를 시작 합니다.</li>
</ul>

<h4 id="section-1">2. 정승욱님 블로그 내용 공부</h4>
<ul>
  <li>안드로이드 앱 개발의 리스트뷰</li>
  <li>복사 내용</li>
  <li>Android 에서 가장 대중화된 Clean Architecture 인 MVP (Model-View-Presenter) 에서는 각각을 다음과 같이 정의하고 있습니다.</li>
  <li>View : 실제 View 에 접근하고 화면을 갱신하는 역할을 수행. 또는 UI 처리와 이벤트를 프리젠터로 넘김</li>
  <li>Presenter : View 로부터 이벤트를 전달받고 View 에서 알 수 없는 Data 에 접근하고 로직을 수행하도록 Model 에 요청함.</li>
  <li>Model : Data 에 직접 접근하고 관리함. Presenter 가 요청한 작업을 수행, 또는 통신같은 데이터 처리</li>
  <li><a href="https://github.com/ZeroBrain/Android-MVP-AdapterRoleSample">https://github.com/ZeroBrain/Android-MVP-AdapterRoleSample</a></li>
  <li>예제가 있는데 제가 모르는 라이브러리들이 있어서 좀더 공부 해야 알수가 있을거 같습니다.</li>
  <li>Dagger, Lambda를 모르겠어서 좀도 쉬운 예제를 찾아 갑니다.</li>
</ul>

<h4 id="section-2">3. 좀더 자세히 정리된 블로그로 이동</h4>
<ul>
  <li><a href="http://thdev.tech/androiddev/2016/06/14/Android-TODO-MVP-Example.html">꿈많은 개발자가 되자 블로그 링크</a></li>
  <li><a href="https://github.com/antoniolg/androidmvp">내가 좋아하는 스타일의 mvp </a></li>
</ul>

<h4 id="mvp-">4. 버터나이프를 제거하고 데이터바인딩 변경한 MVP 샘플</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>위 코드에 새로운 폴더를 생성하였습니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>retrofit2 + rxandroid2 + mvp 네이버 기계번역 사용하기</title>
	  <link>//retrofit2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-10T00:00:00+00:00</pubDate>
	  <guid>//retrofit2</guid>
	  <description><![CDATA[
	     <h4 id="retrofit2--rxandroid2--mvp---">retrofit2 + rxandroid2 + mvp 를 이용한 통신</h4>

<h4 id="mvp----">참고로 mvp 처럼만 보이고 아닐수도 있어요.</h4>

<h4 id="dependencies-----">1. dependencies 추가 기존 내용과 동일 합니다.</h4>

<pre><code class="language-gradle">
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    compile 'io.reactivex.rxjava2:rxjava:2.0.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    
</code></pre>

<h4 id="mvp--">2. mvp 패던 링크</h4>
<ul>
  <li><a href="http://tosslab.github.io/android/2015/03/01/01.Android-mvc-mvvm-mvp.html">잔디랩의 mvp</a></li>
  <li><a href="http://pluu.github.io/blog/android/2016/04/06/android-mvc-mvp/">pluu dev</a></li>
  <li><a href="http://thdev.tech/androiddev/2016/10/12/Android-MVP-Intro.html">꿈많은 개발자 링크</a></li>
</ul>

<h4 id="mvp---1">3. 통신으로만 구현 하다 보니 모델이 없어서  mvp 처럼 안느껴지네요</h4>

<h4 id="mvp--------">4.  mvp 이외의 코드를 제거 하여 조금더 보기 편하도록 하겠습니다.</h4>
<ul>
  <li>mvp 공부 하면서 진행 하다 보니 이렇게 하는게 맞는건지..</li>
  <li>다른분들이 만드는걸 보고 따라하면서 프로젝트에도 활용 하도록 할 예정입니다.</li>
  <li>mvp가 자리 잡으면 테스트 주도 개발을 도전해 보겠습니다.</li>
  <li>아래가 코드가 제가 다른 사람걸 참고 만든 전체 코드 입니다.</li>
  <li>버터나이프를 제거하고 데이터 바인딩을 이용해 보겠습니다.</li>
</ul>

<h4 id="section">5. 전체 샘플코드</h4>
<ul>
  <li>기존 샘플코드에 폴더를 추가 하였습니다.</li>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>버터나이프 없이 조금더 편하게 XML 의 객체를 사용해 보자</title>
	  <link>//no_more_findviewid</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-09T00:00:00+00:00</pubDate>
	  <guid>//no_more_findviewid</guid>
	  <description><![CDATA[
	     <h4 id="findviewbyid--">findViewById 없이 사용하기</h4>
<ul>
  <li>앱을 만들면서 항상해야 하고 코드가 안 이쁘게 보이는걸 데이터 바인딩으로 해결해 보자</li>
</ul>

<h4 id="section">참고 사이트</h4>
<ul>
  <li><a href="https://developer.android.com/topic/libraries/data-binding/index.html#studio_support">안드로이드 개발자 사이트 링크</a></li>
  <li><a href="http://gogorchg.tistory.com/entry/Android-DataBinding-findViewById-이제-안녕">GsBob 블로그</a></li>
</ul>

<h4 id="section-1">1. 버터 나이프 사용하면 좋긴 하지만 라이브러리 추가가 싫어 질때가 있어서 찾아보고 적용해 보았습니다.</h4>
<ul>
  <li>gradle 추가 내용<br />
<script src="https://gist.github.com/pyeongho/bc1b113241c5c8bfeffd4278be0a50a8.js"></script></li>
</ul>

<h4 id="section-2">2. 기존과 달라지는 방법</h4>
<ul>
  <li>
    <ol>
      <li>레이아웃 파일 최상위 트리에</li>
    </ol>
  </li>
  <li>
    <script src="https://gist.github.com/pyeongho/90ec3c115ae62ecc49f398f40b55e8d6.js"></script>
  </li>
  <li>
    <ol>
      <li>setContentView(R.layout.activity_main); 가 아래 처럼 변경 됩니다.</li>
    </ol>

    <div class="highlighter-rouge"><pre class="highlight"><code> <span class="n">ActivityMainBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</code></pre>
    </div>
  </li>
</ul>

<h4 id="section-3">3. 사용방법</h4>
<script src="https://gist.github.com/pyeongho/ec1987cb17dbfaf933b20c848edcaa4d.js"></script>

<h4 id="section-4">4. 그래들에 추가 하고 싱크 리빌드 한번 해주세요.</h4>
<ul>
  <li>ActivityMainBinding 자동으로 생성 됩니다.</li>
  <li>처음에는 이걸 못찾아서 당황 했지만 그래들 싱크 해지고 리빌드 해주면 자동 생성 됩니다.</li>
  <li>생성 규칙은 아래 처럼 입니다. _ 자동으로 사라지고 카멜코딩룰을 적용해 줍니다.
    <ul>
      <li>중요한 점은  activity_main - &gt; ActivityMainBinding 형태로 변형 됩니다.</li>
      <li>변수 이름도 해당 규칙이 적용 됩니다.</li>
      <li>tv_hello -&gt; tvHello 로 변경 되면서 자동으로 카멜코딩도 적용줍니다.</li>
    </ul>
  </li>
</ul>

<h4 id="section-5">5. 리스트뷰 또는 리사이클러 뷰에서 사용</h4>
<ul>
  <li>ListView 어댑터나 RecyclerView 어댑터 내에서 데이터 바인딩 항목을 사용 중인 경우 다음을 선호하는 개발자도 있습니다.</li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">ListItemBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">ListItemBinding</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">layoutInflater</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
  <span class="c1">//or</span>
  <span class="n">ListItemBinding</span> <span class="n">binding</span> <span class="o">=</span> <span class="n">DataBindingUtil</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">layoutInflater</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</code></pre>
</div>

<h4 id="section-6">6. 위에서 사용을 레이아웃 바인딩이라고 하고 이제는 데이터 바이딩과 클릭이벤트</h4>
<ul>
  <li>클래스를 사용하기 위해서 사용자 객체를 만든다.</li>
  <li>
    <script src="https://gist.github.com/pyeongho/8133adb6428e763ae8953edc56b5a680.js"></script>
  </li>
  <li>
    <p>레이아웃 파일에 아래 내용을 추가<br />
  <script src="https://gist.github.com/pyeongho/f5603d32a1483c45e22754a6e051ae7a.js"></script></p>
  </li>
  <li>액티비티 자바 파일에</li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>   <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">"Test"</span><span class="o">,</span> <span class="s">"User"</span><span class="o">);</span>
   <span class="n">binding</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</code></pre>
</div>

<ul>
  <li>텍스트뷰에 hello 에 Test 가 추가 된다.</li>
  <li>안드로이드 개발자 사이트에 보면 클릭이벤트 리스너등 사용하면 좋을것들이 너무 많다.</li>
  <li>심지어 import 룰 사용도 가능하다.</li>
  <li>바인딩 기능을 모두 사용하면 레이아웃 파일을 보기 힘들어 질거 같다…</li>
</ul>

<h4 id="section-7">7. 항상 해줘야 하는 자바 코드를 추상화 클래스로 만들어 보면</h4>
<ul>
  <li>baseactiviy 를 만듬</li>
  <li>
    <script src="https://gist.github.com/pyeongho/ac55d87b879282327bbb60c2ab5874de.js"></script>
  </li>
  <li>MainActivity 에서 사용하는 법<br />
  <script src="https://gist.github.com/pyeongho/897a041cb9ee3d452f39ce7e7298d6c3.js"></script></li>
</ul>

<h4 id="fragment--">8. fragment 에서 사용하기</h4>
<script src="https://gist.github.com/pyeongho/7dd19b6ae9edb65b0617f2975603cd3a.js"></script>

<h4 id="viewholder--">9. ViewHolder 에서 사용하기</h4>
<ul>
  <li>
    <script src="https://gist.github.com/pyeongho/dc4aa079ab29e6d30d6092f147c6a4d7.js"></script>
  </li>
</ul>

<h4 id="section-8">*. 좋은점</h4>
<ul>
  <li>외부 라이브러리를 사용 안해도 된다.</li>
  <li>findViewById 사용을 안해도 된다.</li>
  <li>심지어 변수 선언들도 안해도 된다.</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
