<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>코틀린 안드로이드 익스텐션</title>
	  <link>//kotlin_android_extensions</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-27T00:00:00+00:00</pubDate>
	  <guid>//kotlin_android_extensions</guid>
	  <description><![CDATA[
	     <h3 id="findviewid---">findviewid 는 안했으면 …</h3>
<ul>
  <li>코틀린에서도 사용 가능한 방법</li>
  <li>코틀린 안드로이드 익스텐션</li>
</ul>

<h4 id="kotlin-android-extensions-">1. Kotlin android extensions 사용하기</h4>
<ul>
  <li><a href="http://thdev.tech/kotlin/2017/03/05/AndroidStudio-Kotlin-Extensions.html">http://thdev.tech/kotlin/2017/03/05/AndroidStudio-Kotlin-Extensions.html</a></li>
</ul>

<h4 id="kotlin-android-extensions--1">2. Kotlin android extensions 사용하기</h4>
<ul>
  <li>기존에 사용해보았던 데이터바인딩도 사용가능하지만 새 술은  새 부대에</li>
  <li>build.gradle(app) 에 내용 추가</li>
  <li>
    <p>```gradle<br />
 apply plugin: ‘com.android.application’<br />
 apply plugin: ‘kotlin-android’<br />
 apply plugin: ‘kotlin-android-extensions’</p>

    <p>dependencies {<br />
     compile “org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlin_version”<br />
 }<br />
  ```</p>
  </li>
  <li>사용은 xml 에서 정의한 아이디를 넣으면 자동으로 임포트 되어서 사용이 편합니다.
    <ul>
      <li>import kotlinx.android.synthetic.main.fragment_main.view.*</li>
      <li>view.tv_hello.text = “ABCD”</li>
    </ul>
  </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>웹에서 앱 설치 여부를 확인하자</title>
	  <link>//app_check</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-27T00:00:00+00:00</pubDate>
	  <guid>//app_check</guid>
	  <description><![CDATA[
	     <h3 id="web------">Web 에서 앱 설치 여부를 확인 하자</h3>
<ul>
  <li>시나리오는 페이지가 안보이면 document.webkitHidden 과 document.hidden 으로 확인이 가능하다.</li>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/API/Page_Visibility_API">https://developer.mozilla.org/ko/docs/Web/API/Page_Visibility_API</a></li>
  <li>2개인 이유는 정식 스크립트 등록으로 인해서라고 풍문으로 들었습니다.</li>
  <li>하지만 문제점은 매우 많습니다. 구현 내용을 보면 알 수 있습니다. 왜 문제가 많은지
    <ul>
      <li><a href="https://devtalk.kakao.com/t/topic/20684/3">https://devtalk.kakao.com/t/topic/20684/3</a></li>
    </ul>
  </li>
</ul>

<h4 id="section">1. 내용</h4>
<ul>
  <li>인터벌 함수를 이용해서 hidden 을 계속 확인한다.</li>
  <li>타임아웃 함수를 이용해서 특정시간이 되면 앱이 설치 안되어있다고 판단한다.</li>
</ul>

<h4 id="section-1">2. 문제</h4>
<ul>
  <li>단순참고용 정도로 사용하면 좋을거 같습니다.</li>
  <li>많이 테스트 안해보았습니다.</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>document.webkitHidden</td>
          <td> </td>
          <td>document.hidden 를 이용해서 설치 여부를 확인 하는 방법 입니다.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>크롬에서 지원하는 intent 방식을 사용하면 항상 마켓이 실행되서 체크하기 어려우니 꼭 커스텀 스킴으로 테스트 해야 합니다.</li>
</ul>

<h4 id="section-2">3. 코드</h4>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">appSchem</span> <span class="o">=</span> <span class="s1">'mayapp://launch?Data=abcdefg'</span><span class="p">;</span>
    
<span class="nx">isMyApp</span><span class="p">();</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">appSchem</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">isMyApp</span><span class="p">(){</span>
  <span class="kd">function</span> <span class="nx">clearTimers</span><span class="p">(){</span>
        <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">heartbeat</span><span class="p">);</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="kd">function</span> <span class="nx">intervalHeartbeat</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">webkitHidden</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span><span class="p">){</span>
            <span class="nx">clearTimers</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'앱이 설치 되어 있습니다.'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">heartbeat</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">intervalHeartbeat</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">deLay</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'앱이 없습니다.'</span><span class="p">);</span>
    <span class="p">},</span> <span class="nx">deLay</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre>
</div>

	  ]]></description>
	</item>

	<item>
	  <title>코를린 공부를 intellij 에서</title>
	  <link>//kotlin_with_intellij</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-23T00:00:00+00:00</pubDate>
	  <guid>//kotlin_with_intellij</guid>
	  <description><![CDATA[
	     <h3 id="section">안드로이드 공식 언어인 코틀릭 공부</h3>
<ul>
  <li>안드로이드 스튜디오가 아닌 인텔리제이 에서 공부</li>
  <li>기본 적인 언어 공부후 안드로이드 스튜디오에서 진행</li>
</ul>

<h4 id="section-1">0. 목적</h4>
<ul>
  <li>기본적인 문법및 사용법을 익혀 보자<br />
  -[http://thdev.tech/categories.html#Kotlin-ref] (http://thdev.tech/categories.html#Kotlin-ref)</li>
</ul>

<h4 id="section-2">1. 인텔리제이에서 코틀린 실습하기</h4>
<ul>
  <li><a href="https://news.realm.io/kr/news/kotlin-1/">https://news.realm.io/kr/news/kotlin-1/</a></li>
  <li>인텔리제이 실행</li>
  <li>Create New Project</li>
  <li>kotlin(java)</li>
  <li>create -&gt; use library from plugin 체크</li>
  <li>상단 오른쪽 위에 SDK 선택에서</li>
  <li>JDK -&gt; 설치된 JDK 폴더 경로 입력</li>
  <li>next</li>
  <li>프로젝트 이름 설정</li>
  <li>빈 프로젝트 생성 완료</li>
  <li>src 폴더에서 오른쪽 버튼</li>
  <li>new -&gt; kotling file/class 선택</li>
  <li>app 파일 생성(app.kt)</li>
  <li>아래 처럼 메인 코드 입력</li>
</ul>

<pre><code class="language-kotlin">   fun main(args: Array&lt;String&gt;) {
    println("Hello Hello!")
  }
</code></pre>

<ul>
  <li>app.kt 파일에서 마우스 오른쪽 버튼으로 run app.kt 실행</li>
  <li>실행 창에 메인 함수 실행을 확인 할 수 있습니다.</li>
</ul>

<h4 id="section-3">2. 기본 내용을 확인 하기</h4>

<ul>
  <li><a href="http://theeye.pe.kr/archives/tag/%EC%BD%94%ED%8B%80%EB%A6%B0">http://theeye.pe.kr/archives/tag/%EC%BD%94%ED%8B%80%EB%A6%B0</a></li>
  <li>코틀린 함수 사용
    <ul>
      <li>
        <p>첫번째 두번째 함수는 그럭 저럭 넘어가면 되고<br />
```kotlin<br />
  fun sum(a:Int , b:Int): Int{<br />
    return a+b<br />
  }</p>

        <p>// Single Expression Function 이런건 사용하지 말자 한 두줄  줄인다고 코드가 좋아질거 같진 않다.<br />
  fun sum2(a:Int , b:Int) = a+b</p>

        <p>fun printSum(a:Int, b:Int):Unit {<br />
      print(a+b)<br />
  }<br />
```</p>
      </li>
      <li>
        <p>세번째 함수  Unit를 void 라고 생각하자</p>
        <ul>
          <li>코드의 내부 구현은 println을 한번 호출했을 뿐 어떤 결과를 반환한다거나 하는것을 생각하기 어렵습니다. 이런 경우에 println은 Unit을 리턴합니다. 이런 부분은 Scala와 비슷한 부분이 있어 보입니다. Kotlin은 모든 함수 구현이 반환값을 가지며 return을 명시적으로 써줄수도 생략할 수 도 있습니다. 반환이 없어 보이는 코드의 경우에는 Unit을 리턴하며 이 Unit은 Java의 void와 같다고 생각하시면 됩니다. 사실은 반환값이 없는경우를 Unit을 리턴한다고 생각하시면 될 것 같습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>변수 선언
    <ul>
      <li>상수는 val</li>
      <li>
        <p>변수는 var    <br />
```kotlin<br />
  // Immutable<br />
  val a: Int = 1<br />
  val b = 1<br />
  val c: Int<br />
  c = 1</p>

        <p>// Mutable<br />
  var x = 5<br />
  x += 1<br />
```</p>
      </li>
    </ul>
  </li>
  <li>조건문
    <ul>
      <li>자바 처럼 기본 조건문을 사용하자</li>
    </ul>
  </li>
  <li>null
    <ul>
      <li>
        <p>```kotlin<br />
val x: String = null // error<br />
val x: String? = null // ok</p>

        <p>val x:Int? = 3<br />
x + 4 // error<br />
if (x != null) x + 4 // ok</p>

        <p>val x: Int? = null<br />
val y: Int = x ?: 0  //  x ? x : 0<br />
x?.rangeTo(3) // null<br />
y.rangeTo(3) // 0..3<br />
  ```</p>
      </li>
      <li>
        <p>x?.rangeTo(3) 를 이용하면 체인형 함수 실행에 유리 하나의 결과만 널이라도 바로 null 반환</p>
      </li>
    </ul>
  </li>
  <li>types Any
    <ul>
      <li>컴파일러가 고생이 많아 보입니다.</li>
      <li>obj is String 만 성공해도 다음 블럭에서는 obj 가 문자열 클래스 이다.</li>
      <li>
        <p>if 문 조건은 왼쪽 부터 실행 된다.<br />
```kotlin    <br />
fun getStringLength(obj: Any): Int? {<br />
  if (obj is String) // 여기서 obj가 자동으로 String으로 캐스팅됩니다.<br />
    return obj.length<br />
  return null // 여기는 여전히 obj의 타입은 Any입니다.<br />
}</p>

        <p>if (obj !is String) { return … }<br />
return obj.length</p>

        <p>if (obj is String &amp;&amp; obj.length &gt; 0) { … }</p>

        <p>var x: Any = “hello”<br />
println(x) // hello가 출력</p>

        <p>x = 3<br />
println(x) // 3이 출력<br />
```</p>
      </li>
    </ul>
  </li>
  <li>반목문 및 콜렉션
    <ul>
      <li>람다 가능</li>
    </ul>

    <pre><code class="language-kotlin">  //val collection: List&lt;String&gt; = ...
  val collection: MutableList&lt;String&gt; = ArrayList()
  collection.add("1")
  collection.add("2")
  collection.add("3")
  collection.add("4")
  collection.add("5")
      
  val array = arrayListOf&lt;String&gt;()
  array.add("11")
  array.add("12")
  array.add("13")

  for (element in collection)
    println(element)
      
  var i = 0
  while (i &lt; collection.size())
    println(collection[i++])
      
  collection.forEach { e -&gt; println(e) }
  collection.forEach { println(it) }
</code></pre>
  </li>
  <li>when
    <ul>
      <li>Any 타입일때 케이스문처럼 사용이 가능한다.<br />
<code class="highlighter-rouge">kotlin
fun cases(obj: Any) {
when (obj) {
  1 -&gt; print("One")
  "Hello" -&gt; print("Greeting")
  is Long -&gt; print("Long")
  !is String -&gt; print("Not a string")
  else -&gt; print("Unknown")
}
}
</code></li>
    </ul>
  </li>
  <li>범위(range) 사용하기w
    <ul>
      <li>
        <div class="highlighter-rouge"><pre class="highlight"><code> if (x in 1..y-1)
   print("OK")

 for (x in 1..5)
   print(x)
</code></pre>
        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="section-4">3. 지속적인 공부가 필요함</h4>
<ul>
  <li>현재 여기까지 진행하고 조금씩 앱을 만들어 보도록 하겠습니다.</li>
  <li>코틀린 문서 링크 입니다.</li>
  <li><a href="http://javacan.tistory.com/entry/Korea-Kotlin-Ref-Doc">http://javacan.tistory.com/entry/Korea-Kotlin-Ref-Doc</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>RemoteConfig FirebaseRemoteConfigFetchThrottledException</title>
	  <link>//firebase_remoteconfig</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-22T00:00:00+00:00</pubDate>
	  <guid>//firebase_remoteconfig</guid>
	  <description><![CDATA[
	     <h3 id="section">파이어베이스 리모트 컨피그 사용</h3>
<ul>
  <li>앱 수정 없이 API 서버 사용 유무를 선택 하는 기능을 만들려고함</li>
  <li>공지나 강제 업데이트 기능을 이걸로 하면 좋을거 같음</li>
</ul>

<h4 id="section-1">0. 목적</h4>
<ul>
  <li>앱 재배포 없이 기능을 선택 하려고함</li>
  <li>firebase reomte config 기능이 눈에 들어옴</li>
  <li>테스트도 할겸 도전</li>
</ul>

<h4 id="section-2">1. 앱에 파이어 베이스 리모트 컨피그 기능 추가</h4>
<ul>
  <li>안드로이드 스튜디오에서 편하게 추가 가능하다.</li>
  <li>tools -&gt; Firebase 선택시 편집기 오른쪽에 사용 가능한 기능이 나옵니다.</li>
  <li>Remote Config  를 선택해서 순서대로 하면 사용상 문제는 없습니다.</li>
</ul>

<h4 id="section-3">2. 처음 한두번은 문제 없다가 갑자기 에러가 나기 시작함</h4>
<ul>
  <li>순서 대로 진행 하면 ‘Fetch Failed’ 에러로 정확한 이유를 알수 없음</li>
  <li>그래서 addOnFailureListener 리스너를 이용해서 exception 클래스 이름을 확인 하였습니다.</li>
  <li>FirebaseRemoteConfigFetchThrottledException</li>
  <li>위 내용으로 에러가 발생</li>
  <li><a href="http://blog.naver.com/PostView.nhn?blogId=cranjathe&amp;logNo=220845740807&amp;parentCategoryNo=&amp;categoryNo=158&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView">사용법 및 에러처리 방법</a></li>
  <li>구글 검색으로 위와 같은 내용이 찾음</li>
  <li>아래 코드로 동작 확인  <br />
<code class="highlighter-rouge">java
 FirebaseRemoteConfigSettings setting = new FirebaseRemoteConfigSettings.Builder()
   .setDeveloperModeEnabled(BuildConfig.DEBUG)
   .build();
 mFirebaseRemoteConfig.setConfigSettings(setting);
</code></li>
</ul>

<h4 id="remote-config---">3. Remote Config 사용시 주의 사항</h4>
<ul>
  <li>개발 모드 일때는 꼭 개발 설정을 하자</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Rx 사용하면서 추가하거나 공부한 내용</title>
	  <link>//use-rx-android</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-14T00:00:00+00:00</pubDate>
	  <guid>//use-rx-android</guid>
	  <description><![CDATA[
	     <h3 id="rx----">rx 라이브러리를 사용하면서 사용하는 함수들</h3>
<ul>
  <li>간단하게 성남도서관 검색 앱을 개발하면서 사용하는 함수들 입니다.</li>
  <li>rxbiding 사용법</li>
</ul>

<h4 id="section">0. 목적</h4>
<ul>
  <li>클린 + MVP + RX 를 사용하면서 익숙해지기</li>
  <li>뷰에서는 이벤트에 대한 처리와 보여주는것만 처리</li>
  <li>프리젠터에서는 유즈케이스를 이용한 API 접근</li>
  <li>유즈케이스 옵저버를 반환</li>
  <li>이로 인해서 구조가 무너지지 않은걸로 생각함</li>
</ul>

<h4 id="rxbiding">1. rxbiding</h4>
<ul>
  <li>각종 view 들의 이벤트를 옵저버로 형태로 변환하여 편하게 사용 가능함</li>
  <li><a href="https://github.com/JakeWharton/RxBinding">https://github.com/JakeWharton/RxBinding</a>
    <ul>
      <li>안드로이드 UI 위젯 사용을 위한 플랫폼</li>
    </ul>
  </li>
  <li>
    <p>현재 사용을 위하여 추가한  라이브러리</p>

    <div class="highlighter-rouge"><pre class="highlight"><code>compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'
</code></pre>
    </div>
  </li>
  <li>사용은 연속 클릭 방지를 위해서 사용하였습니다. API 호출 까지 한번에 사용하면 좋을거 mvp 를 적용중이라 구조가 무너져서 사용 안하기로함</li>
  <li>연속 클릭 방지를 위한 RxBiding 사용
    <ul>
      <li>뷰의 클릭에 사용할 버튼뷰를 넘기고</li>
      <li>throttleFirst(1, TimeUnit.SECONDS) : (첫번쩨 이벤트를 실행후 1초이내로 들어오는 다른 이벤트는 버린다.)</li>
      <li>
        <p>throttleLast(1, TimeUnit.SECONDS) : 1초 동안 들어오는 이벤트중 마지막 이베트늘 실행</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">RxView</span><span class="o">.</span><span class="na">clicks</span><span class="o">(</span><span class="n">btnUseRxCallBack</span><span class="o">)</span>
    <span class="o">.</span><span class="na">throttleFirst</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
    <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
    <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
            <span class="n">o</span> <span class="o">-&gt;</span> <span class="n">mPresenter</span><span class="o">.</span><span class="na">clickedSearch</span><span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">()),</span>
            <span class="n">error</span><span class="o">-&gt;</span><span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span><span class="n">error</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="rx-">2. 사용중인 RX 함수</h4>
<ul>
  <li>filter
    <ul>
      <li>
        <p>아래 처럼 문자열이 있을때만 필터링을 추가할 수 있다. true 일때만 다음으로</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">text</span><span class="o">))</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
  <li>map
    <ul>
      <li>
        <p>입력으로 들어 오는 값을 변경 할 수 있다. 다음으로 전달되는 문자열은 간장공장+query</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">text</span> <span class="o">-&gt;</span> <span class="s">"간장공장"</span><span class="o">+</span><span class="n">text</span><span class="o">)</span>
</code></pre>
        </div>
      </li>
    </ul>
  </li>
  <li>zip
    <ul>
      <li>이걸 몰라서 한참 걸렸습니다.</li>
      <li>이름의 느낌 처럼 압축 하는 느낌입니다.</li>
      <li>
        <p>일단 사용 코드 입니다.</p>

        <div class="highlighter-rouge"><pre class="highlight"><code>  <span class="n">Observable</span><span class="o">.</span><span class="na">zip</span><span class="o">(</span>
    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">query</span><span class="o">),</span>
    <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">requestPage</span><span class="o">),</span>
    <span class="o">(</span><span class="n">queryText</span><span class="o">,</span><span class="n">requestPageText</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"phkim"</span><span class="o">,</span><span class="s">"query: "</span><span class="o">+</span><span class="n">queryText</span> <span class="o">+</span> <span class="s">"requestPage:"</span><span class="o">+</span><span class="n">requestPageText</span><span class="o">))</span>
</code></pre>
        </div>
      </li>
      <li>문자열 하나씩 입력되면 동식에 사용 가능하도록 변경해 줍니다.</li>
      <li>배열이 들어가서 하나씩 연속으로 사용하는게 아닌 동시에 사용 가능합니다.</li>
    </ul>
  </li>
  <li>flatMap
    <ul>
      <li>결과를 옵저버 형태로 반환합니다.</li>
      <li>다른 옵저버와 합칠때 사용합니다.</li>
      <li>코드를 추가 하기에는 양이 너무 길어 져서</li>
      <li>옵저버 A , 옵저버 B</li>
      <li>실행중인 옵저버 A 스트림에 옵저버 B 를 추가 할 수 있습니다.</li>
      <li>콜백에 콜백을 처리할때 사용하기 좋습니다.</li>
      <li>예를 들어서 소셜 로그인 처리 할때 사용 하면 됩니다.
        <ul>
          <li>페이스북 로그인 -&gt; 콜백으로 결과 -&gt; 사용하는 서버로 결과 전달 -&gt; 페이스북과 사용중인 서버 로그인 완료</li>
          <li>위와 같은 내요을 콜백에서 콜백을 호출하는 형태를 조금이나마 줄일 수 있다</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Daum 이미지 검색을 내가 좋아하는 형태로 변경해 보자</title>
	  <link>//my-clean-mvp</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-07T00:00:00+00:00</pubDate>
	  <guid>//my-clean-mvp</guid>
	  <description><![CDATA[
	     <h3 id="gdg-atsl-on-mvp-">구글 샘플과 GDG-ATSL-ON-MVP를 이용</h3>
<ul>
  <li>2개의 코드 모두 너무 좋지만 앞으로를 위해서 필요한 부분을 변경해 보려고 합니다. 남들이 보면 이상해 보일수도 있겠지만 구조와 라이브러리르 조금 추가 및 변경해서 원하는 형태로 변경합니다.</li>
  <li>원래 코드도 좋지만 이상하게 마음에 안드는 부분을 변경해보려고 합니다.
    <ul>
      <li><a href="https://github.com/ZeroBrain/GDG-ATSL-ON-MVP">https://github.com/ZeroBrain/GDG-ATSL-ON-MVP</a></li>
    </ul>
  </li>
</ul>

<h4 id="section">1. 구글샘플 기반으로 앱을 생성하고 제로브레인님의 다음 이미지 검색기능을 추가 하는 형태로 진행</h4>
<ul>
  <li>기본 샘플 생성</li>
  <li>버터나이프, 데이터바인딩 은 넣으면 코드가 짧아 지지만 사용 안합니다.</li>
  <li>구글 샘플이 좋았던 점은 거의 모든 뷰를 프래그먼트에서 구현 하였던 점입니다.
    <ul>
      <li>프로가드 적용시 액티비티 코드는 거의 원형이 남아 있는데 이를 프래그먼트에서 구현 하니 프로가드 적용이 조금더 강력한 느낌 이었습니다.</li>
    </ul>
  </li>
  <li>구글 샘플에서 기본적으로 필요한 것들을 복사해옴</li>
  <li>rx 를 추가하면 많이 없어질걸로 예상</li>
</ul>

<h4 id="section-1">2. 진행 순서</h4>
<ul>
  <li>샘플앱 기본을 정한다.(나중에 해도 됨)</li>
  <li>MVP 구현은 거의 구글샘플을 기반으로 한다.(프래그먼트)</li>
  <li>클린아키텍처 기반으로 앱의 목적을 정한다.
    <ul>
      <li>이미지 검색 원하는 문구로 이미지를 검색하고 결과를 클릭하면 이미지가 포함된 URL을 브라우저를 통해서 연다.</li>
      <li>엔티티 설정 -&gt;  이미지URL, 이미지 타이틀, 이미지를 포함한 오리지널 URL</li>
    </ul>
  </li>
  <li>UseCase 를 만든다.
    <ul>
      <li>문자열 입력에 따른 결과값 반환 하는 케이스</li>
      <li>대략 =&gt; GetImages(String query)  이런 함수로 예상</li>
    </ul>
  </li>
  <li>UseCase가 가지고올 레포지토리 생성</li>
  <li>원래 구글샘플에 rx 통신 모듈 추가</li>
</ul>

<h4 id="section-2">3. 여러번 반복 하니 편해진다.</h4>
<ul>
  <li>아직 대거를 사용하진 못했지만 기본 싱글톤 인젝션 방식으로 구현되어 있어서 대거를 추가하기 쉬어 보인다.</li>
  <li>기존에는 다음 API 처리문과 use 케이스가 결합되어 있어서 변경 하면 여기 저기 변경이 많이 발생했지만</li>
  <li>지금은 다음에서 네이버로 변경 된다 하더라고 레포지토리만 변경하고 해당 API맞게 받은후 동일한 usecase 를 사용하기에 쉽게 변경 가능하다.</li>
</ul>

<h4 id="mvp--">4. mvp 의 장점</h4>
<ul>
  <li>당연한거지만 다른 레이어와 완전히 분리되어 있어서 로그만 출력하고 추후 개발이 쉽다.</li>
  <li>UI 쪽만 따로 개발 및 테스트가 가능하다.</li>
</ul>

<h4 id="section-3">5. 구글 샘플의 콜백</h4>
<ul>
  <li>use case 콜백은 상당히 유용하다.</li>
  <li>처음에는 사용 안하려고 했지만 기본 언어 이외에 사용하는것도 거의 없다.</li>
  <li>android.os.Handler 만 사용하고 있다.</li>
</ul>

<h4 id="rx--">6. Rx 콜백으로 변경하기</h4>
<ul>
  <li>기존 rx 샘플에 만들어 놓은 apicallback 를 이용해 보겠습니다.
    <ul>
      <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
      <li>폴더이름 Retorfit2T</li>
    </ul>
  </li>
  <li>apicallback 클래스를 복사해서 사용하기</li>
</ul>

<h4 id="section-4">7. 인젝션</h4>
<ul>
  <li>현재 인젝션을 싱글톤으로 주입 하는 방법을 선택했습니다.</li>
  <li>이를 대거를 이용하는 방법은 추후 진행 하겠습니다.</li>
</ul>

<h4 id="section-5">8. 샘플</h4>
<ul>
  <li>입력창에서 문자를 입력하면 핸들러콜백을 이용하는 방식</li>
  <li>버튼을 누르면 rx 를 이요하는 방법 입니다.</li>
  <li>샘플 코드
    <ul>
      <li>MyCleanMvp 폴더입니다.</li>
      <li>프로젝트 그래들에 다음 API 키를 추가해야합니다.</li>
      <li><a href="https://github.com/pyeongho/Sample.git">https://github.com/pyeongho/Sample.git</a></li>
      <li><img src="http://dl.dropbox.com/s/nnzymkk8a9f3vb3/201705090718.png" alt="" /></li>
    </ul>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>구글에서 만든 클린 아키텍처를 이해하고 알아보자</title>
	  <link>//google-todo-clean</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//google-todo-clean</guid>
	  <description><![CDATA[
	     <h3 id="section">구글 클린 아키텍처</h3>
<ul>
  <li>mvp 패턴만 적용 하더라도 구조가 이상해 보인다. 어떻게 하면 좀더 좋은 구조를 만들 수 있을까를 고민하던 중 클린아키텍처가 있었고 그중 구글이 만들 샘플 코드가 기본 라이브러리로만 만들어져서 마음에 들어서 분석하기 시작함</li>
</ul>

<h4 id="section-1">1. 구글 샘플 분석 하기</h4>
<ul>
  <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></li>
  <li>패키지 구분을 어떻게 했는지 직관적인 확인이 어렵다.(아직 적응 못함)</li>
  <li>한눈에 Uncle Bob clean architecture 레이어 확인 가능 할 줄 알았다.</li>
  <li>처음 보이는건 테스트 유닛만 보인다.</li>
  <li>그래도 구글이니 잘 만들었을거라 예상하고 다시 확인 시작</li>
  <li>참고로 구글 프로젝트라서 그런지 구아바를 사용 중
    <ul>
      <li><a href="https://github.com/google/guava">https://github.com/google/guava</a></li>
      <li>구글의 자바 라이브러리라고 생각하면 좋음</li>
      <li><a href="https://blog.outsider.ne.kr/710">구아바를 사용해야 하는 5가지 이유</a></li>
      <li><a href="http://heowc.tistory.com/61">구아바 맛보기</a></li>
    </ul>
  </li>
  <li>todo 앱 으로 할일을 만들고 체크해서 할일 완료 할일을 확인하는 앱이다.</li>
  <li>가장 기본이 되는 엔티티 레이어를 찾아보자</li>
  <li>패키지 이름에 없어서 구조를 확인해서</li>
  <li>아래와 같은 구조로 설계되어 있다</li>
  <li>패키지 이름에서 데이터 소스코드가 보임</li>
  <li>com.example.android.architecture.blueprints.todoapp.data.source</li>
  <li>감사하게 아래처럼 패키지 이름이 정의 되어 있습니다.</li>
  <li>설계와 동일하게 로컬과 리모트 패키지도 보이고</li>
  <li>엔티티 개념을 보이는 내용이 없다.</li>
  <li>클린아키텍처를 이해하기로 앱을 본질은 투두를 만들려고 했으니 기본적인 할일의 제목 할일의 설명 했다, 안했다. 에 대한 클래스가 있을거라 예상 했지만 해당 패키지에는 없다.</li>
  <li>위 데이터레이어 패키지를 확인해보니 Task 라는 클래스가 보인다.</li>
  <li>패키지는 com.example.android.architecture.blueprints.todoapp.tasks.domain.model;</li>
  <li>글을 좀더 자세히 읽어보니 MVP 모델의 중간에 도메인 레이어를 추가한 개념을 사용한걸로 보인다.
    <ul>
      <li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a> 설명에 나와 있는데 안읽고 이제 서야 읽어봄</li>
      <li>위 샘플을 기반을 클린 아키텍처를 구현함</li>
      <li>Google todo mvp 를 살짝 보고 돌아옴</li>
    </ul>
  </li>
  <li>MVP 기반의 코드와 다른 점은 중간에 도메인 레이어를 추가 한 점입니다.</li>
  <li>데이터 &lt;- 도메인 &lt;- 프리젠터 레이어로 구성되어 있습니다.</li>
  <li>TasksDataSource(데이터레이어) &lt;- usecase(도메인레이어) &lt;- 프리젠테이션레이어(사용자)</li>
  <li>처음에는 별로 마음에 안들었지만 보다 보면 볼수록 마음에 듬</li>
  <li>정리중</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>크롬 40+ 버전에서 의 앱 실행 문제</title>
	  <link>//chrome-40</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-04-22T00:00:00+00:00</pubDate>
	  <guid>//chrome-40</guid>
	  <description><![CDATA[
	     <h3 id="section">크롬에서 사용자 제스처 없이 앱 실행은 안됩니다.</h3>
<ul>
  <li>탐색할수없음</li>
</ul>

<h4 id="javascript--body-onload-----">1. javascript 의 body onload 에 마켓 이동하는 코드를 추가</h4>
<ul>
  <li>아래와 같이 간단하게 추가 했는데 마켓으로 이동 안하는 기기들이 있음<br />
  <script src="https://gist.github.com/pyeongho/b26f2f488f00f487a19ab823bbbca27a.js"></script></li>
  <li>크롬 인스펙트를 이용해서 콘솔로그를 확인하니 “탐색할수없음” 이라는 문구가 나옴</li>
</ul>

<h4 id="section-1">2. 구글 검색 시작</h4>
<ul>
  <li>이것 저것 검색 하다 보니 chrome 40+ 이상에서는 동작 안하는다는 내용 확인</li>
  <li>
    <p><a href="https://devtalk.kakao.com/t/onload/15293/2">https://devtalk.kakao.com/t/onload/15293/2</a></p>
  </li>
  <li>그래서 조금더 검색</li>
  <li><a href="http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/">http://blog.tapstream.com/google-changes-chrome-to-prevent-abusive/</a></li>
  <li>에서 내용을 잘 정리해줌</li>
</ul>

<h4 id="section-2">3. 내용 요약</h4>
<ul>
  <li>구글엔지니어가 판도라 앱을 설치</li>
  <li>주소창에 pandora.com 을 크롬에서 입력</li>
  <li>웹사이트로 이동되지 않고 판도앱이 실행됨</li>
  <li>버그로 접수</li>
  <li>수정해 버림</li>
</ul>

<h4 id="section-3">4. 구글의 답변</h4>
<ul>
  <li>
    <p>원문 : From the omnibox, no, there is no plans to allow external redirects.  If typing in the omnibox, the user is showing a strong intent to stay within chrome, so we made the decision to not allow external redirects (too many of them led to what we believed to be bad user experiences).<br />
Clicking on a link should still behave as before and redirect to market:// links. As it stands, how can I programmatically redirect a user to the play store?<br />
There is no plans to support a redirect without a user gesture.</p>
  </li>
  <li>
    <p>번역기 : 검색 주소창에서 외부로 리디렉션을 허용 할 계획이 없습니다. 검색 주소창에 검색어를 입력하면 사용자는 크롬 내에 머물러야한다는 강한 의지를 나타내고 있으므로 외부 리디렉션을 허용하지 않기로 결정했습니다. 너무 많은 사용자가 사용자 경험이 좋지 않다고 생각하는 것으로 이끌었습니다. <br />
링크를 클릭하면 이전과 같이 작동하고 market : // 링크로 리디렉션되어야합니다. 그대로, 어떻게 프로그래밍 방식으로 사용자를 플레이 스토어 로 리디렉션 할 수 있습니까? <br />
사용자 gestur e 없이 리디렉션을 지원할 계획은 없습니다 .</p>
  </li>
</ul>

<h4 id="section-4">5. 수정 사용자 제스처로 이동하게 하면 됩니다.</h4>
<ul>
  <li>사용자 액션안에서 처리하면 됩니다. 아래는 컨펌창으로 한 예제 입니다.</li>
  <li>사용자 액션만 추가 하면 됩니다.<br />
  <script src="https://gist.github.com/pyeongho/af47412cd50a3579484f0d3db285cd73.js"></script></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>제네릭을 이용하여 샘플코드를 좀더 편하게 사용하기</title>
	  <link>//retrofit2-generic</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-19T00:00:00+00:00</pubDate>
	  <guid>//retrofit2-generic</guid>
	  <description><![CDATA[
	     <h3 id="basepresnter-addsubscription---">최종코드의 BasePresnter의 addSubscription를 부분만 확인하면 됩니다.</h3>
<ul>
  <li>API가 추가 될때마다 계속 추가해야하나?</li>
</ul>

<h4 id="api----">1. api 추가되면 어떻게 해야 하나</h4>
<ul>
  <li>기존 코드에서 기계번역 1개의 api만 사용 하고 있습니다.</li>
  <li>만약 api가 계속 추가 되면 응답값이 계속 바뀌면 api 콜백을 계속 추가 해야 하나?</li>
  <li>addSubscription를 계속 만들어야 하나 고민을 시작함</li>
  <li>그래서 간단하게 제네릭 타입의 클래서를 만들고 api콜백과 addSubscription는 하나만 사용하는 방법</li>
  <li>호출 할때만 제네릭에(템플릿이라고 해야 하나!@) 메소드를 호출할때, 콜백을 받을때 원하는 클래스 타입으로 받고 싶었습니다.</li>
  <li>컴파일 에러 안나게 해서 코드를 추가 했지만,,, 값이 들어 오지 않았습니다.</li>
  <li>git 히스토리에 남아 있습니다.</li>
  <li>그래서 다시 시작 하게 되었습니다.</li>
  <li>코드커밋을 잘못해서 기본 객체로 받는것도 올라가 있습니다.(withoutbutter)</li>
</ul>

<h4 id="section">2. 어떻게 접근할것인가?</h4>
<ul>
  <li>현재 문제점 : addSubscription 에 타입이 정해져 있어서 추가하기 귀찮게 되어 있다.</li>
  <li>API콜백은 원하는 클래스로 사용가능하고 api 인터페이스 역시 샘플처럼 있고 계속 추가 하면 될거라고 생각</li>
</ul>

<h4 id="section-1">3. 공부링크</h4>
<ul>
  <li><a href="https://github.com/amitshekhariitbhu/RxJava2-Android-Samples">https://github.com/amitshekhariitbhu/RxJava2-Android-Samples</a></li>
  <li><a href="https://github.com/delicious-mvp/delicious">https://github.com/delicious-mvp/delicious</a></li>
  <li>rxjava1 이지만 공부할게 많다.</li>
</ul>

<h4 id="section-2">4. 처음 부터 잘못 접근</h4>
<ul>
  <li>제넥릭 사용법을 잘 몰라서 이상한짓을 한거임</li>
  <li>addSubscription 에서 제네릭으로 받으면 됩니다.</li>
  <li>RxJava2 map 과 필터 공부로 깔끔하게 마무리</li>
</ul>

<h4 id="section-3">5. 최종 결과를 다운 받기에 폴더 하나 더 만들었습니다.</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>폴더이름 Retorfit2T</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>AndroidAnnotation을 공부 하자</title>
	  <link>//AndroidAnnotation</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-14T00:00:00+00:00</pubDate>
	  <guid>//AndroidAnnotation</guid>
	  <description><![CDATA[
	     <h3 id="androidannotation----">안드로이드에서 AndroidAnnotation을 이용해서 앱을 개발해 보자</h3>
<ul>
  <li>어노테이션 기능으로 좀금더 편하게 의존성을 주입해서 앱을 개발하는 방법 입니다.</li>
  <li><a href="http://androidannotations.org/">http://androidannotations.org/ 공식사이트</a></li>
</ul>

<h4 id="section">1. 환경 설정</h4>
<ul>
  <li><a href="https://github.com/androidannotations/androidannotations/wiki/Building-Project-Gradle">https://github.com/androidannotations/androidannotations/wiki/Building-Project-Gradle</a></li>
  <li>그래들 환경이라서 편하게 추가 할 수 있습니다.</li>
  <li>
    <p>프로젝트 레벨 그래들</p>
  </li>
  <li>
    <script src="https://gist.github.com/pyeongho/47dbeb046afeee449fbe52f00cc43efc.js"></script>
  </li>
  <li>app 레벨 그래들 변경내용</li>
</ul>

<pre><code class="language-gradle">apply plugin: 'com.android.application'
apply plugin: 'android-apt'

def AAVersion = '4.1.0'

...
dependencies {
 ...
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
 ...   
}

</code></pre>

<h4 id="databinding---">2. databinding 과 함께 사용하기</h4>
<ul>
  <li>databinding 의 BaseActivity 를 사용한다.</li>
  <li>@EActivity 에 레이아웃 파일을 추가하지 않는다.</li>
  <li>기본 Activity 의 onCreate 에서 레이아웃을 처리 한다.</li>
</ul>

<h4 id="section-1">3. 네이버 기계번역을 안드로이드 어노테이션으로 샘플코들르 만들어 보았습니다.</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>AndoroidAnnotation 폴더에 있습니다.</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
