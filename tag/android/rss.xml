<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>안드로이드 태생</title>
	  <link>//basic</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-05-24T00:00:00+00:00</pubDate>
	  <guid>//basic</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li>참고 글이 원본 입니다. </li>
<li>공부하기 위해서 재 작성한 내용입니다. 원본을 확인해 주세요.</li>
<li><a href="http://blog.naver.com/huewu/110085391353">안드로이드의 멀티태스킹 (Multitasking the Android Way)</a></li>
</ul>

<h3>메모리는 부족하지만 모든 어플리케이션은 항상 실행 중 인것처럼</h3>

<ul>
<li>우리는 사용자에게 특정 어플리케이션 사용을 끝마쳤을 때, 명시적으로 어플리케이션을 종료하지 않아도 되기를 원했다. 사용자들은 다양한 종류의 어플리케이션을 아주 짧게 그리고 반복적으로 사용하기 때문이다.</li>
<li>휴대용 장치들은 풍족한 스왑 메모리 공간을 갖고 있지 못하며, 메모리 사용에 빡빡한 제한을 갖고 있다. (첨:아주 짧게 여러개를 사용하면 부족해 질 수 있다.)</li>
<li>모바일 디바이스에서 어플리케이션 스위칭은 중요하다. 우리는 새로운 어플리케이션이 1초 이내에 시작될 수 있도록 굉장한 노력을 기울였다. 비디오를 보다가 새로 도착한 SMS 문자를 확인하고 다시 비디오 플레이 어플리케이션으로 돌아가는 등의 사용자 시나리오를 생각해 본다면, 몇몇 어플리케이션간의 빠른 스위칭은 특히 더 중요한 문제이다.</li>
<li>사용할 수 있는 API 는 안드로이드에 기본 내장된 구글 어플리케이션을 만들 수 있을 만큼 충분히 강력해야 한다. 이것은 우리의 &#39;모든 어플리케이션은 동등하다,&#39; 라는 철학의 문제이다. 즉, 백그라운드 음악 재생, 데이타 동기화, GPS 네비게이션, 어플리케이션 다운로드등의 기능은 서드 파티 어플리케이션 개발자들이 사용가능한 API 와 동일한 API 를 이용해서 작성되어야 한다. </li>
</ul>

<h3>안드로이드에서 프로세스 와 어플리케이션</h3>

<ul>
<li>안드로이드에서 프로세스와 어플리케이션은 밀접하게 연결(tightly coupled)되어 있는 요소가 아니며, 어플리케이션은 해당 어플리케이션을 작동시키고 있는 프로세스가 없음에도 사용자에게 현재 작동하고 있는 것 처럼 보일 수도 있고, 또, 여러 어플리케이션이 프로세스를 공유 할 수도 있습니다. 혹은 필요에 따라 하나의 어플리케이션이 여러개의 프로세스를 사용할 수도 있고, 실재로 어플리케이션이 작동 중이 아님에도, 어플리케이션을 구동했던 프로세스들은 종료되지 않고 안드로이드 시스템에 의해 유지될 수 있습니다.</li>
<li>어플리케이션의 프로세스는 단순히 안드로이드 시스템이 해당 프로세스가 필요 했었고, 이 후에 해당 프로세스가 다시 사용될 경우에 대비해서 프로세스를 유지하기로 결정했기 때문에 살아있는 것 뿐입니다.</li>
<li>안드로이드가 어플리케이션을 관리하는 핵심은 프로세스를 깔끔하게 종료시키지 않는 것입니다.</li>
</ul>

<h3>Explicitly running in the background : 명시적으로 백그라운드 작업</h3>

<ul>
<li>어플리케이션은 안드로이드 시스템에게 명시적으로 백그라운드 상에서 작업이 수행되어야 함을 알릴 필요가 있습니다. 어플리케이션은 메니페스트 상에 &#39;Broadcast Receiver&#39; 혹은 &#39;Service&#39; 요소를 선언할 수 있으며, 이 두가지 요소를 통해 명시적으로 백그라운드 작업을 수행 할 수 있습니다.</li>
<li>Broadcast Receiver

<ul>
<li> Broadcast Receiver 는 어플리케이션이 특정한 이벤트가 발생하는 경우에, 아주 짧은 시간동안 백그라운드에서 작업 가능</li>
</ul></li>
<li>Service

<ul>
<li>어플리케이션이 안드로이드 시스템에게 &quot;헤이~ 나는 내가 종료되었다고 하기 전까지 백그라운드에서 계속해서 작동했으면 좋겠어!&quot; 라고 알려주는 것입니다. 어플리케이션은 명시적으로 Service 를 시작 하거나 종료 시킬 수 있습니다.</li>
<li>메모리가 부족해 진다면, Service 가 작동중인 프로세스 또한 강제로 종료</li>
<li>Service 는 안드로이드 시스템에 미리 자신을 &#39;Foreground&#39; 상태로 간주해 달라고 이야기할 수도 있습니다. 이것은, &quot;나를 죽이지 마세요&quot; 라는 뜻인데, 이 경우 해당 Service 는 사용자에게 자신이 현재 작동중임을 Notification (안드로이드 화면 상단의 상태바) 을 통해 표시해 주어야 합니다</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 context</title>
	  <link>//context</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-05-24T00:00:00+00:00</pubDate>
	  <guid>//context</guid>
	  <description><![CDATA[
	     <h3>참고</h3>

<ul>
<li>참고 글이 원본 입니다. </li>
<li>공부하기 위해서 재 작성한 내용입니다. 원본을 확인해 주세요.</li>
<li><a href="https://arabiannight.tistory.com/entry/272">안드로이드/Android Context 란?</a></li>
</ul>

<h3>Context</h3>

<ul>
<li><p><a href="https://developer.android.com/reference/kotlin/android/content/Context.html">안드로이드 개발자사이트 Context</a>
```
Interface to global information about an application environment. 
This is an abstract class whose implementation is provided by the Android system.
It allows access to application-specific resources and classes, 
as well as up-calls for application-level operations such as launching activities, 
broadcasting and receiving intents, etc.</p>

<p>어플리케이션 환경에 관한 글로벌 정보에 접근하기위한 인터페이스. Abstract 클래스이며 실재 구현은<br>
안드로이드 시스템에 의해 제공된다. Context를 통해, 어플리케이션에 특화된 리소스나 클래스에 접근할 수 있을뿐 아니라,
추가적으로 어플리케이션 레벨의 작업. activity 실행, intent 브로드캐스트, intent 수신 등을 한다. 
```</p></li>
<li><p>Context 는 크게 두 가지 역할을 수행하는 Abstract 클래스 입니다.</p>

<ul>
<li>어플리케이션에 관하여 시스템이 관리하고 있는 정보에 접근하기(getPackageName() 등)<br></li>
<li>안드로이드 시스템 서비에서 제공하는 API 호출 (startActivity() 등)</li>
</ul></li>
<li><p>Context 는 어플리케이션과 관련된 정보에 접근하고자 하거나 어플리케이션과 연관된 시스템 레벨의 함수를 호출하고자 할 때 사용됩니다. 그런데 안드로이드 시스템에서 어플리케이션 정보를 관리하고 있는 것은 시스템이 아닌, ActivityManagerService 라는 일종의 또 다른 어플리케이션입니다. 따라서 다른 일반적은 플랫폼과는 달리, 안드로이드에서는 어플리케이션과 관련된 정보에 접근하고자 할때는 ActivityManagerService 를 통해야만 합니다. 당연히 정보를 얻고자 하는 어플리케이션이 어떤 어플리케이션인지에 관한 키 값도 필요해집니다.</p></li>
<li><p>Context 역할</p>

<ul>
<li>자신이 어떤 어플리케이션을 나타내고 있는지 알려주는 ID 역할</li>
<li>ActivityManagerService 에 접근할 수 있도록 하는 통로 역할 </li>
</ul></li>
<li><p>Context 를 가지고 다른 시스템 애플리케이션들에게 명령하거나 값을 가지고 온다. </p></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="https://arabiannight.tistory.com/entry/272">안드로이드/Android Context 란?</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>루팅 기기에서 원격 ADB</title>
	  <link>//root_adb</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-04-11T00:00:00+00:00</pubDate>
	  <guid>//root_adb</guid>
	  <description><![CDATA[
	     <h3>루팅 기기에서 ADB 원격 가능하도록 하는 방법</h3>

<p><script src="https://gist.github.com/pyeongho/20bc05ab4648c13cf29d2fb7eff583ad.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>인증서 피닝, 인증서 고정</title>
	  <link>//cert_pinning</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-04-04T00:00:00+00:00</pubDate>
	  <guid>//cert_pinning</guid>
	  <description><![CDATA[
	     <h3>https 사용 시 인증서를 고정 하자</h3>

<ul>
<li>frida를 이용해서 인증서를 변경해서 공격이 가능해 보인다.</li>
<li>보안팀에서 인증서 피닝을 해달라고 요청이 왔다.</li>
<li>내용을 물어 보고 찾아보니 인증서 값을 공정 하는 내용</li>
<li>인증서를 미리 확인해서 핀으로 고정 한다.</li>
</ul>

<h3>okhhtp를 사용 하기에 해당 내용만 기술</h3>

<ul>
<li>방법

<ul>
<li>API 서버의 정보를 찾는다.</li>
<li>찾은 인증서 정보를 okhttp client 에 추가해 준다.</li>
</ul></li>
</ul>

<h3>okhhtp를 활용해 인증서 정보 찾기</h3>

<ul>
<li><p>아래 클래스를 활용해서 코드를 실행
<script src="https://gist.github.com/pyeongho/7fdab667be595ec8e77af3ffb6478410.js"></script></p></li>
<li><p>Rx 를 사용하기 때문에 아래 처럼 대충 코드를만들어서 실행
<script src="https://gist.github.com/pyeongho/2b149508ef2d92583298e26f8f2fde60.js"></script></p></li>
<li><p>아래처럼 에러가 출력 됩니다. 발견한 개수는 도메인 마다 다를수 있습니다.</p></li>
</ul>
<div class="highlight"><pre><code class="language-" data-lang="">  Certificate pinning failure!
        Peer certificate chain:
          sha256/발견한 내용1=: CN=*.도메인,OU=Domain Control Validated
          sha256/발견한 내용2=: CN=AlphaSSL CA - SHA256 - G2,O=GlobalSign nv-sa,C=BE
          sha256/발견한 내용3=: CN=GlobalSign,O=GlobalSign,OU=GlobalSign Root CA - R3
        Pinned certificates for 도메인:
          sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=

</code></pre></div>
<h3>okhhtp를 활용해 인증서 고정</h3>

<ul>
<li>에러로 출력되는 내용을 자신의 okhttp client에 추가  아래와 같은 형태로 추가후 동작 확인</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">      private val client: OkHttpClient = OkHttpClient.Builder()
              .certificatePinner(
                      CertificatePinner.Builder()
                              .add(dmoain, "sha256/발견한 내용1 =")
                              .add(dmoain, "sha256/발견한 내용2 =")
                              .add(dmoain, "sha256/발견한 내용3 =")
                              .build())
              .build()

</code></pre></div>
<h3>API 통신후 문제 없으면 성공 입니다.</h3>

<ul>
<li>운영이슈 조심</li>
<li>인증서 갱신에는 해당 내용이 안 바뀐다는 첩보 수신</li>
<li>인증서 교체나 재바급은 당연히 이슈 발생 하니 잘 확인해야 합니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>플레이스토어 활용</title>
	  <link>//playstore</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-04-02T00:00:00+00:00</pubDate>
	  <guid>//playstore</guid>
	  <description><![CDATA[
	     <h3>플레이스토어 활용</h3>

<ul>
<li><p>예약게시 기능</p>

<ul>
<li>플레이스토어 언젠가 부터 예약게시 기능이 생성 되었다.</li>
<li>원하는 날짜에 자동으로 되는 예약이 아니다.</li>
<li>스토어 등록 정보 하단에 있는 예약 게시 기능을 활성화 하면 바이너리 활성화 이후 스토어 배포 준비가 되면 사용자가 직접 게시 버튼을 눌러서 원하는 시간에 업데이트가 가능하다.</li>
<li>기존에는 바이너리 업데이트후 검토 완료후 자동으로 게시 되어 정확한 시간을 알수가 없었다.</li>
<li>예약게시를 활성화 이후에는 검토가 완료 되면 게시 버튼이 활성화가 된다.</li>
<li>원하는 시간 몇분전에(플레이스토어 반영 시간) 게시 버튼만 누르면 된다.</li>
</ul></li>
<li><p>비공개 트랙, 알파 트랙</p>

<ul>
<li>테스트를 진행하면서 바이너리를 전달하기 힘들때 사용하면 좋다.</li>
<li>비공개 트랙을 만들어서 테스트를 진행하면 실제 스토어에서 다운 받아서 테스가 가능하다</li>
<li>심지어 업데이트도 가능</li>
<li>비공개 트랙도 바이너리 업데이트 이기 때문에 예야 게시와 함께 사용 됩니다.</li>
<li>예를 들어 예약 게시 활성후에는 비공개 트랙도 영향받아서 게시 버튼을 눌러야 기능이 활성화 됩니다.</li>
<li>자동화 테스트</li>
<li>파이어 베이스에도 있는 기능 이지만 로보 테스트를 활용하여 기본적인 테스트 가능하다.</li>
<li>클릭 스와이프등을 자동으로 테스트 하여 준다.</li>
<li>구글이 원하는 기본적인 버튼 규격 또는 성능에 미달하는것도 테스트 가능하다.</li>
<li>현재 공부 중인 내용은 input 필드에 내용 추가 하는 방법이다

<ul>
<li>리소스 아이디 입력후 원하는 값을 입력 하면 된다고 하지만</li>
<li>5개중에 2개만 성공 하여서 원인 파악하면서 진행 하고 있다.</li>
</ul></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>기본 레프트 메뉴의 활용</title>
	  <link>//left_menu</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-03-22T00:00:00+00:00</pubDate>
	  <guid>//left_menu</guid>
	  <description><![CDATA[
	     <h3>레프트 메뉴의 다양화</h3>

<ul>
<li>애플리케이션 개발 시 디자이너의 메뉴 화면은 여러 개가 있다.</li>
<li>디자이너가 요청 하는 내용

<ul>
<li>안드로이드 기본 에서 선택 하는 메인 화면을 가리는 형태</li>
<li>메인 화면을 밀고 가는 내용</li>
<li>메인 화면이 작아 지면서 메뉴가 나오는 형태</li>
</ul></li>
<li>위 내용 처럼 대략 3가지 정도로 요약 됨</li>
<li>처음에는 라이브러리르 찾아서 적용 했는데 뭔지 모르게 버그도 있는거 같고 조금 무거운 느낌도 있다.</li>
<li>다양한 메뉴가 기본 DrawerLayout 으로 충분히 가능하다.</li>
</ul>

<h3>기본적인 내용을 이용하는 방법</h3>

<ul>
<li>DrawerLayout 기본 샘플은  새로운 프로젝트를 시작 하여 네비게이션 드로어를 선택</li>
<li>메뉴 사이즈는  android:layout_gravity=&quot;start&quot; 속성을 가지는 레이아웃을 폭을 조정 하면 된다.</li>
<li>메뉴가 나올때 그림자 색상은 아래 처럼 옵션을 설정 한다. 아래는 그림자 제거

<ul>
<li>drawerLayout.setScrimColor(Color.TRANSPARENT);</li>
</ul></li>
<li><p>메인화면 밀기는 아래 코드 처럼 사용 하였습니댜.</p>

<ul>
<li>contentFrame 메인화면 레이아웃 입니다.</li>
<li>slideOffset 을 이용하여 메인화면의 좌표를 변경 하는 방법 입니다.</li>
<li><script src="https://gist.github.com/pyeongho/02c696d302047ee3aa5d859fb73c16e6.js"></script></li>
</ul></li>
<li><p>메인 화면을 이동하는 코드를 확용 하면 원하는 형태를 만들 수 있습니다.</p>

<ul>
<li><script src="https://gist.github.com/pyeongho/b77bd2e392a7e8355c068d5fb28098b9.js"></script></li>
<li>위와 같이 적용 하면 메인 화면의 사이즈가 작아 지면서 처리가 됩니다.</li>
</ul></li>
</ul>

<h3>참고</h3>

<ul>
<li><a href="http://thetechnocafe.com/slide-content-to-side-in-drawer-layout-android/">http://thetechnocafe.com/slide-content-to-side-in-drawer-layout-android/</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>그냥 지식</title>
	  <link>//how_phkim</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-02-21T00:00:00+00:00</pubDate>
	  <guid>//how_phkim</guid>
	  <description><![CDATA[
	     <h3>PublishSubject , BehaviorSubject 비교</h3>

<ul>
<li><p>PublishSubject : 비어있는 시작하고 구독자에게만 새로운 요소를 방출합니다. PublishSubject가 생성시 즉시 요소를 방출하기 때문에 Subject가 작성되고 관찰자가 등록 할 때 하나 이상의 항목이 손실 될 수 있습니다.</p></li>
<li><p>BehaviorSubject : 초기 값이 필요하고 새로운 가입자에게 최신 요소를 재생합니다. BehaviorSubject는 항상 최신 요소를 방출하기 때문에 기본 초기 값을 제공하지 않고 만들 수 없습니다. BehaviorSubject는 &quot;시간 경과에 따른 값&quot;을 묘사 할 때 유용합니다. 예를 들어, 생일의 이벤트 스트림은 제목이지만, 사람의 나이의 흐름은 BehaviorSubject가됩니다.</p></li>
</ul>

<h3>복사 하기</h3>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    val clipboard = v.context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
     clipboard.primaryClip = ClipData.newPlainText("힌트","복사할 내용")
</code></pre></div>
<h3>zxing QR 코드 생성 아래처럼 길게 사용 가능 생각보다 오래 걸려서 비동기 처리</h3>

<script src="https://gist.github.com/pyeongho/a648449d43ca2bafd5d075a1c6382055.js"></script>

<h3>zxing QR 코드 코드만</h3>

<script src="https://gist.github.com/pyeongho/140951225375239ed0567b60ca55e112.js"></script>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 나인패치 그림자 만들어 주는 사이트</title>
	  <link>//nine_shadow_link</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-01-09T00:00:00+00:00</pubDate>
	  <guid>//nine_shadow_link</guid>
	  <description><![CDATA[
	     <h3>그림자를 빠르게 만들기위한 사이트 링크</h3>

<ul>
<li>라운드</li>
<li>그림자 색상</li>
<li>블러 사이즈</li>
<li>위치 오프셋 등 원하는대로 금방 만들수 있어요</li>
<li><a href="http://inloop.github.io/shadow4android/">그림자만들기</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 UI 모음</title>
	  <link>//collect_ui_link</link>
	  <author>PyeongHo</author>
	  <pubDate>2019-01-07T00:00:00+00:00</pubDate>
	  <guid>//collect_ui_link</guid>
	  <description><![CDATA[
	     <h3>디자이너가 원하는 라이브러리를 찾아보자</h3>

<ul>
<li>앱을 만들다 보면 커스텀 UI 가 필요한 경우가 너무 많다.</li>
<li>시간이 있는것도 아니고 시간이 있어도 기존에 나온것 보다 잘 만들기 어려우니</li>
<li>디자이너가 원하는 라이브러리를 찾아서 라이브러를 커스텀 해서 사용하자</li>
</ul>

<h3>링크 모음</h3>

<ul>
<li>GIF로 기본적인 동작이 잘 나와 있으니 보면서 필요 한걸 찾아서 사용 하면 좋다.</li>
<li><a href="https://github.com/wasabeef/awesome-android-ui">안드로이드  UI 모음 1</a></li>
<li><a href="https://www.ctolib.com/topics-113375.html">안드로이드  UI 모음 2</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>데이터바인딩과 뷰모델</title>
	  <link>//viewmodel</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-12-28T00:00:00+00:00</pubDate>
	  <guid>//viewmodel</guid>
	  <description><![CDATA[
	     <h3>데이터바인딩을 이용한 뷰모델</h3>

<ul>
<li>기존 프로젝트중 화면 하나를 변경<br></li>
<li>화면은 viewpager에 이미지 추가(횡으로 한칸 한칸 이동)</li>
<li><p>LinearLayout 에 현재 이미지 위치를 표시해 주는 포인트 추가</p>

<ul>
<li>이미지 개수가 최대 몇개인지 알수 없는 API 인지라 imageview를 동적 할당 하여 넣어줌 </li>
</ul></li>
<li><p>아래가 XML 
<script src="https://gist.github.com/pyeongho/ae301847d752e8a6fbd7909a4e3632ea.js"></script></p></li>
<li><p>뷰모델 
<script src="https://gist.github.com/pyeongho/7b47e6abfb5f1c8b1ffb03fc5f0d2dcd.js"></script></p></li>
<li><p>생각보다 괜찮은 방법으로 보임</p></li>
<li><p>해야할 작업은 많아 지지만 매우 만족 스러움</p></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
