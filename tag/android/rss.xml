<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>안드로이드 스와이프백</title>
	  <link>//swipe_back</link>
	  <author>PyeongHo</author>
	  <pubDate>2018-01-26T00:00:00+00:00</pubDate>
	  <guid>//swipe_back</guid>
	  <description><![CDATA[
	     <h3>웹뷰와 네이티브의 연동시 꼭필요한 웹뷰 확장</h3>

<ul>
<li>손가락으로 드래그하여 액티비티 종료 하는 라이브러리 입니다.</li>
<li>iOS에서 자주 사용 되지만 안드로이드에서도 사용 할 수 있습니다.</li>
<li>아래가 오리지널 코드 위치 입니다.</li>
<li><a href="https://github.com/liuguangqiang/SwipeBack">스와이프백</a></li>
<li>코드분석은 setContentView 를 할때 루트에 스와이프 레이아웃을 추가하여 터치 이벤트를 전역으로 사용 할 수 있게 하여 드래그로 액티비티를 종료 할 수 있도록 한 라이브러리 입니다.</li>
</ul>

<h3>현재 제가 사용하는 코드는 프래그먼트 기반이라서 동작하지 않았습니다.</h3>

<ul>
<li>약간의 변경으로 프래그먼트에서 동작 하도록 하였습니다.</li>
<li>드래그로 완료시 액티비티 종료코드를 리스너로 등록하여 콜백을 받음</li>
<li>콜백 받은곳에서 프래그먼트를 제거 하는 형태 입니다.</li>
</ul>

<h3>SwipeBackLayout 추가</h3>

<ul>
<li>아래 코드를 기본코드에서 변경</li>
<li><script src="https://gist.github.com/pyeongho/de9bfd8d2fd3468f65c102284a25dc31.js"></script></li>
</ul>

<h3>SwipeBackFragment 추가</h3>

<ul>
<li>SwipeBackActivity 를 조금만 변경하여 아래 처럼 만들었습니다.</li>
<li>사용할 프래그먼트에서 SwipeBackFragment를 상속 받고 아래 처럼 사용하면 됩니다. </li>
<li>아래와 같이 setContentView 를 호출 하여 사용하면 동작 합니다.</li>
<li><p>기본적인 사용법은 swipeBack 과 동일합니다.
<code>kotlin 
  override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        setContentView(R.layout.layout_notice)
        setDragEdge(SwipeBackLayout.DragEdge.TOP) // 스와이프 방향
        return super.onCreateView(inflater, container, savedInstanceState)
    }
</code></p></li>
<li><script src="https://gist.github.com/pyeongho/80330d4b1218e4aeaf67ba8fd7327acc.js"></script> </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 네스티드 웹뷰</title>
	  <link>//nested_webview.1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-27T00:00:00+00:00</pubDate>
	  <guid>//nested_webview.1</guid>
	  <description><![CDATA[
	     <h3>웹뷰와 네이티브의 연동시 꼭필요한 웹뷰 확장</h3>

<ul>
<li>웹뷰를 스크롤 하면 툴바가 사라지거나 </li>
<li>BottomSheet 에 웹뷰를 추가 했으때도 RecyclerView 처럼 스크롤 되는걸 원할 때 </li>
</ul>

<h2>bottom sheets 샘플은 <a href="http://thdev.tech/">꿈 많은 개발자가 되자</a> 코드 입니다.</h2>

<h3>네스티드 웹뷰 동작</h3>

<ul>
<li><p>일반 웹뷰
<img src="https://drive.google.com/uc?export=view&amp;id=10ht2zV7vkXuKizDFTHpM7eQqmkuOjnIV" alt="webview"> </p></li>
<li><p>네스티드 웹뷰
<img src="https://drive.google.com/uc?export=view&amp;id=1L1XlYTFKd4d5VOMggToi01wTywhdO_Hj" alt="네스티드">    </p></li>
</ul>

<h3>네스티드 웹뷰 코드</h3>

<ul>
<li>참고 : <a href="https://github.com/takahirom/webview-in-coordinatorlayout">https://github.com/takahirom/webview-in-coordinatorlayout</a></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/fbe0ecd55df127365179b65098ad4b25.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 TextView Padding 문제</title>
	  <link>//no_padding_textview</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-27T00:00:00+00:00</pubDate>
	  <guid>//no_padding_textview</guid>
	  <description><![CDATA[
	     <h3>디자인가이드를 적용하면서 문제가 발생하는 부분은 역시 TextView 패딩</h3>

<ul>
<li>TextView로 구성된 화면에서 마진으로 간격이 조정된 디자인 가이드를 받으면 생각 했던거 보다 간격이 훨씬 벌어짐</li>
<li>처음에 적용 했던 내용은 includeFontPadding을 false 로 적용 함<br></li>
<li>약간 줄어 들긴 하지만 완벽 하게 적용 되진 않았습니다.</li>
<li><p>아래 이미지     </p>

<ul>
<li><img src="https://drive.google.com/uc?export=view&amp;id=1nnjL0afBO2rmZOXJzbi95P6lef2XWRA-" alt="이렇게"><br></li>
<li>왼쪽이 일반 TextView에 includeFontPadding를 적용한 버전, 패딩을 완전히 제거한 버전 입니다.</li>
<li>xml 코드 첨부하였습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">    <span class="nt">&lt;TextView</span>
          <span class="na">android:includeFontPadding=</span><span class="s">"false"</span>
          <span class="na">android:background=</span><span class="s">"#00ff00"</span>
          <span class="na">android:text=</span><span class="s">"ABCD"</span>
          <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
          <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;NPTextView</span>
          <span class="na">android:includeFontPadding=</span><span class="s">"false"</span>
          <span class="na">android:background=</span><span class="s">"#00ff00"</span>
          <span class="na">android:text=</span><span class="s">"ABCD"</span>
          <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
          <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

</code></pre></div></li>
<li><p>NPTextView는 1줄 짜리에만 적용해서 사용해야 합니다. 여러줄은 아직 동작 안합니다.</p></li>
<li><p>그리고 직접 추가한 패딩 역시 제거하기때문에 잘 사용해야 합니다.</p></li>
<li><p>코드 내용은 텍스트 크기를 읽어서 Rect 사이즈를 타이트하게 고정하는 내용입니다.</p></li>
</ul>

<p><script src="https://gist.github.com/pyeongho/859d82d7f30a4005ad7fd1e38ddd6512.js"></script></p>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 알쓸신잡 1</title>
	  <link>//tips1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-24T00:00:00+00:00</pubDate>
	  <guid>//tips1</guid>
	  <description><![CDATA[
	     <h3>NavigationView 상단 그림자</h3>

<ul>
<li>안드로이드 기본 메뉴를 사용중에 아래와 같은 요구 사항이 들어 올때 처리 방법

<ul>
<li><img src="https://drive.google.com/uc?export=view&amp;id=1mN322WnoJSJWKYxHEQIT5Cl4ynUxKK46" alt="이렇게"></li>
<li>for tag:  NavigationView remove shadow </li>
</ul></li>
<li>처음에는 DrawerLayout, NavigationView 속성을 열심히 찾음

<ul>
<li>DrawerLayout의 StatusBar 은 투명하게 되고, 메뉴 나올때 그림자도 제거 가능</li>
<li>정작 하고 싶음 NavigationView 상단 statusbar 그림자가 남아 있음</li>
<li>NavigationView 코드를 확인 하면서 발생한 생각 상다바 만큼 알파값을 위에 추가한 느낌</li>
</ul></li>
<li>설마 하면서 NavigationView marginTop 을 -24dp 로 설정하니 그림자가 안보임 </li>
<li>그래서 내린 알쓸신잡 NavigationView 에서 상단에 알파값을 주기 때문에 상태바 만큼 위로 올려 버리니 동작 </li>
<li><p>24만큼 올렸으니 컨텐츠는 24만큼 내려야 합니다. 아래 처럼 android:layout_marginTop=&quot;-24dp&quot; 발견하기 까지 많은 시간이 걸렸습니다.</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;android.support.design.widget.NavigationView</span>
    <span class="na">android:id=</span><span class="s">"@+id/nav_view"</span>
    <span class="na">android:layout_marginTop=</span><span class="s">"-24dp"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_gravity=</span><span class="s">"start"</span>
    <span class="na">android:fitsSystemWindows=</span><span class="s">"true"</span>
    <span class="na">app:headerLayout=</span><span class="s">"@layout/nav_header_main"</span>
    <span class="na">app:menu=</span><span class="s">"@menu/activity_main_drawer"</span> <span class="nt">/&gt;</span>
</code></pre></div></li>
</ul>

<h3>안드로이드 스튜디오 실행기기 다중 선택</h3>

<ul>
<li>한개만 선택해야 한다는 고정 관념</li>
<li>shift f10 을 이용해서 실행 단일 기기 선택 </li>
<li>원하는 디바이스 선택 후 테스트 </li>
<li>너무 고정 관념 처럼 사용함</li>
<li>안드로이드 스튜디오 3.0 에서는 이 방법을 사용하기 힘든 이상하게 타겟이 고정됨</li>
<li>그런데 다른 방법으로 해결 고정 관념 타파</li>
<li>아래 그림 처럼 실행시 기기를 여러개 선택 가능하다.</li>
<li>여러개 선택하면 동시에 설치되고 실행
<img src="https://drive.google.com/uc?export=view&amp;id=1T2U0bqErnqhc1G39-BvWyTjCRbfdPkUI" alt="다중선택"></li>
</ul>

<h3>Kotlin DP &lt;-&gt; PX 변경 함수</h3>

<ul>
<li>베이스 액티비티나,  베이스 프래그먼트에 추가해 놓으면 편합니다.</li>
<li><p>사용법</p>

<ul>
<li>144.toDP</li>
<li>36.toPx</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">val Int.toDp: Int
    get() = (this / Resources.getSystem().displayMetrics.density).toInt()

val Int.toPx: Int
    get() = (this * Resources.getSystem().displayMetrics.density).toInt()
</code></pre></div></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Shared elements</title>
	  <link>//sharedelements</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-21T00:00:00+00:00</pubDate>
	  <guid>//sharedelements</guid>
	  <description><![CDATA[
	     <h3>머티리얼 화면 전환, Shared Elements</h3>

<ul>
<li>플레이스토어에서 앱을 선택하면 리스트의 이미지가 스르르하면서 커지면서 화면 전환이 발생</li>
<li>처음에는 엄청난 라이브러리를 사용한지 알았지만 안드로이드 기본을 이용하면 된다.</li>
<li>안드로이는 구현보다 무엇을 사용하지만 알면 금방 적용 할수 있습니다. </li>
<li>일단 처음 발견한 링크 입니다.

<ul>
<li><a href="https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb">fragment-transitions-with-shared-elements</a><br></li>
</ul></li>
<li>위 링크를 보고 사용하는 내용이 shared-elements 라는것을 알고 사용하기로 함</li>
<li>5.0 이상만 가능하지만 이제는 5.0 미만에서의 애니메이션은 신경 안쓰기로 결정함 </li>
<li>shared-elements 를 키워드로 검색</li>
<li>안드로이드 개발자 사이트 참고 링크

<ul>
<li><a href="https://developer.android.com/training/material/animations.html?hl=ko">https://developer.android.com/training/material/animations.html?hl=ko</a></li>
</ul></li>
<li>다른 사람이 만든 공부하기 쉬운 샘플코드

<ul>
<li><a href="https://github.com/mikescamell/shared-element-transitions">https://github.com/mikescamell/shared-element-transitions</a></li>
</ul></li>
<li>프래그먼트에서 프래그먼트로 이동할 때 만 적어 보겠습니다.

<ul>
<li>각각의 상황에 맞는 내용은 위 링크 샘플에 잘 정리 되어 있습니다.</li>
</ul></li>
<li><p>A 프래그먼트에 이미지 뷰를 추가</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:id=</span><span class="s">"@+id/logo"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:layout_centerInParent=</span><span class="s">"true"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>android:transitionName 속성이 2번째 프래그먼트에도 동일하게 사용됩니다.</li>
</ul></li>
<li><p>A 프래그먼트 에서 B 프래그먼트 생성 및 A 프래그먼트 삭제 </p>

<ul>
<li>참고 addToBackStack(TAG) 을 이용해서 뒤로가기 가능하도록 가능합니다.(플레이스토어 처럼 반대 애니메이션 동작 합니다.)</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">  val mainFragment = MainFragment.newInstance("")
  supportFragmentManager
            .beginTransaction()
            .addSharedElement(img, ViewCompat.getTransitionName(img))
            .remove(intro)
            .replace(R.id.contentFrame, mainFragment)                
            .commit()
</code></pre></div></li>
<li><p>여기서 중요한건 아래 내용입니다.</p>

<ul>
<li>.addSharedElement(img, ViewCompat.getTransitionName(img))</li>
<li>img 는 A 프래그먼트의 ImageView 객체 입니다.</li>
<li>메소드명처럼 엘레먼트를 전달하여 B 프래그먼트에서 활용 하는걸로 보입니다</li>
</ul></li>
<li><p>B 프래그먼트</p>

<ul>
<li>onCreate 생성자에 아래 내용을 추가해 줍니다.</li>
<li>transition.move 를 수정하면 다양한 효과가 있을거라 생각하지만 move 로 충분 했습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            sharedElementEnterTransition = TransitionInflater.from(context).inflateTransition(android.R.transition.move)
        }
    }
</code></pre></div>
<ul>
<li>B 프래그먼트에 이미지뷰 추가</li>
<li>이번에도 transitionName 필드에 주의해 주세요</li>
<li>사이즈를 고정한건 이동하면서 객체가 작아지는걸 볼려고 추가한 내용입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:layout_centerHorizontal=</span><span class="s">"true"</span>
    <span class="na">android:id=</span><span class="s">"@+id/fragment_b_imaged"</span>
    <span class="na">android:layout_width=</span><span class="s">"30dp"</span>
    <span class="na">android:layout_height=</span><span class="s">"30dp"</span>
    <span class="na">android:scaleType=</span><span class="s">"centerCrop"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">tools:ignore=</span><span class="s">"UnusedAttribute"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>여기까지 추가 하면 기본적인 동작을 확인 가능합니다.</li>
<li>좀더 많은 내용은 중간에 추가된 샘플이 좋습니다.<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>롤리팝 이상에서 백그라운드 푸시 보내기</title>
	  <link>//push</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-07-22T00:00:00+00:00</pubDate>
	  <guid>//push</guid>
	  <description><![CDATA[
	     <h3>백그라운드 푸시 적용</h3>

<ul>
<li>롤리팝 이상에서 앱이 백그라운드 상태에서는 푸시를 수신하는 코드가 동작 하지 않고 운영체제에서 알림을 발생시킨다.</li>
<li>파이어베이스 콘솔에서 푸시를 발송하면 OS 에서만 수신 

<ul>
<li>이유를 찾아 보니 푸시 메시지 notification 이 있을 때 앱에서 푸시를 수신 안하고 OS 가 처리함</li>
</ul></li>
<li>notification 영역을 제거하고 페이로드 영역(data) 부분만 으로 푸시를 보내면 됩니다.</li>
<li>커스텀 푸시는 아니지만 노티 알림 클릭시 원하는 동작을 만들고 싶을때가 많다.</li>
<li><p>그래서 푸시 규격에 대해서 자세히 찾아 봄</p>

<ul>
<li><a href="https://firebase.google.com/docs/cloud-messaging/http-server-ref?hl=ko">https://firebase.google.com/docs/cloud-messaging/http-server-ref?hl=ko</a></li>
<li>위 링크에서 보면 click_action 이 존재 하고 하고 이를 이용하면 시작 액티비티를 지정이 가능하다.</li>
<li>그래서 서버쪽 전송 영역을 아래 처러 지정 하였습니다.
<code>json
data: {
  hello: &quot;good job&quot;,
},
notification: {
  title: &quot;Hello, World&quot;,
  body: &quot;This is a notification that will be displayed if your app is in the background.&quot;,
  click_action:&quot;OPEN_ACTIVITY_1&quot;,
  icon:&quot;white&quot;,
  color:&quot;#FF0000&quot;,
  sound:&quot;default&quot;
}
</code></li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">  <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">".BasicNotificationActivity"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;intent-filter&gt;</span>
          <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">"OPEN_ACTIVITY_1"</span> <span class="nt">/&gt;</span>
          <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">"android.intent.category.DEFAULT"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/intent-filter&gt;</span>
  <span class="nt">&lt;/activity&gt;</span>
</code></pre></div>
<ul>
<li>내용

<ul>
<li>title 와 body 로 제목과 내용이 나옵니다. </li>
<li>icon 은 리소스에 있는 아이콘이 선택되어서 나옵니다.(되도록 흰색 알파 이미지선택이 필요합니다.)</li>
<li>icon 배경색은 빨간색</li>
<li>소리는 기본 알림 소리 입니다.</li>
<li>알림을 클릭 시 BasicNotificationActivity 가 실행됩니다.</li>
<li>intent 로 hello 가 있습니다.<br></li>
</ul></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>로그를 편하게 사용하자</title>
	  <link>//log</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-06-06T00:00:00+00:00</pubDate>
	  <guid>//log</guid>
	  <description><![CDATA[
	     <h3>Log. 사용이 귀찮을때가 많아서 사용중인 클래스를 공유합니다.</h3>

<ul>
<li>Log -&gt; log 로 변경해서 대문자를 사용안한다.</li>
<li>TAG 입력이 귀찮아서 제거함</li>
<li>파일이름과 라인 함수 이름을 출력 하도록 함</li>
<li>릴리즈에서는 로그가 출력 안되도록 하였습니다.</li>
<li>그리고 가장 많이 사용하는 라인 출력 함수를 추가 하였습니다. log.l() </li>
</ul>

<script src="https://gist.github.com/pyeongho/9b3caab3a7173a6890f64117ff483a0b.js"></script>

	  ]]></description>
	</item>

	<item>
	  <title>Dagger2 기초 부터</title>
	  <link>//re-dagger2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-30T00:00:00+00:00</pubDate>
	  <guid>//re-dagger2</guid>
	  <description><![CDATA[
	     <h3>Dagger2 활용을 위하여</h3>

<ul>
<li>기본을 공부하기에는 이곳 만큼 좋은곳은 없는거 같습니다.</li>
<li><a href="http://pluu.github.io/blog/android/2017/01/13/android-dagger/">http://pluu.github.io/blog/android/2017/01/13/android-dagger/</a></li>
</ul>

<h4>0. 내가 생각하는 시나리오</h4>

<ul>
<li>기능이 있거나 구조체로 사용하는 클래스를 만든다.</li>
<li>어노테이션을 이용해서 원하는곳에서 사용 가능하게 한다.</li>
<li>싱글톤으로 구현된 스태틱 클래스를 들을 편하게 가져다 쓰는 느낌으로</li>
</ul>

<h4>1. 그래들 설정</h4>

<ul>
<li><p>다른곳은 너무 어렵게 되어 있습니다.</p>
<div class="highlight"><pre><code class="language-gradle" data-lang="gradle">  compile 'com.google.dagger:dagger:2.7'
  annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
</code></pre></div></li>
</ul>

<h4>2. 따라하기</h4>

<ul>
<li>개 이름이 있는 클래스를 생성한다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="s">"멈뭄미"</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>개 클래스를 제공할 모듈을 만든다.</li>
<li>개 클래스를 반환한 함수를 메소드를 만들고 어노테이션으로 @Provides 추가 한다.</li>
<li>클래스에는 @Module 을 어노테이션을 입력한다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Module</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleModule</span> <span class="o">{</span>
        <span class="nd">@Provides</span>
        <span class="n">Dog</span> <span class="n">provideDog</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="n">Dog</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>모듈을 사용할 인터페이스를 만든다.</li>
<li>inject 메소드를 만들어야 한다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Component</span><span class="o">(</span><span class="n">modules</span> <span class="o">=</span> <span class="n">SampleModule</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SampleComponent</span> <span class="o">{</span>
        <span class="kt">void</span> <span class="n">inject</span><span class="o">(</span><span class="n">MainActivity</span> <span class="n">activity</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>액티비티에 의존성을 주입시켜 개 이름을 출력해 보자</li>
<li>아래 내용을 진행하기 전에 make 를 한번 진행해야 DaggerSampleComponent 를 사용할 수 있습니다.</li>
<li>new Dog 를 안했지만 &quot;멈뭄미&quot; 를 출력 가능합니다.</li>
<li>즉 Dog 를 주입 시켰습니다.</li>
<li>가장 기본 적인 필드 인젝션 입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="o">{</span>
      <span class="c1">// 인스턴스가 주입되는 필드</span>
      <span class="nd">@Inject</span>
      <span class="n">Dog</span> <span class="n">dog</span><span class="o">;</span>

      <span class="nd">@Override</span>
      <span class="kd">protected</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
          <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>

          <span class="c1">// SampleComponent로부터 DaggerSampleComponent 가 자동 생성되므로, 그것을 사용하여 SampleComponent를 만듭니다.</span>
          <span class="n">SampleComponent</span> <span class="n">component</span> <span class="o">=</span> <span class="n">DaggerSampleComponent</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                  <span class="c1">// 사용하는 Module 인스턴스를 지정합니다.</span>
                  <span class="c1">// (여기서 deprecated 될 수 있지만, 일단 모든 코드를 작성하고 빌드하면 사라질 것입니다)</span>
                  <span class="o">.</span><span class="na">sampleModule</span><span class="o">(</span><span class="k">new</span> <span class="n">SampleModule</span><span class="o">())</span>
                  <span class="o">.</span><span class="na">build</span><span class="o">();</span>

          <span class="c1">// 의존 주입을 실행합니다</span>
          <span class="n">component</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

          <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">dog</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>

          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"MainActivity"</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>

      <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>생성자 인젝션</li>
<li>생성자에서 개 클래스를 입력 받기 위해서 아래 처럼 클래스를 작성합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Owner</span> <span class="o">{</span>

      <span class="kd">private</span> <span class="n">Dog</span> <span class="n">dog</span><span class="o">;</span>

      <span class="nd">@Inject</span>
      <span class="kd">public</span> <span class="n">Owner</span><span class="o">(</span><span class="n">Dog</span> <span class="n">dog</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">dog</span> <span class="o">=</span> <span class="n">dog</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="n">String</span> <span class="n">getPetName</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">dog</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>MainActivity 에서 변경 내용은 아래 처럼 인젝트 내용만 변경해 주면 됩니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="nd">@Inject</span>
    <span class="n">Owner</span> <span class="n">owner</span><span class="o">;</span>
</code></pre></div>
<h4>3. 인터페이스를 이용하여 좀더 편하게 주입을 변경하기</h4>

<ul>
<li>지금까지 사용한 것은 구현 클래스였지만, 다음은 interface를 사용하도록 변경합니다.</li>
</ul>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Pet</span> <span class="o">{</span>
      <span class="n">String</span> <span class="n">getName</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="n">Pet</span> <span class="o">{</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="s">"포치"</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Module</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleModule</span> <span class="o">{</span>

      <span class="nd">@Provides</span>
      <span class="n">Pet</span> <span class="n">providePet</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="n">Dog</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Owner</span> <span class="o">{</span>

      <span class="kd">private</span> <span class="n">Pet</span> <span class="n">pet</span><span class="o">;</span>

      <span class="nd">@Inject</span>
      <span class="kd">public</span> <span class="n">Owner</span><span class="o">(</span><span class="n">Pet</span> <span class="n">pet</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">pet</span> <span class="o">=</span> <span class="n">pet</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="n">String</span> <span class="n">getPetName</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">pet</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div>
<ul>
<li>구현 클래스가 아닌 인터페이스로만 의존성을 변경하였습니다.</li>
<li>여러가지 컴포넌트를 이용해서 주입을 변경해도 되지만 그래들에서 제공하는 플래버를 이용해 보겠습니다.</li>
</ul>

<h4>4. Build Variants 를 이용해서 주입을 변경해보자</h4>

<ul>
<li>테스트 또는 저장소 변경등을 쉽게 할 수 있다.</li>
<li>그래들 변경 </li>
</ul>
<div class="highlight"><pre><code class="language-gradle" data-lang="gradle">    flavorDimensions "mode"
    productFlavors {
        dog {
            dimension "mode"
        }
        cat {
            dimension "mode"
        }
    }
</code></pre></div>
<ul>
<li>src 폴더 아래 dog/java ,cat/java 폴더 생성(패키지 이름까지 동일하게 처리 해야 한다.)</li>
<li>View → Tool Windows → Build Variants에서 추가된 내용을 확인 할 수 있다.</li>
<li>main 폴더의 sampleModule 를 제거 한다.</li>
<li>cat, dog 폴더에 각각 추가한다.</li>
<li>플래버 변경 만으로 원하는 인터페이스 모듈 주입 가능합니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>코틀린 안드로이드 익스텐션</title>
	  <link>//kotlin_android_extensions</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-27T00:00:00+00:00</pubDate>
	  <guid>//kotlin_android_extensions</guid>
	  <description><![CDATA[
	     <h3>findviewid 는 안했으면 ...</h3>

<ul>
<li>코틀린에서도 사용 가능한 방법</li>
<li>코틀린 안드로이드 익스텐션</li>
</ul>

<h4>1. Kotlin android extensions 사용하기</h4>

<ul>
<li><a href="http://thdev.tech/kotlin/2017/03/05/AndroidStudio-Kotlin-Extensions.html">http://thdev.tech/kotlin/2017/03/05/AndroidStudio-Kotlin-Extensions.html</a></li>
</ul>

<h4>2. Kotlin android extensions 사용하기</h4>

<ul>
<li>기존에 사용해보았던 데이터바인딩도 사용가능하지만 새 술은  새 부대에 </li>
<li>build.gradle(app) 에 내용 추가</li>
<li><div class="highlight"><pre><code class="language-gradle" data-lang="gradle">apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlin_version"
}
</code></pre></div></li>
</ul>

<ul>
<li>사용은 xml 에서 정의한 아이디를 넣으면 자동으로 임포트 되어서 사용이 편합니다.

<ul>
<li>import kotlinx.android.synthetic.main.fragment_main.view.*</li>
<li>view.tv_hello.text = &quot;ABCD&quot;</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>웹에서 앱 설치 여부를 확인하자</title>
	  <link>//app_check</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-05-27T00:00:00+00:00</pubDate>
	  <guid>//app_check</guid>
	  <description><![CDATA[
	     <h3>Web 에서 앱 설치 여부를 확인 하자</h3>

<ul>
<li>시나리오는 페이지가 안보이면 document.webkitHidden 과 document.hidden 으로 확인이 가능하다.</li>
<li><a href="https://developer.mozilla.org/ko/docs/Web/API/Page_Visibility_API">https://developer.mozilla.org/ko/docs/Web/API/Page<em>Visibility</em>API</a> </li>
<li>2개인 이유는 정식 스크립트 등록으로 인해서라고 풍문으로 들었습니다.</li>
<li>하지만 문제점은 매우 많습니다. 구현 내용을 보면 알 수 있습니다. 왜 문제가 많은지 

<ul>
<li><a href="https://devtalk.kakao.com/t/topic/20684/3">https://devtalk.kakao.com/t/topic/20684/3</a></li>
</ul></li>
</ul>

<h4>1. 내용</h4>

<ul>
<li>인터벌 함수를 이용해서 hidden 을 계속 확인한다.</li>
<li>타임아웃 함수를 이용해서 특정시간이 되면 앱이 설치 안되어있다고 판단한다.</li>
</ul>

<h4>2. 문제</h4>

<ul>
<li>단순참고용 정도로 사용하면 좋을거 같습니다.</li>
<li>많이 테스트 안해보았습니다.</li>
<li>document.webkitHidden || document.hidden 를 이용해서 설치 여부를 확인 하는 방법 입니다.</li>
<li>크롬에서 지원하는 intent 방식을 사용하면 항상 마켓이 실행되서 체크하기 어려우니 꼭 커스텀 스킴으로 테스트 해야 합니다.</li>
</ul>

<h4>3. 코드</h4>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">appSchem</span> <span class="o">=</span> <span class="s1">'mayapp://launch?Data=abcdefg'</span><span class="p">;</span>

<span class="nx">isMyApp</span><span class="p">();</span>
<span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">appSchem</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">isMyApp</span><span class="p">(){</span>
  <span class="kd">function</span> <span class="nx">clearTimers</span><span class="p">(){</span>
        <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">heartbeat</span><span class="p">);</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">intervalHeartbeat</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">webkitHidden</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span><span class="p">){</span>
            <span class="nx">clearTimers</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'앱이 설치 되어 있습니다.'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">heartbeat</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">intervalHeartbeat</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">deLay</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'앱이 없습니다.'</span><span class="p">);</span>
    <span class="p">},</span> <span class="nx">deLay</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
