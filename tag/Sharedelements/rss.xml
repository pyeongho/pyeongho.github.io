<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Shared elements</title>
	  <link>//sharedelements</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-11-21T00:00:00+00:00</pubDate>
	  <guid>//sharedelements</guid>
	  <description><![CDATA[
	     <h3>머티리얼 화면 전환, Shared Elements</h3>

<ul>
<li>플레이스토어에서 앱을 선택하면 리스트의 이미지가 스르르하면서 커지면서 화면 전환이 발생</li>
<li>처음에는 엄청난 라이브러리를 사용한지 알았지만 안드로이드 기본을 이용하면 된다.</li>
<li>안드로이는 구현보다 무엇을 사용하지만 알면 금방 적용 할수 있습니다. </li>
<li>일단 처음 발견한 링크 입니다.

<ul>
<li><a href="https://medium.com/@bherbst/fragment-transitions-with-shared-elements-7c7d71d31cbb">fragment-transitions-with-shared-elements</a><br></li>
</ul></li>
<li>위 링크를 보고 사용하는 내용이 shared-elements 라는것을 알고 사용하기로 함</li>
<li>5.0 이상만 가능하지만 이제는 5.0 미만에서의 애니메이션은 신경 안쓰기로 결정함 </li>
<li>shared-elements 를 키워드로 검색</li>
<li>안드로이드 개발자 사이트 참고 링크

<ul>
<li><a href="https://developer.android.com/training/material/animations.html?hl=ko">https://developer.android.com/training/material/animations.html?hl=ko</a></li>
</ul></li>
<li>다른 사람이 만든 공부하기 쉬운 샘플코드

<ul>
<li><a href="https://github.com/mikescamell/shared-element-transitions">https://github.com/mikescamell/shared-element-transitions</a></li>
</ul></li>
<li>프래그먼트에서 프래그먼트로 이동할 때 만 적어 보겠습니다.

<ul>
<li>각각의 상황에 맞는 내용은 위 링크 샘플에 잘 정리 되어 있습니다.</li>
</ul></li>
<li><p>A 프래그먼트에 이미지 뷰를 추가</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:id=</span><span class="s">"@+id/logo"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:layout_centerInParent=</span><span class="s">"true"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>android:transitionName 속성이 2번째 프래그먼트에도 동일하게 사용됩니다.</li>
</ul></li>
<li><p>A 프래그먼트 에서 B 프래그먼트 생성 및 A 프래그먼트 삭제 </p>

<ul>
<li>참고 addToBackStack(TAG) 을 이용해서 뒤로가기 가능하도록 가능합니다.(플레이스토어 처럼 반대 애니메이션 동작 합니다.)</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">  val mainFragment = MainFragment.newInstance("")
  supportFragmentManager
            .beginTransaction()
            .addSharedElement(img, ViewCompat.getTransitionName(img))
            .remove(intro)
            .replace(R.id.contentFrame, mainFragment)                
            .commit()
</code></pre></div></li>
<li><p>여기서 중요한건 아래 내용입니다.</p>

<ul>
<li>.addSharedElement(img, ViewCompat.getTransitionName(img))</li>
<li>img 는 A 프래그먼트의 ImageView 객체 입니다.</li>
<li>메소드명처럼 엘레먼트를 전달하여 B 프래그먼트에서 활용 하는걸로 보입니다</li>
</ul></li>
<li><p>B 프래그먼트</p>

<ul>
<li>onCreate 생성자에 아래 내용을 추가해 줍니다.</li>
<li>transition.move 를 수정하면 다양한 효과가 있을거라 생각하지만 move 로 충분 했습니다.</li>
</ul>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin">    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
            sharedElementEnterTransition = TransitionInflater.from(context).inflateTransition(android.R.transition.move)
        }
    }
</code></pre></div>
<ul>
<li>B 프래그먼트에 이미지뷰 추가</li>
<li>이번에도 transitionName 필드에 주의해 주세요</li>
<li>사이즈를 고정한건 이동하면서 객체가 작아지는걸 볼려고 추가한 내용입니다.</li>
</ul>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;ImageView</span>
    <span class="na">android:layout_centerHorizontal=</span><span class="s">"true"</span>
    <span class="na">android:id=</span><span class="s">"@+id/fragment_b_imaged"</span>
    <span class="na">android:layout_width=</span><span class="s">"30dp"</span>
    <span class="na">android:layout_height=</span><span class="s">"30dp"</span>
    <span class="na">android:scaleType=</span><span class="s">"centerCrop"</span>
    <span class="na">android:src=</span><span class="s">"@mipmap/ic_launcher_round"</span>
    <span class="na">android:transitionName=</span><span class="s">"simple_fragment_transition"</span>
    <span class="na">tools:ignore=</span><span class="s">"UnusedAttribute"</span> <span class="nt">/&gt;</span>
</code></pre></div>
<ul>
<li>여기까지 추가 하면 기본적인 동작을 확인 가능합니다.</li>
<li>좀더 많은 내용은 중간에 추가된 샘플이 좋습니다.<br></li>
</ul></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
