<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>retrofit2 + okhttp3 + rxandroid2네이버 기계번역 사용하기</title>
	  <link>//retrofit2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-05T00:00:00+00:00</pubDate>
	  <guid>//retrofit2</guid>
	  <description><![CDATA[
	     <h3 id="retrofit2--rxandroid2---">retrofit2 + rxandroid2 를 이용한 통신</h3>
<ul>
  <li>rxandroid2 를 추가해 보았습니다.</li>
</ul>

<h4 id="dependencies-">1. dependencies 추가</h4>

<div class="language-gradle highlighter-rouge"><pre class="highlight"><code>    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:okhttp:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:logging-interceptor:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:retrofit:2.1.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:converter-gson:2.1.0'</span>

    <span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxjava:2.0.1'</span>
    <span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxandroid:2.0.1'</span>
    <span class="n">compile</span> <span class="s1">'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'</span>
</code></pre>
</div>

<h4 id="rxandroid2---">2. RxAndroid2 관련 의존성이 추가됨</h4>
<ul>
  <li>인터넷 샘플에는 RxAndroid1 관련 내용이 많아서 RxAndroid2 를 만들어 보았습니다.</li>
</ul>

<h4 id="rxandroid2----1">3. 기존 번역은 버튼에서 버튼을 하나더 추가해서 rxandroid2 를 사용하도록 하겠습니다.</h4>
<ul>
  <li>버튼 추가와 이벤트 연결을 해주세요.</li>
  <li>전체 코드에 있습니다. 참고해 주세요</li>
</ul>

<h4 id="baseactivity--">4. BaseActivity 고려 안함</h4>
<ul>
  <li>샘플 코드에서 상속 받은 액티비티가 있으면 이상하게 잘 안보게 되어서 추가 안했습니다.</li>
  <li>애플리케이션 만들때 기본 액티비티 상속 받으면 편한점이 많아습니다.</li>
</ul>

<h4 id="section">5. 리액티브 관련 내용은 다른곳 을 추천 합니다.</h4>
<ul>
  <li><a href="https://realm.io/kr/news/rxandroid/">Realm rxandroid 링크</a></li>
  <li>rxandroid 링크들을 공부 하다 보면 람다 문법이 많이 나오는데 저는 사용안합니다.</li>
  <li>처음 람다를 접하면 이해가 안되고 무엇을 넣어야 할지 모르겠습니다.</li>
  <li>좀더 편하게 되고 전혀 헷갈리지 않을때 사용을 고려하겠습니다.</li>
</ul>

<h4 id="retrofit2--rxandroid2--">6. retrofit2 + rxandroid2 진행 순서</h4>
<ul>
  <li>retrofit2 클라이언트에 rxandroid2 어댑터 추가</li>
  <li>retrofit2에 리퀘스트 rxandroid 용 Observable 추가</li>
  <li>CompositeDisposable 을 사용 및 생성 추가</li>
  <li>결과 콜백 받을 클래스 생성, 기본을 사용해도 되지만 이건 나중에 사용하기 좋게 클래스 추가</li>
  <li>버튼 클릭시 rxandroid 형태로 스트림 시작</li>
</ul>

<h4 id="section-1">7. 위 순서대로 진행 코드 추가</h4>

<h5 id="retrofit2--rxandroid2---1">1. retrofit2 클라이언트에 rxandroid2 어댑터 추가</h5>
<ul>
  <li>AppClient 클래스의 retrofit 생성에서 addCallAdapterFactory 를 추가 합니다.</li>
  <li>
    <p>추가된 의존성에 RxJava2CallAdapterFactory 가 있습니다.</p>
  </li>
  <li>
    <div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">mRetrofit</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Retrofit</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
<span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="n">ApiStores</span><span class="o">.</span><span class="na">API_SERVER_URL</span><span class="o">)</span>
<span class="o">.</span><span class="na">addConverterFactory</span><span class="o">(</span><span class="n">GsonConverterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
<span class="o">.</span><span class="na">addCallAdapterFactory</span><span class="o">(</span><span class="n">RxJava2CallAdapterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
<span class="o">.</span><span class="na">client</span><span class="o">(</span><span class="n">okHttpClient</span><span class="o">)</span>
<span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre>
    </div>
  </li>
</ul>

<h5 id="retrofit2--rxandroid--observable-">2. retrofit2에 리퀘스트 rxandroid 용 Observable 추가</h5>
<ul>
  <li>
    <p>ApiStores 클래스에 Observable 을 반환 하는 리퀘스트 추가</p>
  </li>
  <li>
    <pre><code class="language-javja">@FormUrlEncoded
@POST("/v1/language/translate")
Observable&lt;TranslateMessage&gt; loadDataByRetrofitRx(
        @Field("source") String source,
        @Field("target") String target,
        @Field("text") String text);  
</code></pre>
  </li>
</ul>

<h5 id="compositedisposable-----">3. CompositeDisposable 을 사용 및 생성 추가</h5>
<ul>
  <li>Observable, Observer 를 아래 처럼 추가 했는데 좋아 보이지 않음</li>
  <li>
    <script src="https://gist.github.com/pyeongho/7b0a8b61f99271d81b4f4849906cad8e.js"></script>
  </li>
  <li>그래서 Observer 에러 처리와 좀더 이해하기 쉬윈 메소드로 변경하기 위해서 옵저버를 상속함</li>
  <li>
    <script src="https://gist.github.com/pyeongho/e2bfdb18687c105d3253b87f2b1d01b1.js"></script>
  </li>
  <li>위 클래스를 이용하여 사용</li>
  <li>
    <script src="https://gist.github.com/pyeongho/e7ba0b445883fab14479126bf0b3ca5b.js"></script>
  </li>
  <li>subcription 이 훨씬 이해하기 좋게 변경됨</li>
</ul>

<h4 id="section-2">8 . 최종 결과 코드</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>한번에 커밋 하지 못해서 두번째 세번째 업데이트 내용입니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>retrofit2 + okhttp3 네이버 기계번역 사용하기</title>
	  <link>//retrofit2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-04T00:00:00+00:00</pubDate>
	  <guid>//retrofit2</guid>
	  <description><![CDATA[
	     <h3 id="retrofit2---">retrofit2 를 이용한 통신</h3>
<ul>
  <li>가장 많이 사용되는 통신라이브러리를 이용해서 네이버기계 번역 앱을 만들어 보았습니다.</li>
</ul>

<h4 id="dependencies-">1. dependencies 추가</h4>

<div class="language-gradle highlighter-rouge"><pre class="highlight"><code>    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:okhttp:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:logging-interceptor:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:retrofit:2.1.0'</span>

    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:converter-gson:2.1.0'</span>
</code></pre>
</div>

<h4 id="section">2. 네이버 개발자 등록은 따로 기술 안합니다.</h4>
<ul>
  <li>개발자 등록</li>
  <li>애플리케이션 등록</li>
  <li>기계번역 API 사용</li>
  <li>클라이언트 아이디, 시크릿 아이디  &lt;- 이게 필요합니다.</li>
</ul>

<h4 id="api----">3. 개발자 등록후 우선 기계번역 API 사용 법을 확인해 보겠습니다.</h4>
<ul>
  <li><a href="https://developers.naver.com/docs/labs/translator">기계번역 사용 java 개발문서 링크</a></li>
  <li>위 링크를 따라 가면 java 항목의 예제가 있습니다.</li>
  <li>요약 하면 포스트 방식 사용</li>
  <li>커스텀 헤더 필요</li>
  <li>위 내용 정도만 알면 사용 가능</li>
</ul>

<h4 id="retrofit-----static">4. Retrofit 사용을 편하게 하기위한 클래스 작성(static)</h4>
<ul>
  <li>디버깅을 위한 http 로그 추가</li>
  <li>커스텀 헤더 추가</li>
  <li>retrofit 생성</li>
  <li>
    <script src="https://gist.github.com/pyeongho/4d5b2c096baf1eefb76c39bf2f418cdc.js"></script>
  </li>
</ul>

<h4 id="post-body-----">5. post body 를 넣을 인터페이스 클래스 생성</h4>
<ul>
  <li>네이버 기계번역에서 사용 하는 필드는 3개 입니다.</li>
  <li>source, target, text</li>
  <li>urlencoded 추가 한 인터페이스 클래스 입니다.</li>
  <li>
    <script src="https://gist.github.com/pyeongho/ca8e9aa7513d1683f2740a6106cae249.js"></script>
  </li>
</ul>

<h4 id="callback--">6. callback 상속 받기</h4>
<ul>
  <li>그냥 사용해도 되지만 에러처리등을 편하게 사용하기 위함</li>
  <li>필요한 클래스들 생성</li>
  <li>
    <script src="https://gist.github.com/pyeongho/536acac03a5a3bb1e18db29b0677fda2.js"></script>
  </li>
</ul>

<h4 id="section-1">7. 결과를 받을 클래스 생성</h4>
<ul>
  <li><a href="http://www.jsonschema2pojo.org/">json to java 파일 생성 링크</a></li>
  <li>다른 플러그인이 있다고 하지만 지금은 웹사이트를 이용하고 있습니다.</li>
  <li>아래가 결과로 받을 json 형태 입니다.</li>
  <li>아내 내용으로 클래스 파일 3개를 만들어서 추가 하였습니다.</li>
  <li>전체 코드 참고</li>
</ul>

<div class="language-json highlighter-rouge"><pre class="highlight"><code><span class="p">{</span><span class="nt">"message"</span><span class="p">:</span><span class="w">
    </span><span class="p">{</span><span class="nt">"@type"</span><span class="p">:</span><span class="s2">"response"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"@service"</span><span class="p">:</span><span class="s2">"naverservice.labs.api"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"@version"</span><span class="p">:</span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"result"</span><span class="p">:</span><span class="w">
            </span><span class="p">{</span><span class="nt">"translatedText"</span><span class="p">:</span><span class="s2">"So glad to see you."</span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
</div>

<h4 id="mainactivity">8. MainActivity</h4>
<ul>
  <li>api 인터페이스 사용을 위한 생성</li>
  <li>Call 생성</li>
  <li>실행</li>
  <li>한글을 영어로 바꾸는 함수 입니다.</li>
  <li>함수에 한글을 넘기면 영문으로 변환값이 출력 됩니다.</li>
  <li>
    <script src="https://gist.github.com/pyeongho/415d4b207338a8e49b6bbef69ae75389.js"></script>
  </li>
</ul>

<h4 id="section-2">9. 전체 샘플 코드</h4>
<ul>
  <li>버터나이프 추가</li>
  <li>EditText 에 한글 입력후 버튼을 누르면 영문이 나오는 간단한 샘플 입니다.</li>
  <li>AppClient 의 클라이언트 아이디와 시크릿 아이디는 변경 해야합니다.</li>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>첫번째 리비전이 위 샘플 입니다.</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
