<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io</title>
   
   <link>https://pyeongho.github.io</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>gitugb.io 지킬에 사진업로드 쉽게 하는 앱개발</title>
	  <link>//ios_git_client</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-03-27T00:00:00+00:00</pubDate>
	  <guid>//ios_git_client</guid>
	  <description><![CDATA[
	     <h3>iOS 에서 github.io에 사진을 첨부한 글을 포스팅한다.</h3>

<ul>
<li>스마튼폰에서 찍은 사진을 블로그에 바로 올리고 싶은 생각으로 앱을 개발해 보기로 결정</li>
</ul>

<h4>1. 공부할 자료 수집</h4>

<ul>
<li>깃 라이브러리 

<ul>
<li><a href="https://github.com/libgit2/objective-git#carthage">https://github.com/libgit2/objective-git#carthage</a></li>
</ul></li>
<li><a href="https://github.com/SwiftGit2/SwiftGit2">https://github.com/SwiftGit2/SwiftGit2</a></li>
<li> carthage 사용법을 알아야 한다.

<ul>
<li><a href="https://swifter.kr/2016/04/24/carthage-%EC%B9%B4%EB%A5%B4%ED%85%8C%EC%A7%80-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95/">https://swifter.kr/2016/04/24/carthage-카르테지-설치-방법/</a></li>
</ul></li>
</ul>

<h4>2. carthage 사용법</h4>

<ul>
<li><p>homebrew로 설치 하기</p>

<ul>
<li>설치 안되어 있으면

<ul>
<li>$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</li>
</ul></li>
</ul></li>
<li><p>$ brew update</p></li>
<li><p>$ brew install carthage </p></li>
<li><p>Cartfile 파일 생성하기</p>

<ul>
<li>프로젝트 루트에 Cartfile 파일을 만들어서</li>
<li>라이브러리 사용 설명서에 나온 주소를 입력 한다.</li>
<li>정확한 문법은 인터넷에서 확인해 주세요</li>
<li>예)  github &quot;libgit2/objective-git&quot;</li>
</ul></li>
<li><p>프로젝트 루트에서 명령어 실행</p>

<ul>
<li>$ carthage update </li>
</ul></li>
<li><p>라이브러리에 따라서 헤더 위치를 추가 해야합니다.</p>

<ul>
<li>프로젝트 세팅 -&gt; 빌드 세팅 -&gt; Header Search Path (all,level)<br></li>
</ul></li>
<li><p>import ObjectiveGit 추가후 컴파일 완료  </p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>스위프트를 이용해서 앱을 개발해 보자(iOS 공부 1일차)</title>
	  <link>//ios_1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-03-15T00:00:00+00:00</pubDate>
	  <guid>//ios_1</guid>
	  <description><![CDATA[
	     <h3>iOS를 공부해서 원하는 앱을 만들어 보자</h3>

<ul>
<li>안드로이드 개발자지만 iOS 앱을 만들어 보고 싶어서 공부를 시작</li>
</ul>

<h4>0. 따라하기</h4>

<ul>
<li><a href="https://devxoul.gitbooks.io/ios-with-swift-in-40-hours/content/Chapter-1/">https://devxoul.gitbooks.io/ios-with-swift-in-40-hours/content/Chapter-1/</a></li>
</ul>

<h4>1. 환경 설정</h4>

<ul>
<li>Xcode 다운로드</li>
<li><a href="https://developer.apple.com/download/">https://developer.apple.com/download/</a></li>
<li>Xcode 8.3 beta 4 를 다운 받고 설치</li>
</ul>

<h4>2. Playground 사용해 보기</h4>

<ul>
<li>뭔지는 모르겠지만 따라서<br></li>
<li>함수 실행하고 동작 하는것 확인 </li>
<li>이제 헬로우 월드를 찍어야 하는데...</li>
</ul>

<h4>3.xcode 프로젝트 새로 만들기 누름</h4>

<ul>
<li>싱글뷰 애플리케이션 선택하고 이름 넣고 넥스트 넥스트</li>
<li>화살표 버튼 클릭 </li>
<li>시뮬레이터가 7+ 라서 5s 로 변경하니 많이 보던 화면이 </li>
<li>하지만 헬로우 월드 단어도 기본으로 안넣어주는 센스</li>
<li>왼쪽에 스토리보드라는 메뉴가 보인다.</li>
<li>개발자들이 말하는 스토리보드 ui 편집기로 보인다.</li>
<li>일단 클릭해서 나오는걸 보고</li>
<li>라벨을 찾기 위해서 이것 저것 시도</li>
<li>오른쪽 아래 필터 입력창에 넣으면 나온다고 했지만 안나옴</li>
<li>자세히 보니 탭 형태로 동그란걸 선택 하니 필터가 나오가 라벨 추가가 가능함</li>
<li>헬로우 월드 성공</li>
<li>프로그램의 완성은 헬로 월드 니깐</li>
</ul>

<h4>4. 스위프트 공부</h4>

<ul>
<li>플레이그라운드가 스위프트 공부하기 좋은 콘솔로 이해됨</li>
<li>1. 변수와 상수 선언

<ul>
<li>var : 변수</li>
<li>let : 상수, 콘스트 , 파이널</li>
</ul></li>
<li>2. 타입 선언 

<ul>
<li>스크립트 언어처럼 타입이 없어도 될거 같지만 넣어야 좋음</li>
<li>물론 안넣어도 문제는 없음, 타입추론 이런기능도 있음</li>
<li>var name: STring =&quot;phkim&quot;</li>
<li>var age: Int = 12</li>
<li>var height: Float = 11.11</li>
<li>Int + Float 는 에러 &lt;- 차라리 이게 좋음</li>
<li>String(age) +&quot; 입니다.&quot; // 이렇게 가능하지만</li>
<li>&quot;(age) 입니다.&quot;  // 스위프트에서는 이런것도 가능</li>
</ul></li>
<li><ol>
<li>배열과 딕셔너리</li>
</ol>

<ul>
<li>대괄호 사용,</li>
</ul>
<div class="highlight"><pre><code class="language-Swift" data-lang="Swift">
    var languages = ["Swift", "Objective-C", "Python"]    
    var capitals = [
        "한국": "서울",
        "일본": "도쿄",
        "중국": "베이징",
    ]

    // 타입 추가 방법
    var languages: [String] = []
    var capitals: [String: String] = [:]

    // 간결
    var languages = [String]()
    var capitals = [String: String]()

</code></pre></div></li>
<li><ol>
<li>조건문과 반복문</li>
</ol>

<ul>
<li>이것만 잘해도..</li>
<li>if 에 괄호가 없다</li>
<li>! 도 없다.. , if 문에는 무조건 불 값만</li>
<li><p>switch case 는 살짝 독특</p>

<ul>
<li> 범위도 가능하고 break 도 없다.</li>
</ul>
<div class="highlight"><pre><code class="language-Swift" data-lang="Swift">
case 8..&lt;14:
    student = "초등학생"

</code></pre></div></li>
<li><p>for의 배열은 자바의 문법과 동일</p></li>
<li><p>for의 딕셔너리는 둘다 받으면 된다.아래 처럼</p>

<ul>
<li>//for (country, capital) in capitals </li>
</ul></li>
<li><p>for i in 0..&lt;100{}</p></li>
<li><p>for _ in 0..&lt;10{}</p></li>
<li><p>옵셔널 이라는 용어 ? 를 이용함</p>

<ul>
<li>let optionalEmail: String? = &quot;devxoul@gmail.com&quot;</li>
<li>널 값을 허용할지 말지에 대한 내용</li>
<li>변수도 같은 옵션 끼리만 가능함</li>
<li>if 문 사용 예제 </li>
</ul>
<div class="highlight"><pre><code class="language-Swift" data-lang="Swift">
if let email = optionalEmail {
     print(email) // optionalEmail의 값이 존재한다면 해당 값이 출력됩니다.
}
// optionalEmail의 값이 존재하지 않는다면 if문을 그냥 지나칩니다.

// And 조건은 , 로 구분 해서 사용 ㅏ능    
var optionalName: String? = "전수열"
var optionalEmail: String? = "devxoul@gmail.com"

if let name = optionalName, email = optionalEmail {
// name과 email 값이 존재
}

// 일반 조건문과의 바인딩 , 순서는 앞에서 뒤로    
var optionalAge: Int? = 22

if let age = optionalAge, age &gt;= 20 {
// age의 값이 존재하고, 20 이상입니다.
}

</code></pre></div></li>
</ul></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
