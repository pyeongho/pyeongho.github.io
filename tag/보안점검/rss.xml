<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>https://pyeongho.github.io/</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>OWASP top 10 항목을 이용한 취약점 확인</title>
	  <link>//mobile-sec.-owasp</link>
	  <author>PyeongHo</author>
	  <pubDate>2016-12-23T00:00:00+00:00</pubDate>
	  <guid>//mobile-sec.-owasp</guid>
	  <description><![CDATA[
	     <h4 id="mobile-owasp-top-10--2014">1. Mobile OWASP Top 10 ( 2014)</h4>

<table>
  <thead>
    <tr>
      <th>No</th>
      <th>진단 항목</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>서버 측 통제 미흡</td>
      <td>모바일 앱을 통해 모바일 웹 사이트 침해 사고</td>
    </tr>
    <tr>
      <td>2</td>
      <td>취약한 정보 저장 방식</td>
      <td>설정파일, DB 파일등에 사용자 정보 저장등</td>
    </tr>
    <tr>
      <td>3</td>
      <td>취약한 전송 계층 보호</td>
      <td>평문으로 주요 데이터 전송</td>
    </tr>
    <tr>
      <td>4</td>
      <td>의도하지 않은 정보 유출</td>
      <td>웹 브라우져 캐시, 키보드 캐시, 로그등 단말기 OS 에서의 특성에 읜한 정보 유출</td>
    </tr>
    <tr>
      <td>5</td>
      <td>취약한 인증 및 권한 관리</td>
      <td>인증 권한을 단말기에 의존, 4자리 PIN 등의 간단한 번호</td>
    </tr>
    <tr>
      <td>6</td>
      <td>취약한 암호화</td>
      <td>암호화를 부적절하게 또는 취약한 암호화</td>
    </tr>
    <tr>
      <td>7</td>
      <td>클라이언트 측 삽입</td>
      <td>사용자 입력값 통제, SQL injection. XSS, 3자 앱의 무단 기능 호출등</td>
    </tr>
    <tr>
      <td>8</td>
      <td>신뢰 할 수없는  사용자 입력값</td>
      <td>보안과 관련된 의사 결정이 필요한 기능을 입력값을 믿고 신뢰 할 경우 3자 앱에 의해 의도치 않는 동작</td>
    </tr>
    <tr>
      <td>9</td>
      <td>세션 처리 미흡</td>
      <td>세션 타임 아웃 및 로그인</td>
    </tr>
    <tr>
      <td>10</td>
      <td>엡 바이너리 보호 미흡</td>
      <td>악의적으로 변조된 앱</td>
    </tr>
  </tbody>
</table>

<h5 id="section">1. 서버 측 통제 미흡</h5>
<ul>
  <li>위협
    <ul>
      <li>스마트폰 단말기가 아닌 일반 브라우저에서 접근</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>모바일 웹사이트를 일반 브라우저를 이용해서 편리한 환경에서 해킹시도</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>웹 취약점을 공략</li>
    </ul>
  </li>
  <li>발생 가능한 부분
    <ul>
      <li>하이브리드 앱에 포함된 웹페이지를 크롬등을 이용해서 분석 및 해킹시도</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>모바일 사이트도 일반 사이트 처럼 보안 절차 필요</li>
      <li>SQL injection, Cross Site Scripting 등 주기적인 보안 점검 수행</li>
      <li>단말기 API 에서만 동작하도록 통체</li>
    </ul>
  </li>
</ul>

<h5 id="section-1">2. 취약한 정보 저장 방식</h5>
<ul>
  <li>위협<br />
    - 분실한 스마트폰 또는 악성코드로 로컬에 저장된 정보에 접근</li>
  <li>attack vector
    <ul>
      <li>파일 탐색 프로그램이나 로걸 DB 에 접속하여 평문으로 저장된 데이터를 <br />
 열람 변조등 또는 외부로 유츌</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>루팅을 통한 손쉬운 접근, 암호화된 경우에도 비교적 손쉽게 해결</li>
    </ul>
  </li>
  <li>발생 가능한 부분
    <ul>
      <li>저장 기능이 있는 앱의 대부분</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>반드시 필요한 경우를 제외하고는 되도록 스마트폰 로컬에 저장하지 않는다.</li>
      <li>외부저장소에 민감한 정보를 저장하면 안된다.</li>
      <li>필요한 경우 OS 에서 제공하는 암호화 API 사용</li>
    </ul>
  </li>
</ul>

<h5 id="section-2">3. 취약한 전송 정보 계층 보호</h5>
<ul>
  <li>위협
    <ul>
      <li>서버 클라이언트구간의 평문으로 전송</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>신뢰할 수 없는 네트워크 공간에서 제3자가 평문으로 된정보를 열람/변조하거나 <br />
외부 서버로 유출</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>서버, 클라이언트 구간에서 제3자가 개입할 수 있다.</li>
      <li>인터넷에 공개된 가짜 AP를 통한 정보를 열람/변조 또는 외부 서버로 유출</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>SSL/TLS를 사용하거나 주요 정보를 암호화 한다.</li>
    </ul>
  </li>
</ul>

<h5 id="section-3">4. 의도하지 않은 정보 유출</h5>
<ul>
  <li>위협
    <ul>
      <li>분실한 스마트폰 또는 악성코드로 로컬에 저장된 정보에 접근</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>신파일 탐색 프로그램이나 로걸 DB 에 접속하여 평문으로 저장된 데이터를 <br />
 열람 변조등 또는 외부로 유츌</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>개발자가 단말기 OS의 특성, 보안기능 및 이로 인한 보안 영향에 대해 충분히 <br />
파악하지 않고 개발</li>
    </ul>
  </li>
  <li>발생 가능한 부분
    <ul>
      <li>로그, 스크린샷 브라우져 캐시, 임시 폴더</li>
      <li>코드에 있는 테스트용 계정 정보</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>로그는 기록하지 않도록 개발</li>
      <li>아이디 / 패스워드 등은 스크린샷을 통한 유출 대비(<em>**</em>)</li>
      <li>인앱브라우져 역시 캐시를 지워준다.</li>
      <li>소스코드내 민감한 정보를 하드코딩하는것 바람직 하지 않다.</li>
    </ul>
  </li>
</ul>

<h5 id="section-4">5. 취약한 인증 및 권한 관리</h5>
<ul>
  <li>위협
    <ul>
      <li>부적절하게 구현된 인증 절차나 권한 확인 절차를 우회하여 특정사용자 권한도용</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>인증 권한 절차가 없거나 부적절하게 된 경우 다른사용자가 이를 우회하여 접근</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>분실된 경우를 고려하지 않았거나  구현 과정의 실수</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>인증 권한 관리를 구현 해야 한다.</li>
      <li>기기 분실 위험에 대해서 고려할 필요가 있다.</li>
      <li>개발 도구를 이용해 앱 위/변조 하여 인증, 권한 관리를 우회 할수 있으므로<br />
권한 관리의 최종 점검은 서버측에서 수행해야함</li>
    </ul>
  </li>
</ul>

<h5 id="section-5">6. 취약한 암호화</h5>
<ul>
  <li>위협
    <ul>
      <li>암호화된 정보를 3자가 획득함</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>암호화된 정보를 복호화하여 평문으로 볼 수 있다.</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>암호화가 아닌 방법을 암호화로 착각하여 발생</li>
      <li>믿을 만한 암호화 이지만 부적절하게 사용하여 발생</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>암호화 키를 모바일 앱 내에 함께 저장하는 방법을 사용하지 않는다.</li>
      <li>신뢰 할 수 있는 라이브러리를 사용한다.</li>
      <li>플랫폼에서 제공하는 기능을 사용한다.</li>
      <li>base64, 난독화, 시리얼라이즈는 암호화가 아니다.</li>
    </ul>
  </li>
</ul>

<h5 id="section-6">7. 클라이언트측 삽입</h5>
<ul>
  <li>위협
    <ul>
      <li>3자가 앱에 비정상 데이터를 삽입</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>앱, 웹에 비정상 데이터를 삽입하여 해킹</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>3자가 해당 앱의 기능을 호출 하거나 통신 과정에 개입 할 수 없다는 가정 하에  개발 하여 발생</li>
      <li>사용자 입력 부분의 SQL injection, Cross Site Scripting, 버퍼오버플로우등</li>
    </ul>
  </li>
  <li>발생 가능한 부분
    <ul>
      <li>자바스크립트 enable , 자바스크립트 인터페이스를 이용할 수 있음</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>사용자 입력값 검증</li>
      <li>html tag, javascript 및 sql query 등의 비정상 데이터 방지</li>
      <li>DB 관련 작업시 prepared statement <a href="http://hackbyr0k.tistory.com/2">SQL injection 링크</a></li>
      <li>문자열 처리보다 안전한 함수 사용</li>
    </ul>
  </li>
</ul>

<h5 id="section-7">8. 신뢰 할 수 없는 사용자의 입력값</h5>
<ul>
  <li>대응 방안
    <ul>
      <li>사용자 입력값 검증, 사용자를 믿지 마라 <br />
##### 9. 세션 처리 미흡</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>세션 타임 아웃을 단말기에 의존하지 말아야 한다.</li>
    </ul>
  </li>
</ul>

<h5 id="section-8">10. 앱 바이너리 보호 미흡</h5>
<ul>
  <li>위협
    <ul>
      <li>3자가 앱을 역컴파일하여 분석한후 정상기능 변경한 위변조 바이너리 배포</li>
    </ul>
  </li>
  <li>attack vector
    <ul>
      <li>앱 자체를 역컴파일하여 분석</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>사용자가 자사가 개발한 정상적인 앱만 사용할 것이라고 가정한 상태에서 개발 하여 발생</li>
    </ul>
  </li>
  <li>대응 방안
    <ul>
      <li>바이너리 위변조 방지 및 분석 방지를 위한 보안도구 사용(프로가드 등)</li>
      <li>솔루션??</li>
    </ul>
  </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>APK 바이너리 분석 및 리패키징</title>
	  <link>//mobile-sec-reverse</link>
	  <author>PyeongHo</author>
	  <pubDate>2016-12-23T00:00:00+00:00</pubDate>
	  <guid>//mobile-sec-reverse</guid>
	  <description><![CDATA[
	     <h3 id="apk----">4. APK 바이너리 분석 및 리패키징</h3>

<h4 id="apk-----1">1.첨부된 apk 의 코드를 확인 한다.</h4>

<ul>
  <li>이용하는 툴은 jd-gui-windows-1.4.0.zip , dex2jar-2.0.zip</li>
  <li>iamaboy.apk</li>
  <li>d2j-dex2jar.bat iamaboy.apk</li>
  <li>iamaboy-dex2jar.jar  파일 생성을 확인한다.</li>
  <li>다른 툴인 jd-gui.exe 를 실행하여 jd-gui.exe 파일을 연다.</li>
  <li>코드를 확인 하면 됩니다.</li>
</ul>

<h4 id="section">2.루팅 체크 앱을 무력화 하여 동작 하도록 한다.</h4>
<ul>
  <li>기본 안드로이드 앱에서 루팅 체크 하는 코드를 추가 한다.</li>
</ul>

<p>```java <br />
    @Override<br />
    protected void onCreate(Bundle savedInstanceState) {<br />
        super.onCreate(savedInstanceState);<br />
        setContentView(R.layout.activity_main);<br />
        if (rootCheck()){<br />
            Toast.makeText(this, “root”, Toast.LENGTH_SHORT).show();<br />
            finish();<br />
        }<br />
    }</p>

<div class="highlighter-rouge"><pre class="highlight"><code>public boolean rootCheck(){
    String[] arrayOfString = new String[5];
    arrayOfString[0] = "/sbin/su";
    arrayOfString[1] = "/system/su";
    arrayOfString[2] = "/system/sbin/su";
    arrayOfString[3] = "/system/xbin/su";
    arrayOfString[4] = "/data/data/com.noshufou.android.su";
    int i = 0;
    while (true)
    {
        if (i &gt;= arrayOfString.length)
            return false;
        if (new File(arrayOfString[i]).exists())
            return true;
        i += 1;
    }
}   ```
</code></pre>
</div>

<ul>
  <li>apktool_2.2.1.jar 을 이용하여 루팅 테스트 앱을 smali 코드로 변경 한다.</li>
  <li>java -jar apktool_2.2.1.jar d root.apk</li>
  <li>MainActivity.smali  파일에서 루팅 검사를 무력화 시킨다</li>
  <li>변경 방법은 문자열을 아래처럼 변경 해도 되고 <br />
  const-string v5, “/system/sbin/su1”</li>
  <li>조건문을 변경해도 됩니다. 아래는 원래 코드 입니다.</li>
  <li>
    <p>if-eqz v0 v0 ==0 이면 cond_0 으로 간다는 내용 정도</p>

    <div class="highlighter-rouge"><pre class="highlight"><code>  invoke-virtual {p0}, Lkr/test/hello/MainActivity;-&gt;rootCheck()Z
  move-result v0
  if-eqz v0, :cond_0
</code></pre>
    </div>
  </li>
  <li>if-eqz v0, :cond_0  =&gt;  if-nez v0, :cond_0</li>
  <li>위 처럼 조건문을 변경해도 됩니다.</li>
  <li>smali 코드를 잘분석해서 변경 해야 합니다.</li>
  <li>java -jar apktool_2.2.1.jar b root  으로 다시 컴파일 (폴더 이름임)</li>
  <li>dist 폴더에 apk 가 생성됨</li>
  <li>apk 를 서명하여 앱을 실행하면 앱이</li>
</ul>

<h4 id="section-1">3.  로그 추가 하기</h4>
<ul>
  <li>함수위에 .local 숫자 이렇게 있는데 변수 개수 입니다.</li>
  <li>만약 기존 함수에 .local 3 이 있으면 .local 5 로 변경 하고</li>
  <li>
    <p>아래와 같은 코드를 추가 하면 로그를 추력 할 수 있습니다.</p>

    <p><code class="highlighter-rouge">
 const-string v3, "[Injected Message]"		
 const-string v4, "Called onCreate() Method"	
 invoke-static {v3, v4}, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I 
</code></p>
  </li>
  <li>Log 클래스의 함수는 는 인자를 2개 받기 때문에 변수 v3,v4 에 각각 원하는 문자열을 넣고 함수를 호출 하는 내용입니다.</li>
  <li>참고로 Log 클래스의 각 함수는 int 형을 반화하기에 위처럼 마지막 문자열에 I  가 있습니다.</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
