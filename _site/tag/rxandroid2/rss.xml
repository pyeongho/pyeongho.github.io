<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>pyeongho.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>즐거운 공장</description>
   <language>en-uk</language>
   <managingEditor> PyeongHo</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>retrofit2 + okhttp3 + rxandroid2네이버 기계번역 사용하기</title>
	  <link>//retrofit2</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-02-05T00:00:00+09:00</pubDate>
	  <guid>//retrofit2</guid>
	  <description><![CDATA[
	     <h3 id="retrofit2--rxandroid2-를-이용한-통신">retrofit2 + rxandroid2 를 이용한 통신</h3>
<ul>
  <li>rxandroid2 를 추가해 보았습니다.</li>
</ul>

<h4 id="1-dependencies-추가">1. dependencies 추가</h4>

<div class="language-gradle highlighter-rouge"><pre class="highlight"><code>    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:okhttp:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.okhttp3:logging-interceptor:3.6.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:retrofit:2.1.0'</span>
    <span class="n">compile</span> <span class="s1">'com.squareup.retrofit2:converter-gson:2.1.0'</span>

    <span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxjava:2.0.1'</span>
    <span class="n">compile</span> <span class="s1">'io.reactivex.rxjava2:rxandroid:2.0.1'</span>
    <span class="n">compile</span> <span class="s1">'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'</span>
</code></pre>
</div>

<h4 id="2-rxandroid2-관련-의존성이-추가됨">2. RxAndroid2 관련 의존성이 추가됨</h4>
<ul>
  <li>인터넷 샘플에는 RxAndroid1 관련 내용이 많아서 RxAndroid2 를 만들어 보았습니다.</li>
</ul>

<h4 id="3-기존-번역은-버튼에서-버튼을-하나더-추가해서-rxandroid2-를-사용하도록-하겠습니다">3. 기존 번역은 버튼에서 버튼을 하나더 추가해서 rxandroid2 를 사용하도록 하겠습니다.</h4>
<ul>
  <li>버튼 추가와 이벤트 연결을 해주세요.</li>
  <li>전체 코드에 있습니다. 참고해 주세요</li>
</ul>

<h4 id="4-baseactivity-고려-안함">4. BaseActivity 고려 안함</h4>
<ul>
  <li>샘플 코드에서 상속 받은 액티비티가 있으면 이상하게 잘 안보게 되어서 추가 안했습니다.</li>
  <li>애플리케이션 만들때 기본 액티비티 상속 받으면 편한점이 많아습니다.</li>
</ul>

<h4 id="5-리액티브-관련-내용은-다른곳-을-추천-합니다">5. 리액티브 관련 내용은 다른곳 을 추천 합니다.</h4>
<ul>
  <li><a href="https://realm.io/kr/news/rxandroid/">Realm rxandroid 링크</a></li>
  <li>rxandroid 링크들을 공부 하다 보면 람다 문법이 많이 나오는데 저는 사용안합니다.</li>
  <li>처음 람다를 접하면 이해가 안되고 무엇을 넣어야 할지 모르겠습니다.</li>
  <li>좀더 편하게 되고 전혀 헷갈리지 않을때 사용을 고려하겠습니다.</li>
</ul>

<h4 id="6-retrofit2--rxandroid2-진행-순서">6. retrofit2 + rxandroid2 진행 순서</h4>
<ul>
  <li>retrofit2 클라이언트에 rxandroid2 어댑터 추가</li>
  <li>retrofit2에 리퀘스트 rxandroid 용 Observable 추가</li>
  <li>CompositeDisposable 을 사용 및 생성 추가</li>
  <li>결과 콜백 받을 클래스 생성, 기본을 사용해도 되지만 이건 나중에 사용하기 좋게 클래스 추가</li>
  <li>버튼 클릭시 rxandroid 형태로 스트림 시작</li>
</ul>

<h4 id="7-위-순서대로-진행-코드-추가">7. 위 순서대로 진행 코드 추가</h4>

<h5 id="1-retrofit2-클라이언트에-rxandroid2-어댑터-추가">1. retrofit2 클라이언트에 rxandroid2 어댑터 추가</h5>
<ul>
  <li>AppClient 클래스의 retrofit 생성에서 addCallAdapterFactory 를 추가 합니다.</li>
  <li>
    <p>추가된 의존성에 RxJava2CallAdapterFactory 가 있습니다.</p>
  </li>
  <li>
    <div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">mRetrofit</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Retrofit</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
<span class="o">.</span><span class="na">baseUrl</span><span class="o">(</span><span class="n">ApiStores</span><span class="o">.</span><span class="na">API_SERVER_URL</span><span class="o">)</span>
<span class="o">.</span><span class="na">addConverterFactory</span><span class="o">(</span><span class="n">GsonConverterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
<span class="o">.</span><span class="na">addCallAdapterFactory</span><span class="o">(</span><span class="n">RxJava2CallAdapterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">())</span>
<span class="o">.</span><span class="na">client</span><span class="o">(</span><span class="n">okHttpClient</span><span class="o">)</span>
<span class="o">.</span><span class="na">build</span><span class="o">();</span>
</code></pre>
    </div>
  </li>
</ul>

<h5 id="2-retrofit2에-리퀘스트-rxandroid-용-observable-추가">2. retrofit2에 리퀘스트 rxandroid 용 Observable 추가</h5>
<ul>
  <li>
    <p>ApiStores 클래스에 Observable 을 반환 하는 리퀘스트 추가</p>
  </li>
  <li>
    <pre><code class="language-javja">@FormUrlEncoded
@POST("/v1/language/translate")
Observable&lt;TranslateMessage&gt; loadDataByRetrofitRx(
        @Field("source") String source,
        @Field("target") String target,
        @Field("text") String text);  
</code></pre>
  </li>
</ul>

<h5 id="3-compositedisposable-을-사용-및-생성-추가">3. CompositeDisposable 을 사용 및 생성 추가</h5>
<ul>
  <li>Observable, Observer 를 아래 처럼 추가 했는데 좋아 보이지 않음</li>
  <li>
    <script src="https://gist.github.com/pyeongho/7b0a8b61f99271d81b4f4849906cad8e.js"></script>
  </li>
  <li>그래서 Observer 에러 처리와 좀더 이해하기 쉬윈 메소드로 변경하기 위해서 옵저버를 상속함</li>
  <li>
    <script src="https://gist.github.com/pyeongho/e2bfdb18687c105d3253b87f2b1d01b1.js"></script>
  </li>
  <li>위 클래스를 이용하여 사용</li>
  <li>
    <script src="https://gist.github.com/pyeongho/e7ba0b445883fab14479126bf0b3ca5b.js"></script>
  </li>
  <li>subcription 이 훨씬 이해하기 좋게 변경됨</li>
</ul>

<h4 id="8--최종-결과-코드">8 . 최종 결과 코드</h4>
<ul>
  <li><a href="https://github.com/pyeongho/Sample">https://github.com/pyeongho/Sample</a></li>
  <li>한번에 커밋 하지 못해서 두번째 세번째 업데이트 내용입니다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>RxAndroid2 를 이용해서 앱을 만들어 보자</title>
	  <link>//rxandroid_1</link>
	  <author>PyeongHo</author>
	  <pubDate>2017-01-22T00:00:00+09:00</pubDate>
	  <guid>//rxandroid_1</guid>
	  <description><![CDATA[
	     <h4 id="1-rxandroid2-를-이용한-샘플-앱을-만들어-보면서-rxandroid-에-적응해-보자">1. RxAndroid2 를 이용한 샘플 앱을 만들어 보면서 RxAndroid 에 적응해 보자</h4>

<ul>
  <li>인터넷에 rxjava, RxAndroid 내용들이 너무 많아서 해당 내용은 따로 기술 안함</li>
  <li><a href="https://realm.io/kr/news/rxandroid/">공부하기 좋은 링크</a></li>
  <li>위 링크가 기본 rxandroid 를 이해하기 좋습니다.</li>
  <li>약간의 요약
    <ul>
      <li>1라인 컨베이어 벨트 또는 강 를 만든다. (Observable)</li>
      <li>컨베이어벨트 끝 에서 하나씩 작업하는 작업 자 또는 강에서 하나씩 건진는 작업자(Subscriber)</li>
      <li>Observable 에 데이터를 제공하는 생산자
        <ul>
          <li>onNext - 새로운 데이터를 전달한다.</li>
          <li>onCompleted - 스트림의 종료.</li>
          <li>onError - 에러 신호를 전달한다</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>가장 간단한 문자열을 전달하는 샘플 코드를 확인해 보겠습니다.</li>
  <li>기본적인 프로젝트 생성후 아래 2개의 의존성을 추가합니다.(app level)</li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>    compile 'io.reactivex.rxjava2:rxjava:2.0.2'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1' 
</code></pre>
</div>

<ul>
  <li>코드는 아래 입니다.</li>
  <li>getObservable() 함수에 onNext 도 사용하지 않고 Observable을 생성합니다. 간단하게 상용 가능합니다.
    <ul>
      <li>Observable.just(“Cricket”, “Football”);</li>
    </ul>
  </li>
  <li>실행을 하면 onNext 가 2번 호출 되며 인자는 크리켓과 풋볼이 넘어 옵니다.</li>
  <li>onCompleted 이 실행되면서 동작이 완료 됩니다.</li>
  <li>아래 코드가 가장 간단하고 기본적인 내용이니 꼭 이해 해야 합니다.</li>
</ul>

<script src="https://gist.github.com/pyeongho/b912db5c42e318f54b5941a54b7b65b7.js"></script>


	  ]]></description>
	</item>


</channel>
</rss>
